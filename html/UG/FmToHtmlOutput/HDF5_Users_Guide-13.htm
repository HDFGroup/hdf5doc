<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 12.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="HDF5_Users_Guide.css" CHARSET="UTF-8" TYPE="text/css">
<TITLE> 11. Additional Resources</TITLE></HEAD>
<BODY>
<H1 CLASS="FM-Heading-Level1">
<A NAME="50647043_pgfId-1192680"></A>11. <A NAME="50647043_AdditionalChapter"></A>Additional Resources</H1>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192681"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192682"></A>&lt;/div&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192683"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192684"></A>&lt;!-- FOR USE WITH ELECTRONIC VERSION ---------------------------------&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192685"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192686"></A>&lt;center&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192687"></A>&lt;table border=&quot;0&quot; width=&quot;80%&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192688"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192689"></A>    &lt;tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192690"></A>      &lt;td valign=&quot;top&quot; colspan=&quot;3&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192691"></A>      &lt;p&gt;These documents supplement the &lt;cite&gt;HDF5 User&amp;rsquo;s Guide&lt;/cite&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192692"></A>      and provide additional detailed information for the use and tuning </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192693"></A>      of specific HDF5 features.&lt;/p&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192694"></A>      &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192695"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192696"></A>    &lt;tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192697"></A>      &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192698"></A>      &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192699"></A>      &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192700"></A>      &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192701"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192702"></A>    &lt;tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192703"></A>      &lt;td valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192704"></A>      &lt;a href=&quot;http://www.hdfgroup.org/HDF5/examples/&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192705"></A>      HDF5 Examples&lt;/a&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192706"></A>      &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192707"></A>      &lt;td valign=&quot;top&quot;&gt;Code examples by API. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192708"></A>        &lt;!-- 11.2.10, keep code examples at the top of the list of links --&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192709"></A>        &lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192710"></A>      &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192711"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192712"></A>    &lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192713"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192714"></A>    &lt;tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192715"></A>      &lt;td valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192716"></A>      &lt;a href=&quot;../Advanced/Chunking/index.html&quot;&gt;Chunking in HDF5&lt;/a&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192717"></A>      &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192718"></A>      &lt;td valign=&quot;top&quot;&gt;Structuring the use of chunking and tuning it for </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192719"></A>      performance.&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192720"></A>      &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192721"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192722"></A>    &lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192723"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192724"></A>    &lt;tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192725"></A>      &lt;td valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192726"></A>      &lt;a href=&quot;../Advanced/DirectChunkWrite/UsingDirectChunkWrite.pdf&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192727"></A>      Using the Direct Chunk Write Function&lt;/a&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192728"></A>      &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192729"></A>      &lt;td valign=&quot;top&quot;&gt;Describes another way that chunks can be written </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192730"></A>      to datasets.&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192731"></A>      &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192732"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192733"></A>    &lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192734"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192735"></A>    &lt;tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192736"></A>      &lt;td valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192737"></A>      &lt;a href=&quot;../Advanced/CommittedDatatypeCopying/CopyingCommittedDatatypesWithH5Ocopy.pdf&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192738"></A>      Copying Committed Datatypes with H5Ocopy&lt;/a&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192739"></A>      &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192740"></A>      &lt;td valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192741"></A>      Describes how to copy to another file a dataset that uses a committed </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192742"></A>      datatype or an object with an attribute that uses a committed datatype </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192743"></A>      so that the committed datatype in the destination file can be used by </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192744"></A>      multiple objects.&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192745"></A>      &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192746"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192747"></A>    &lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192748"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192749"></A>    &lt;tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192750"></A>      &lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;../Advanced/MetadataCache/index.html&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192751"></A>      Metadata Caching in HDF5&lt;/a&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192752"></A>      &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192753"></A>      &lt;td valign=&quot;top&quot;&gt;Managing the HDF5 metadata cache and tuning it for </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192754"></A>      performance.&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192755"></A>      &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192756"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192757"></A>    &lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192758"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192759"></A>    &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192760"></A>      &lt;a href=&quot;../Advanced/DynamicallyLoadedFilters/HDF5DynamicallyLoadedFilters.pdf&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192761"></A>      HDF5 Dynamically Loaded Filters&lt;/a&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192762"></A>      &lt;td&gt;&amp;nbsp;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192763"></A>      &lt;td valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192764"></A>      Describes how an HDF5 application can apply a filter that is not </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192765"></A>      registered with the HDF5 Library.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192766"></A>      &lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192767"></A>      &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192768"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192769"></A>    &lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192770"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192771"></A>    &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192772"></A>      &lt;a href=&quot;../Advanced/FileImageOperations/HDF5FileImageOperations.pdf&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192773"></A>      HDF5 File Image Operations&lt;/a&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192774"></A>      &lt;td&gt;&amp;nbsp;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192775"></A>      &lt;td valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192776"></A>      Describes how to work with HDF5 files in memory. Disk I/O is not </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192777"></A>      required when file images are opened, created, read from, or </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192778"></A>      written to.&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192779"></A>      &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192780"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192781"></A>    &lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192782"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192783"></A>    &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192784"></A>      &lt;a href=&quot;../Advanced/ModifiedRegionWrites/ModifiedRegionWrites.pdf&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192785"></A>      Modified Region Writes&lt;/a&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192786"></A>      &lt;td&gt;&amp;nbsp;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192787"></A>      &lt;td valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192788"></A>      Describes how to set write operations for in-memory files so that </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192789"></A>      only modified regions are written to storage. Available when </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192790"></A>      the Core (Memory) VFD is used. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192791"></A>      &lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192792"></A>      &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192793"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192794"></A>    &lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192795"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192796"></A>    &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;../Advanced/UsingIdentifiers/index.html&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192797"></A>      Using Identifiers&lt;/a&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192798"></A>      &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192799"></A>      &lt;td valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192800"></A>      Describes how identifiers behave and how they should be treated.&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192801"></A>      &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192802"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192803"></A>    &lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192804"></A>    </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192805"></A>    &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;../Advanced/UsingUnicode/index.html&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192806"></A>      Using UTF-8 Encoding in &lt;/a&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192807"></A>      &lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192808"></A>      &lt;a href=&quot;../Advanced/UsingUnicode/index.html&quot;&gt;HDF5 Applications&lt;/a&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192809"></A>      </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192810"></A>      &lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192811"></A>      &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192812"></A>      &lt;td valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192813"></A>      Describes the use of UTF-8 Unicode character encodings in HDF5 </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192814"></A>      applications.&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192815"></A>      &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192816"></A>      </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192817"></A>    &lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192818"></A>    </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192819"></A>    &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;../Advanced/FreeingMemory/FreeingMemoryAllocatedByTheHdf5Library.pdf&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192820"></A>      Freeing Memory Allocated&lt;/a&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192821"></A>      &lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192822"></A>      &lt;a href=&quot;../Advanced/FreeingMemory/FreeingMemoryAllocatedByTheHdf5Library.pdf&quot;&gt;by the HDF5 Library&lt;/a&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192823"></A>      &lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192824"></A>      &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192825"></A>      &lt;td valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192826"></A>      Describes how inconsistent memory management can cause heap </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192827"></A>      corruption or resource leaks and possible solutions.&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192828"></A>      &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192829"></A>      </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192830"></A>    &lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192831"></A>    </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192832"></A>    &lt;tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192833"></A>      &lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;../Glossary.html&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192834"></A>      HDF5 Glossary&lt;/a&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192835"></A>      &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192836"></A>      &lt;td valign=&quot;top&quot;&gt;A glossary of terms.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192837"></A>      &lt;!-- 11.2.10, keep Glossary at the bottom of the list of links --&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192838"></A>      &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192839"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192840"></A>      &lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192841"></A>      </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192842"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192843"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192844"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192845"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192846"></A>&lt;/table&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192847"></A>&lt;/center&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192848"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192849"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192850"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192851"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192852"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192853"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192854"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192855"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192856"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192857"></A>&lt;!-- FOR USE WITH ELECTRONIC VERSION ---------------------------------&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192858"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192859"></A>&lt;!-- PRINT VERSION INCLUDES THE TEXT TO THE END OF THE FILE --&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192860"></A>&lt;!-- FOR USE WITH PRINT VERSION --------------------------------------</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192861"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192862"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192863"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192864"></A>&lt;p&gt; This chapter provides supplemental material for the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192865"></A>    &lt;cite&gt;HDF5 User&amp;rsquo;s Guide&lt;/cite&gt;. &lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192866"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192867"></A>&lt;p&gt; To see code examples by API, go to the &lt;cite&gt;HDF5 Examples&lt;/cite&gt; </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192868"></A>    page at this address: </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192869"></A>    &lt;pre&gt;    http://www.hdfgroup.org/HDF5/examples/</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192870"></A>    &lt;/pre&gt;&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192871"></A>&lt;p&gt; For more information on how to manage the metadata cache and how </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192872"></A>    to configure it for better performance, go to the &lt;cite&gt;Metadata</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192873"></A>    Caching in HDF5&lt;/cite&gt; page at this address:</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192874"></A>    &lt;pre&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192875"></A>    http://www.hdfgroup.org/hdf5/doc/Advanced/MetadataCache/index.html</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192876"></A>    &lt;/pre&gt;&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192877"></A>&lt;p&gt; A number of functions are macros. For more information on how</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192878"></A>    to use the macros, see the &lt;cite&gt;API Compatibility Macros in HDF5&lt;/cite&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192879"></A>    page at this address:</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192880"></A>    &lt;pre&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192881"></A>    http://www.hdfgroup.org/HDF5/doc/RM/APICompatMacros.html</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192882"></A>    &lt;/pre&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192883"></A>    </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192884"></A>&lt;p&gt;The following sections are included in this chapter:&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192885"></A>&lt;ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192886"></A>    &lt;li&gt;&lt;i&gt;Using Identifiers&lt;/i&gt; - describes how identifiers behave</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192887"></A>    and how they should be treated</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192888"></A>    &lt;li&gt;&lt;i&gt;Chunking in HDF5&lt;/i&gt; - describes chunking storage and </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192889"></A>    how it can be used to improve performance</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192890"></A>    &lt;li&gt;&lt;i&gt;HDF5 Glossary and Terms&lt;/i&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192891"></A>&lt;/ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192892"></A>    </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192893"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192894"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192895"></A>&lt;!-- NEW PAGE --&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192896"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192897"></A>&lt;h2&gt;11.1. Using Identifiers&lt;/h2&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192898"></A>&lt;p&gt; The purpose of this section is to describe how identifiers behave </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192899"></A>    and how they should be treated by application programs.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192900"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192901"></A>&lt;p&gt; When an application program uses the HDF5 library to create or </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192902"></A>    open an item, a unique identifier is returned. The items that return </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192903"></A>    a unique identifier when they are created or opened include the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192904"></A>    following: dataset, group, datatype, dataspace, file, attribute, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192905"></A>    property list, referenced object, error stack, and error message.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192906"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192907"></A>&lt;p&gt; An application may open one of the items listed above more than </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192908"></A>    once at the same time. For example, an application might open a group </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192909"></A>    twice, receiving two identifiers. Information from one dataset in the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192910"></A>    group could be handled through one identifier, and the information </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192911"></A>    from another dataset in the group is handled by a different identifier.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192912"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192913"></A>&lt;p&gt; An application program should track every identifier it receives </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192914"></A>    as a result of creating or opening one of the items listed above. In </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192915"></A>    order for an application to close properly, it must release every </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192916"></A>    identifier it has opened. If an application opened a group twice for </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192917"></A>    example, it would need to issue two &lt;code&gt;H5Gclose&lt;/code&gt; commands, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192918"></A>    one for each identifier. Not releasing identifiers causes resource </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192919"></A>    leaks. Until an identifier is released, the item associated with </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192920"></A>    the identifier is still open.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192921"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192922"></A>&lt;p&gt; The library considers a file open until all of the identifiers </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192923"></A>    associated with the file and with the file’s various items have been </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192924"></A>    released. The identifiers associated with these open items must be </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192925"></A>    released separately. This means that an application can close a file </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192926"></A>    and still work with one or more portions of the file. Suppose an </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192927"></A>    application opened a file, a group within the file, and two datasets </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192928"></A>    within the group. If the application closed the file with </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192929"></A>    &lt;code&gt;H5Fclose&lt;/code&gt;, then the file would be considered closed </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192930"></A>    to the application, but the group and two datasets would still </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192931"></A>    be open.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192932"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192933"></A>&lt;p&gt; There are several exceptions to the above file closing rule. One </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192934"></A>    is when the &lt;code&gt;H5close&lt;/code&gt; function is used instead of </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192935"></A>    &lt;code&gt;H5Fclose&lt;/code&gt;. &lt;code&gt;H5close&lt;/code&gt; causes a general </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192936"></A>    shutdown of the library: all data is written to disk, all </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192937"></A>    identifiers are closed, and all memory used by the library is </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192938"></A>    cleaned up. Another exception occurs on parallel processing systems. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192939"></A>    Suppose on a parallel system an application has opened a file, a </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192940"></A>    group in the file, and two datasets in the group. If the application </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192941"></A>    uses the &lt;code&gt;H5Fclose&lt;/code&gt; function to close the file, the call </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192942"></A>    will fail with an error. The open group and datasets must be closed </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192943"></A>    before the file can be closed. A third exception is when the file </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192944"></A>    access property list includes the property </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192945"></A>    &lt;code&gt;H5F_CLOSE_STRONG&lt;/code&gt;. This property causes the closing </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192946"></A>    of all of the file’s open items when the file is closed with </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192947"></A>    &lt;code&gt;H5Fclose&lt;/code&gt;.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192948"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192949"></A>&lt;p&gt; For more information about &lt;code&gt;H5close&lt;/code&gt;, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192950"></A>    &lt;code&gt;H5Fclose&lt;/code&gt;, and &lt;code&gt;H5Pset_fclose_degree&lt;/code&gt;, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192951"></A>    see the &lt;a href=&quot;../RM/RM_H5Front.html&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192952"></A>    &lt;cite&gt;HDF5 Reference Manual&lt;/cite&gt;&lt;/a&gt;&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192953"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192954"></A>&lt;!--</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192955"></A>---------1---------2---------3---------4---------5---------6---------7---------8</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192956"></A>--&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192957"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192958"></A>&lt;h3&gt;Functions that Return Identifiers&lt;/h3&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192959"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192960"></A>&lt;p&gt;Some of the functions that return identifiers are listed below.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192961"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192962"></A>&lt;ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192963"></A>&lt;li&gt;&lt;code&gt;H5Acreate&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192964"></A>&lt;li&gt;&lt;code&gt;H5Acreate_by_name&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192965"></A>&lt;li&gt;&lt;code&gt;H5Aget_type&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192966"></A>&lt;li&gt;&lt;code&gt;H5Aopen&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192967"></A>&lt;li&gt;&lt;code&gt;H5Aopen_by_idx&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192968"></A>&lt;li&gt;&lt;code&gt;H5Aopen_by_name&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192969"></A>&lt;li&gt;&lt;code&gt;H5Dcreate&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192970"></A>&lt;li&gt;&lt;code&gt;H5Dcreate_anon&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192971"></A>&lt;li&gt;&lt;code&gt;H5Dget_access_plist&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192972"></A>&lt;li&gt;&lt;code&gt;H5Dget_create_plist&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192973"></A>&lt;li&gt;&lt;code&gt;H5Dget_space&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192974"></A>&lt;li&gt;&lt;code&gt;H5Dget_type&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192975"></A>&lt;li&gt;&lt;code&gt;H5Dopen&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192976"></A>&lt;li&gt;&lt;code&gt;H5Ecreate_msg&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192977"></A>&lt;li&gt;&lt;code&gt;H5Ecreate_stack&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192978"></A>&lt;li&gt;&lt;code&gt;H5Fcreate&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192979"></A>&lt;li&gt;&lt;code&gt;H5Fopen&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192980"></A>&lt;li&gt;&lt;code&gt;H5Freopen&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192981"></A>&lt;li&gt;&lt;code&gt;H5Gcreate&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192982"></A>&lt;li&gt;&lt;code&gt;H5Gcreate_anon&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192983"></A>&lt;li&gt;&lt;code&gt;H5Gopen&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192984"></A>&lt;li&gt;&lt;code&gt;H5Oopen&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192985"></A>&lt;li&gt;&lt;code&gt;H5Oopen_by_addr&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192986"></A>&lt;li&gt;&lt;code&gt;H5Oopen_by_idx&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192987"></A>&lt;li&gt;&lt;code&gt;H5Pcreate&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192988"></A>&lt;li&gt;&lt;code&gt;H5Rdereference&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192989"></A>&lt;li&gt;&lt;code&gt;H5Rget_region&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192990"></A>&lt;li&gt;&lt;code&gt;H5Screate&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192991"></A>&lt;li&gt;&lt;code&gt;H5Screate_simple&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192992"></A>&lt;li&gt;&lt;code&gt;H5Tcopy&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192993"></A>&lt;li&gt;&lt;code&gt;H5Tcreate&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192994"></A>&lt;li&gt;&lt;code&gt;H5Tdecode&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192995"></A>&lt;li&gt;&lt;code&gt;H5Tget_member_type&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192996"></A>&lt;li&gt;&lt;code&gt;H5Tget_super&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192997"></A>&lt;li&gt;&lt;code&gt;H5Topen&lt;/code&gt;&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192998"></A>&lt;/ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1192999"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193000"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193001"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193002"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193003"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193004"></A>&lt;!-- NEW PAGE --&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193005"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193006"></A>&lt;h2&gt;11.2. Chunking in HDF5&lt;/h2&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193007"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193008"></A>&lt;p&gt; Datasets in HDF5 not only provide a convenient, structured, and </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193009"></A>    self-describing way to store data, but are also designed to do so with </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193010"></A>    good performance. In order to maximize performance, the HDF5 library </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193011"></A>    provides ways to specify how the data is stored on disk, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193012"></A>    how it is accessed, and how it should be held in memory.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193013"></A>&lt;!--</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193014"></A>---------1---------2---------3---------4---------5---------6---------7---------8</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193015"></A>--&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193016"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193017"></A>&lt;h3&gt;11.2.1. What are Chunks?&lt;/h3&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193018"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193019"></A>&lt;p&gt; Datasets in HDF5 can represent arrays with any number of dimensions </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193020"></A>    (up to 32). However, in the file this dataset must be stored as part </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193021"></A>    of the 1-dimensional stream of data that is the low-level file. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193022"></A>    The way in which the multidimensional dataset is mapped to the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193023"></A>    serial file is called the layout. The most obvious way to accomplish </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193024"></A>    this is to simply flatten the dataset in a way similar to how arrays </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193025"></A>    are stored in memory, serializing the entire dataset into a </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193026"></A>    monolithic block on disk, which maps directly to a memory buffer </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193027"></A>    the size of the dataset. This is called a contiguous layout.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193028"></A>    </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193029"></A>&lt;p&gt; An alternative to the contiguous layout is the chunked layout. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193030"></A>    Whereas contiguous datasets are stored in a single block in the file, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193031"></A>    chunked datasets are split into multiple chunks&lt;/em&gt; which are </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193032"></A>    all stored separately in the file. The chunks can be stored in any </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193033"></A>    order and any position within the HDF5 file. Chunks can then be read </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193034"></A>    and written individually, improving performance when operating on </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193035"></A>    a subset of the dataset. &lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193036"></A>    </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193037"></A>&lt;p&gt; The API functions used to read and write chunked datasets are </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193038"></A>    exactly the same functions used to read and write contiguous </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193039"></A>    datasets. The only difference is a single call to set up the layout </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193040"></A>    on a property list before the dataset is created. In this way, a </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193041"></A>    program can switch between using chunked and contiguous datasets </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193042"></A>    by simply altering that call. Example 1, below, creates a dataset </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193043"></A>    with a size of 12x12 and a chunk size of 4x4. The example could be </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193044"></A>    change to create a contiguous dataset instead by simply commenting </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193045"></A>    out the call to &lt;code&gt;H5Pset_chunk&lt;/code&gt;.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193046"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193047"></A>&lt;!-- NEW PAGE --&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193048"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193049"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193050"></A>&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193051"></A>    &lt;tr valign=&quot;top&quot;&gt; </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193052"></A>        &lt;td align=&quot;left&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193053"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193054"></A>        &lt;pre&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193055"></A>#include &lt;hdf5.h&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193056"></A>int main(void) {</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193057"></A>    hid_t   file_id, dset_id, space_id, dcpl_id;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193058"></A>    hsize_t chunk_dims[2] = {4, 4};</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193059"></A>    hsize_t dset_dims[2] = {12, 12};</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193060"></A>    int     buffer[12][12];</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193061"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193062"></A>    /* Create the file */</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193063"></A>    file_id = H5Fcreate(file.h5, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193064"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193065"></A>    /* Create a dataset creation property list and set it to use chunking</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193066"></A>    */</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193067"></A>    dcpl_id = H5Pcreate(H5P_DATASET_CREATE);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193068"></A>    H5Pset_chunk(dcpl_id, 2, chunk_dims);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193069"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193070"></A>    /* Create the dataspace and the chunked dataset */</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193071"></A>    space_id = H5Screate_simple(2, dset_dims, NULL);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193072"></A>    dset_id = H5Dcreate(file, dataset, H5T_NATIVE_INT, space_id, dcpl_id, H5P_DEFAULT);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193073"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193074"></A>    /* Write to the dataset */</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193075"></A>    buffer = &lt;initialize buffer&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193076"></A>    H5Dwrite(dset_id, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT, buffer);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193077"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193078"></A>    /* Close */</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193079"></A>    H5Dclose(dset_id);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193080"></A>    H5Sclose(space_id);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193081"></A>    H5Pclose(dcpl_id);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193082"></A>    H5Fclose(file_id);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193083"></A>    return 0;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193084"></A>}</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193085"></A>    &lt;/pre&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193086"></A>  &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193087"></A>    &lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193088"></A>    &lt;tr valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193089"></A>        &lt;td align=&quot;left&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193090"></A>        &lt;b&gt;Example 1. Creating a chunked dataset&lt;/b&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193091"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193092"></A>        &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193093"></A>&lt;/table&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193094"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193095"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193096"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193097"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193098"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193099"></A>&lt;p&gt; The chunks of a chunked dataset are split along logical boundaries </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193100"></A>    in the dataset's representation as an array, not along boundaries </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193101"></A>    in the serialized form. Suppose a dataset has a chunk size of 2x2. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193102"></A>    In this case, the first chunk would go from (0,0) to (2,2), the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193103"></A>    second from (0,2) to (2,4), and so on. By selecting the chunk size </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193104"></A>    carefully, it is possible to fine tune I/O to maximize performance </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193105"></A>    for any access pattern. Chunking is also required to use advanced </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193106"></A>    features such as compression and dataset resizing.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193107"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193108"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193109"></A>&lt;!-- NEW Page --&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193110"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193111"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193112"></A>&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193113"></A>    &lt;tr valign=&quot;top&quot;&gt; </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193114"></A>        &lt;td align=&quot;center&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193115"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193116"></A>        &lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193117"></A>        &lt;img src=&quot;Images/ChunkingFig001.png&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193118"></A>        &lt;br /&gt;&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193119"></A>        &lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193120"></A>    &lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193121"></A>    &lt;tr valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193122"></A>        &lt;td align=&quot;left&quot; &gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193123"></A>        &lt;b&gt;Figure 1. Contiguous dataset&lt;/b&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193124"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193125"></A>    &lt;/table&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193126"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193127"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193128"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193129"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193130"></A>&lt;!-- NEW Page --&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193131"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193132"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193133"></A>&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193134"></A>    &lt;tr valign=&quot;top&quot;&gt; </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193135"></A>        &lt;td align=&quot;center&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193136"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193137"></A>        &lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193138"></A>        &lt;img src=&quot;Images/ChunkingFig002.png&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193139"></A>        &lt;br /&gt;&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193140"></A>        &lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193141"></A>    &lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193142"></A>    &lt;tr valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193143"></A>        &lt;td align=&quot;left&quot; &gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193144"></A>        &lt;b&gt;Figure 2. Chunked dataset&lt;/b&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193145"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193146"></A>    &lt;/table&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193147"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193148"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193149"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193150"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193151"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193152"></A>&lt;!-- NEW PAGE --&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193153"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193154"></A>&lt;h3&gt;11.2.2. Data Storage Order&lt;/h3&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193155"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193156"></A>&lt;p&gt; To understand the effects of chunking on I/O performance it is </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193157"></A>    necessary to understand the order in which data is actually stored </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193158"></A>    on disk.  When using the C interface, data elements are stored in </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193159"></A>    &quot;row-major&quot; order, meaning that, for a 2-dimensional dataset, rows </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193160"></A>    of data are stored in-order on the disk. This is equivalent to the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193161"></A>    storage order of C arrays in memory.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193162"></A>    </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193163"></A>&lt;p&gt; Suppose we have a 10x10 contiguous dataset B. The first element </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193164"></A>    stored on disk is B[0][0], the second B[0][1], the eleventh B[1][0], </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193165"></A>    and so on. If we want to read the elements from B[2][3] to B[2][7], </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193166"></A>    we have to read the elements in the 24th, 25th, 26th, 27th, and 28th </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193167"></A>    positions. Since all of these positions are contiguous, or next to </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193168"></A>    each other, this can be done in a single read operation: read 5 </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193169"></A>    elements starting at the 24th position. This operation is illustrated </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193170"></A>    in figure 3: the pink cells represent elements to be read and the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193171"></A>    solid line represents a read operation. Now suppose we want to </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193172"></A>    read the elements in the column from B[3][2] to B[7][2]. In this case </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193173"></A>    we must read the elements in the 33rd, 43rd, 53rd, 63rd, and 73rd </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193174"></A>    positions. Since these positions are not contiguous, this must be </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193175"></A>    done in 5 separate read operations. This operation is illustrated </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193176"></A>    in figure 4: the solid lines again represent read operations, and </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193177"></A>    the dotted lines represent seek operations. An alternative would </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193178"></A>    be to perform a single large read operation , in this case 41 </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193179"></A>    elements starting at the 33rd position. This is called a </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193180"></A>    sieve buffer&lt;/em&gt; and is supported by HDF5 for contiguous </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193181"></A>    datasets, but not for chunked datasets. By setting the chunk sizes </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193182"></A>    correctly, it is possible to greatly exceed the performance of the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193183"></A>    sieve buffer scheme.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193184"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193185"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193186"></A>&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193187"></A>    &lt;tr valign=&quot;top&quot;&gt; </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193188"></A>        &lt;td align=&quot;center&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193189"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193190"></A>        &lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193191"></A>        &lt;img src=&quot;Images/ChunkingFig003.png&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193192"></A>        &lt;br /&gt;&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193193"></A>        &lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193194"></A>        &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193195"></A>    &lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193196"></A>    &lt;tr valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193197"></A>        &lt;td align=&quot;left&quot; &gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193198"></A>        &lt;b&gt;Figure 3. Reading part of a row from a contiguous dataset&lt;/b&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193199"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193200"></A>        &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193201"></A>  &lt;/table&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193202"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193203"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193204"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193205"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193206"></A>&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193207"></A>    &lt;tr valign=&quot;top&quot;&gt; </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193208"></A>        &lt;td align=&quot;center&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193209"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193210"></A>        &lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193211"></A>        &lt;img src=&quot;Images/ChunkingFig004.png&quot; alt=&quot;Illustration of a </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193212"></A>        partial column of a contiguous dataset&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193213"></A>        &lt;br /&gt;&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193214"></A>        &lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193215"></A>        &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193216"></A>    &lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193217"></A>    &lt;tr valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193218"></A>        &lt;td align=&quot;left&quot; &gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193219"></A>        &lt;b&gt;Figure 4. Reading part of a column from a contiguous dataset&lt;/b&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193220"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193221"></A>        &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193222"></A>&lt;/table&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193223"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193224"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193225"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193226"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193227"></A>&lt;p&gt; Likewise, in higher dimensions, the last dimension specified is the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193228"></A>    fastest changing on disk. So if we have a four dimensional dataset A, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193229"></A>    then the first element on disk would be A[0][0][0][0], the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193230"></A>    second A[0][0][0][1], the third A[0][0][0][2], and so on.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193231"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193232"></A>&lt;h3&gt;11.2.3. Chunking and Partial I/O&lt;/h3&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193233"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193234"></A>&lt;p&gt; The issues outlined above regarding data storage order help to </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193235"></A>    illustrate one of the major benefits of dataset chunking, its </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193236"></A>    ability to improve the performance of partial I/O. Partial I/O </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193237"></A>    is an I/O operation (read or write) which operates on only one </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193238"></A>    part of the dataset. To maximize the performance of partial I/O, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193239"></A>    the data elements selected for I/O must be contiguous on disk. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193240"></A>    As we saw above, with a contiguous dataset, this means that the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193241"></A>    selection must always equal the extent in all but the slowest </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193242"></A>    changing dimension, unless the selection in the slowest changing </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193243"></A>    dimension is a single element. With a 2-d dataset in C, this </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193244"></A>    means that the selection must be as wide as the entire dataset </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193245"></A>    unless only a single row is selected. With a 3-d dataset, this </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193246"></A>    means that the selection must be as wide and as deep as the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193247"></A>    entire dataset, unless only a single row is selected, in which </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193248"></A>    case it must still be as deep as the entire dataset, unless </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193249"></A>    only a single column is also selected.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193250"></A>  </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193251"></A>&lt;p&gt; Chunking allows the user to modify the conditions for maximum </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193252"></A>    performance by changing the regions in the dataset which are </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193253"></A>    contiguous. For example, reading a 20x20 selection in a contiguous </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193254"></A>    dataset with a width greater than 20 would require 20 separate </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193255"></A>    and non-contiguous read operations. If the same operation were </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193256"></A>    performed on a dataset that was created with a chunk size of </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193257"></A>    20x20, the operation would require only a single read operation. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193258"></A>    In general, if your selections are always the same size (or </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193259"></A>    multiples of the same size), and start at multiples of that </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193260"></A>    size, then the chunk size should be set to the selection size, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193261"></A>    or an integer divisor of it. This recommendation is subject to </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193262"></A>    the guidelines in the pitfalls&lt;/em&gt; section; specifically, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193263"></A>    it should not be too small or too large.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193264"></A>  </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193265"></A>&lt;p&gt; Using this strategy, we can greatly improve the performance of the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193266"></A>    operation shown in figure 4. If we create the dataset with a chunk </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193267"></A>    size of 10x1, each column of the dataset will be stored separately </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193268"></A>    and contiguously. The read of a partial column can then be done is </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193269"></A>    a single operation. This is illustrated in figure 5, and the code </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193270"></A>    to implement a similar operation is shown in example 2. For </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193271"></A>    simplicity, example 2 implements writing to this dataset instead </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193272"></A>    of reading from it.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193273"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193274"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193275"></A>&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193276"></A>    &lt;tr valign=&quot;top&quot;&gt; </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193277"></A>        &lt;td align=&quot;center&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193278"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193279"></A>        &lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193280"></A>        &lt;img src=&quot;Images/ChunkingFig005.png&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193281"></A>        &lt;br /&gt;&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193282"></A>        &lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193283"></A>    &lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193284"></A>    &lt;tr valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193285"></A>        &lt;td align=&quot;left&quot; &gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193286"></A>        &lt;b&gt;Figure 5. Reading part of a column from a chunked dataset&lt;/b&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193287"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193288"></A>&lt;/table&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193289"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193290"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193291"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193292"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193293"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193294"></A>    </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193295"></A>&lt;!-- NEW PAGE --&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193296"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193297"></A>    </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193298"></A>&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193299"></A>    &lt;tr valign=&quot;top&quot;&gt; </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193300"></A>        &lt;td align=&quot;left&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193301"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193302"></A>        &lt;pre&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193303"></A>#include &lt;hdf5.h&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193304"></A>int main(void) {</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193305"></A>    hid_t   file_id, dset_id, fspace_id, mspace_id, dcpl_id;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193306"></A>    hsize_t chunk_dims[2] = {10, 1};</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193307"></A>    hsize_t dset_dims[2] = {10, 10};</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193308"></A>    hsize_t mem_dims[1] = {5};</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193309"></A>    hsize_t start[2] = {3, 2};</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193310"></A>    hsize_t count[2] = {5, 1};</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193311"></A>    int     buffer[5];</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193312"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193313"></A>    /* Create the file */</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193314"></A>    file_id = H5Fcreate(file.h5&lt;/em&gt;, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193315"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193316"></A>    /* Create a dataset creation property list and set it to use chunking</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193317"></A>    * with a chunk size of 10x1 */</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193318"></A>    dcpl_id = H5Pcreate(H5P_DATASET_CREATE);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193319"></A>    H5Pset_chunk(dcpl_id, 2, chunk_dims);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193320"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193321"></A>    /* Create the dataspace and the chunked dataset */</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193322"></A>    space_id = H5Screate_simple(2, dset_dims, NULL);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193323"></A>    dset_id = H5Dcreate(file, dataset&lt;/em&gt;, H5T_NATIVE_INT, space_id, dcpl_id, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193324"></A>H5P_DEFAULT);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193325"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193326"></A>    /* Select the elements from 3, 2 to 7, 2 */</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193327"></A>    H5Sselect_hyperslab(fspace_id, H5S_SELECT_SET, start, NULL, count, NULL);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193328"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193329"></A>    /* Create the memory dataspace */</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193330"></A>    mspace_id = H5Screate_simple(1, mem_dims, NULL);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193331"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193332"></A>    /* Write to the dataset */</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193333"></A>    buffer = &lt;initialize buffer&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193334"></A>    H5Dwrite(dset_id, H5T_NATIVE_INT, mspace_id, fpsace_id, H5P_DEFAULT, buffer);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193335"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193336"></A>    /* Close */</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193337"></A>    H5Dclose(dset_id);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193338"></A>    H5Sclose(fspace_id);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193339"></A>    H5Sclose(mspace_id);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193340"></A>    H5Pclose(dcpl_id);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193341"></A>    H5Fclose(file_id);</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193342"></A>    return 0;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193343"></A>}&lt;/pre&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193344"></A>        &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193345"></A>    &lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193346"></A>    &lt;tr valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193347"></A>        &lt;td align=&quot;left&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193348"></A>        &lt;b&gt;Example 2. Writing part of a column to a chunked dataset&lt;/b&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193349"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193350"></A>        &lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193351"></A>&lt;/table&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193352"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193353"></A>    </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193354"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193355"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193356"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193357"></A>&lt;h3&gt;11.2.4. Chunk Caching&lt;/h3&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193358"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193359"></A>&lt;p&gt; Another major feature of the dataset chunking scheme is the chunk </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193360"></A>    cache.  As it sounds, this is a cache of the chunks in the dataset. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193361"></A>    This cache can greatly improve performance whenever the same chunks </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193362"></A>    are read from or written to multiple times, by preventing the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193363"></A>    library from having to read from and write to disk multiple times. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193364"></A>    However, the current implementation of the chunk cache does not adjust </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193365"></A>    its parameters automatically, and therefore the parameters must be </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193366"></A>    adjusted manually to achieve optimal performance. In some rare </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193367"></A>    cases it may be best to completely disable the chunk caching scheme. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193368"></A>    Each open dataset has its own chunk cache, which is separate from </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193369"></A>    the caches for all other open datasets.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193370"></A>  </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193371"></A>&lt;p&gt; When a selection is read from a chunked dataset, the chunks containing </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193372"></A>    the selection are first read into the cache, and then the selected </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193373"></A>    parts of those chunks are copied into the user's buffer. The cached </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193374"></A>    chunks stay in the cache until they are evicted, which typically </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193375"></A>    occurs because more space is needed in the cache for new chunks, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193376"></A>    but they can also be evicted if hash values collide (more on this </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193377"></A>    later). Once the chunk is evicted it is written to disk if necessary </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193378"></A>    and freed from memory.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193379"></A>  </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193380"></A>&lt;p&gt; This process is illustrated in figures 6 and 7. In figure 6, the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193381"></A>    application requests a row of values, and the library responds by </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193382"></A>    bringing the chunks containing that row into cache, and retrieving </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193383"></A>    the values from cache. In figure 7, the application requests a </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193384"></A>    different row that is covered by the same chunks, and the library </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193385"></A>    retrieves the values directly from cache without touching the disk.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193386"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193387"></A>&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193388"></A>    &lt;tr valign=&quot;top&quot;&gt; </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193389"></A>        &lt;td align=&quot;center&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193390"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193391"></A>        &lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193392"></A>        &lt;img src=&quot;Images/ChunkingFig006.png&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193393"></A>        &lt;br /&gt;&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193394"></A>        &lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193395"></A>    &lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193396"></A>    &lt;tr valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193397"></A>        &lt;td align=&quot;left&quot; &gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193398"></A>        &lt;b&gt;Figure 6. Reading a row from a chunked dataset with the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193399"></A>        chunk cache enabled&lt;/b&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193400"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193401"></A>    &lt;/table&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193402"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193403"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193404"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193405"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193406"></A>&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193407"></A>    &lt;tr valign=&quot;top&quot;&gt; </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193408"></A>        &lt;td align=&quot;center&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193409"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193410"></A>        &lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193411"></A>        &lt;img src=&quot;Images/ChunkingFig007.png&quot; alt=&quot;Illustration of chunk </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193412"></A>        caching and a row of a chunked dataset with the chunks already </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193413"></A>        in the cache&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193414"></A>        &lt;br /&gt;&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193415"></A>        &lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193416"></A>    &lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193417"></A>    &lt;tr valign=&quot;top&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193418"></A>        &lt;td align=&quot;left&quot; &gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193419"></A>        &lt;b&gt;Figure 7. Reading a row from a chunked dataset with the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193420"></A>        chunks already cached&lt;/b&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193421"></A>        &lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193422"></A>&lt;/table&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193423"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193424"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193425"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193426"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193427"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193428"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193429"></A>  </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193430"></A>&lt;p&gt; In order to allow the chunks to be looked up quickly in cache, each </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193431"></A>    chunk is assigned a unique hash value that is used to look up the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193432"></A>    chunk. The cache contains a simple array of pointers to chunks, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193433"></A>    which is called a hash table. A chunk's hash value is simply the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193434"></A>    index into the hash table of the pointer to that chunk. While the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193435"></A>    pointer at this location might instead point to a different chunk </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193436"></A>    or to nothing at all, no other locations in the hash table can </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193437"></A>    contain a pointer to the chunk in question. Therefore, the library </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193438"></A>    only has to check this one location in the hash table to tell if a </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193439"></A>    chunk is in cache or not. This also means that if two or more </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193440"></A>    chunks share the same hash value, then only one of those chunks can </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193441"></A>    be in the cache at the same time. When a chunk is brought into </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193442"></A>    cache and another chunk with the same hash value is already in </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193443"></A>    cache, the second chunk must be evicted first. Therefore it is </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193444"></A>    very important to make sure that the size of the hash table, also </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193445"></A>    called the nslots parameter in &lt;code&gt;H5Pset_cache&lt;/code&gt; and </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193446"></A>    &lt;code&gt;H5Pset_chunk_cache&lt;/code&gt;, is large enough to minimize the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193447"></A>    number of hash value collisions.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193448"></A>  </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193449"></A>&lt;p&gt; To determine the hash value for a chunk, the chunk is first assigned </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193450"></A>    a unique index that is the linear index into a hypothetical array of </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193451"></A>    the chunks. That is, the upper-left chunk has an index of 0, the one </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193452"></A>    to the right of that has an index of 1, and so on. This index is </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193453"></A>    then divided by the size of the hash table, nslots, and the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193454"></A>    remainder, or modulus, is the hash value. Because this scheme can </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193455"></A>    result in regularly spaced indices being used frequently, it is </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193456"></A>    important that nslots be a prime number to minimize the chance </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193457"></A>    of collisions. In general, nslots should probably be set to a </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193458"></A>    number approximately 100 times the number of chunks that can fit </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193459"></A>    in nbytes bytes, unless memory is extremely limited. There is of </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193460"></A>    course no advantage in setting nslots to a number larger than </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193461"></A>    the total number of chunks in the dataset.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193462"></A>  </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193463"></A>&lt;p&gt; The w0 parameter affects how the library decides which chunk to </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193464"></A>    evict when it needs room in the cache. If w0 is set to 0, then </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193465"></A>    the library will always evict the least recently used chunk in </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193466"></A>    cache. If w0 is set to 1, the library will always evict the least </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193467"></A>    recently used chunk which has been fully read or written, and if </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193468"></A>    none have been fully read or written, it will evict the least </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193469"></A>    recently used chunk. If w0 is between 0 and 1, the behaviour will </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193470"></A>    be a blend of the two. Therefore, if the application will access </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193471"></A>    the same data more than once, w0 should be set closer to 0, and </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193472"></A>    if the application does not, w0 should be set closer to 1.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193473"></A>  </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193474"></A>&lt;p&gt; It is important to remember that chunk caching will only give a </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193475"></A>    benefit when reading or writing the same chunk more than once. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193476"></A>    If, for example, an application is reading an entire dataset, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193477"></A>    with only whole chunks selected for each operation, then chunk </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193478"></A>    caching will not help performance, and it may be preferable to </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193479"></A>    completely disable the chunk cache in order to save memory. It </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193480"></A>    may also be advantageous to disable the chunk cache when writing </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193481"></A>    small amounts to many different chunks, if memory is not large </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193482"></A>    enough to hold all those chunks in cache at once.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193483"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193484"></A>&lt;h3&gt;11.2.5. I/O Filters and Compression&lt;/h3&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193485"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193486"></A>&lt;p&gt; Dataset chunking also enables the use of I/O filters, including </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193487"></A>    compression. The filters are applied to each chunk individually, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193488"></A>    and the entire chunk is processed at once. The filter must be </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193489"></A>    applied every time the chunk is loaded into cache, and every </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193490"></A>    time the chunk is flushed to disk. These facts all make choosing </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193491"></A>    the proper settings for the chunk cache and chunk size even </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193492"></A>    more critical for the performance of filtered datasets.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193493"></A>  </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193494"></A>&lt;p&gt; Because the entire chunk must be filtered every time disk I/O </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193495"></A>    occurs, it is no longer a viable option to disable the chunk </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193496"></A>    cache when writing small amounts of data to many different chunks. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193497"></A>    To achieve acceptable performance, it is critical to minimize the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193498"></A>    chance that a chunk will be flushed from cache before it is </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193499"></A>    completely read or written. This can be done by increasing the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193500"></A>    size of the chunk cache, adjusting the size of the chunks, or </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193501"></A>    adjusting I/O patterns.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193502"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193503"></A>&lt;h3&gt;11.2.6. Pitfalls&lt;/h3&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193504"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193505"></A>&lt;p&gt; Inappropriate chunk size and cache settings can dramatically reduce </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193506"></A>    performance. There are a number of ways this can happen. Some of </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193507"></A>    the more common issues include:</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193508"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193509"></A>&lt;ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193510"></A>    &lt;li&gt;Chunks are too small&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193511"></A>      &lt;p&gt; There is a certain amount of overhead associated with finding </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193512"></A>          chunks. When chunks are made smaller, there are more of them </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193513"></A>          in the dataset. When performing I/O on a dataset, if there </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193514"></A>          are many chunks in the selection, it will take extra time </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193515"></A>          to look up each chunk. In addition, since the chunks are </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193516"></A>          stored independently, more chunks results in more I/O </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193517"></A>          operations, further compounding the issue. The extra metadata </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193518"></A>          needed to locate the chunks also causes the file size to </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193519"></A>          increase as chunks are made smaller. Making chunks larger </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193520"></A>          results in fewer chunk lookups, smaller file size, and </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193521"></A>          fewer I/O operations in most cases.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193522"></A>    &lt;li&gt;Chunks are too large&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193523"></A>      &lt;p&gt; It may be tempting to simply set the chunk size to be the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193524"></A>          same as the dataset size in order to enable compression on </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193525"></A>          a contiguous&lt;/em&gt; dataset. However, this can have </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193526"></A>          unintended consequences. Because the entire chunk must be </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193527"></A>          read from disk and decompressed before performing any </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193528"></A>          operations, this will impose a great performance penalty </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193529"></A>          when operating on a small subset of the dataset if the cache </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193530"></A>          is not large enough to hold the one-chunk dataset. In </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193531"></A>          addition, if the dataset is large enough, since the entire </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193532"></A>          chunk must be held in memory while compressing and decompressing, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193533"></A>          the operation could cause the operating system to page memory </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193534"></A>          to disk, slowing down the entire system.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193535"></A>    &lt;li&gt;Cache is not big enough&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193536"></A>      &lt;p&gt; Similarly, if the chunk cache is not set to a large enough </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193537"></A>          size for the chunk size and access pattern, poor performance </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193538"></A>          will result. In general, the chunk cache should be large </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193539"></A>          enough to fit all of the chunks that contain part of a </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193540"></A>          hyperslab selection used to read or write. When the chunk </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193541"></A>          cache is not large enough, all of the chunks in the selection </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193542"></A>          will be read into cache and then written to disk (if writing) </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193543"></A>          and evicted. If the application then revisits the same </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193544"></A>          chunks, they will have to be read and possibly written </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193545"></A>          again, whereas if the cache were large enough they would </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193546"></A>          only have to be read (and possibly written) once. However, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193547"></A>          if selections for I/O always coincide with chunk boundaries, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193548"></A>          this does not matter as much, as there is no wasted I/O and </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193549"></A>          the application is unlikely to revisit the same chunks soon </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193550"></A>          after.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193551"></A>      &lt;p&gt; If the total size of the chunks involved in a selection is too </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193552"></A>          big to practically fit into memory, and neither the chunk nor </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193553"></A>          the selection can be resized or reshaped, it may be better to </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193554"></A>          disable the chunk cache. Whether this is better depends on the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193555"></A>          storage order of the selected elements. It will also make </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193556"></A>          little difference if the dataset is filtered, as entire chunks </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193557"></A>          must be brought into memory anyways in that case. When the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193558"></A>          chunk cache is disabled and there are no filters, all I/O is </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193559"></A>          done directly to and from the disk. If the selection is mostly </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193560"></A>          along the fastest changing dimension (i.e. rows), then the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193561"></A>          data will be more contiguous on disk, and direct I/O will be </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193562"></A>          more efficient than reading entire chunks, and hence the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193563"></A>          cache should be disabled. If however the selection is mostly </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193564"></A>          along the slowest changing dimension (columns), then the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193565"></A>          data will not be contiguous on disk, and direct I/O will </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193566"></A>          involve a large number of small operations, and it will </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193567"></A>          probably be more efficient to just operate on the entire </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193568"></A>          chunk, therefore the cache should be set large enough to </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193569"></A>          hold at least 1 chunk. To disable the chunk cache, either </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193570"></A>          nbytes or nslots should be set to 0.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193571"></A>    &lt;li&gt;Improper hash table size&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193572"></A>      &lt;p&gt; Because only one chunk can be present in each slot of the hash </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193573"></A>          table, it is possible for an improperly set hash table size </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193574"></A>          (nslots) to severely impact performance. For example, if </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193575"></A>          there are 100 columns of chunks in a dataset, and the hash </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193576"></A>          table size is set to 100, then all the chunks in each row </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193577"></A>          will have the same hash value. Attempting to access a row </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193578"></A>          of elements will result in each chunk being brought into </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193579"></A>          cache and then evicted to allow the next one to occupy its </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193580"></A>          slot in the hash table, even if the chunk cache is large </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193581"></A>          enough, in terms of nbytes, to hold all of them. Similar </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193582"></A>          situations can arise when nslots is a factor or multiple of </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193583"></A>          the number of rows of chunks, or equivalent situations in </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193584"></A>          higher dimensions.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193585"></A>      &lt;p&gt; Luckily, because each slot in the hash table only occupies </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193586"></A>          the size of the pointer for the system, usually 4 or 8 </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193587"></A>          bytes, there is little reason to keep nslots small. Again, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193588"></A>          a general rule is that nslots should be set to a prime </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193589"></A>          number at least 100 times the number of chunks that can </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193590"></A>          fit in nbytes, or simply set to the number of chunks in </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193591"></A>          the dataset.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193592"></A>    &lt;/ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193593"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193594"></A>&lt;h3&gt;11.2.7. For More Information&lt;/h3&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193595"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193596"></A>&lt;!--</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193597"></A>---------1---------2---------3---------4---------5---------6---------7---------8</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193598"></A>--&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193599"></A>&lt;!-- the pdf mentioned in the paragraph below is not available to print </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193600"></A>readers (ie, it's not on the web site)</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193601"></A>&lt;p&gt; The slide set &amp;ldquo;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193602"></A>&lt;a href=&quot;../_topic/Chunking/Chunking_Tutorial_EOS13_2009.pdf&quot;&gt;HDF5 </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193603"></A>    Advanced Topics: Chunking in HDF5&lt;/a&gt;&amp;rdquo; (PDF), a tutorial from </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193604"></A>    HDF and HDF-EOS Workshop XIII (2009) provides additional HDF5 chunking </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193605"></A>    use cases and examples.&lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193606"></A>--&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193607"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193608"></A>&lt;!-- FOR USE WITH ELECTRONIC VERSION ---------------------------------</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193609"></A>&lt;!-- 11.18.10, the paragraph below is labeled for the electronic version,</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193610"></A>but it doesn't seem to work with the electronic page. I'm keeping this </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193611"></A>paragraph commented out. --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193612"></A>&lt;p&gt; The page &amp;ldquo;&lt;a href=</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193613"></A>    &quot;http://www.hdfgroup.org/HDF5/examples/api18-c.html&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193614"></A>    HDF5 Examples by API&lt;/a&gt;&amp;rdquo; lists many code examples that are </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193615"></A>    regularly tested with the HDF5 Library.  Several illustrate the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193616"></A>    use of chunking in HDF5, particularly &amp;ldquo;Read/Write Chunked </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193617"></A>    Dataset&amp;rdquo; and any examples demonstrating filters. &lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193618"></A>&lt;!-- FOR USE WITH ELECTRONIC VERSION ---------------------------------&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193619"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193620"></A>&lt;!-- FOR USE WITH PRINT VERSION --------------------------------------&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193621"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193622"></A>&lt;p&gt; The &amp;ldquo;HDF5 Examples by API&amp;rdquo; page, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193623"></A>    &lt;code&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193624"></A>    http:/www.hdfgroup.org/ftp/HDF5/examples/examples-by-api/api18-c.html,</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193625"></A>    &lt;/code&gt; </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193626"></A>    lists many code examples that are regularly tested with the HDF5 </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193627"></A>    Library. Several illustrate the use of chunking in HDF5, particularly </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193628"></A>    &amp;ldquo;Read/Write Chunked Dataset&amp;rdquo; and any examples </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193629"></A>    demonstrating filters. &lt;/p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193630"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193631"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193632"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193633"></A>&lt;!-- FOR USE WITH PRINT VERSION --------------------------------------</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193634"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193635"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193636"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193637"></A>&lt;!-- FOR USE WITH ELECTRONIC VERSION ---------------------------------&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193638"></A>&lt;!-- 11.19.10, section 11.2.8. is labeled for the electronic version, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193639"></A>but doesn't seem to be appropriate for the page. I'm leaving it commented </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193640"></A>out. --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193641"></A>&lt;!-- </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193642"></A>&lt;h3&gt;11.2.8. Directions for Future Development&lt;/h3&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193643"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193644"></A>  As seen above, the HDF5 chunk cache currently requires careful control of the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193645"></A>  parameters in order to achieve optimal performance. In the future, we plan to </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193646"></A>  improve the chunk cache to be more foolproof in many ways, and deliver acceptable </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193647"></A>  performance in most cases even when no thought is given to the chunking parameters.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193648"></A>  &lt;p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193649"></A>  One way to make the chunk cache more user-friendly is to automatically resize the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193650"></A>  chunk cache as needed for each operation. The cache should be able to detect when </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193651"></A>  the cache should be skipped or when it needs to be enlarged based on the pattern of </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193652"></A>  I/O operations. At a minimum, it should be able to detect when the cache would </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193653"></A>  severely hurt performance for a single operation and disable the cache for that </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193654"></A>  operation. This would of course be optional.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193655"></A>  &lt;p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193656"></A>  Another way is to allow chaining of entries in the hash table. This would make the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193657"></A>  hash table size much less of an issue, as chunks could shared the same hash value </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193658"></A>  by making a linked list.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193659"></A>  &lt;p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193660"></A>  Finally, it may even be desirable to set some reasonable default chunk size based </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193661"></A>  on the dataset size and possibly some other information on the intended access </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193662"></A>  pattern. This would probably be a high-level routine.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193663"></A>  &lt;p&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193664"></A>  Other features planned for chunking include new index methods (besides b-trees), </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193665"></A>  disabling filters for chunks that are partially over the edge of a dataset, only </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193666"></A>  storing the used portions of these edge chunks, and allowing multiple reader </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193667"></A>  processes to read the same dataset as a single writer process writes to it.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193668"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193669"></A>&lt;div align=&quot;right&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193670"></A>&lt;table&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193671"></A>    &lt;tr&gt;&lt;td align=&quot;top&quot; valign=&quot;left&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193672"></A>        &lt;font size=&quot;6&quot; color=&quot;AAAAAA&quot;&gt;DRAFT&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/font&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193673"></A>    &lt;/td&gt;&lt;td align=&quot;top&quot; valign=&quot;left&quot;&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193674"></A>        &lt;i&gt;Chunking in HDF5&lt;/i&gt; is under active development. Please </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193675"></A>        send comments, suggestions, and bug reports to </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193676"></A>        fbaker-at-hdfgroup.org.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193677"></A>    &lt;/td&gt;&lt;/tr&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193678"></A>&lt;/table&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193679"></A>&lt;/div&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193680"></A>--&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193681"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193682"></A>&lt;!-- FOR USE WITH ELECTRONIC VERSION ---------------------------------&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193683"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193684"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193685"></A>&lt;!-- NEW PAGE --&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193686"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193687"></A>&lt;h2&gt;11.3. HDF5 Glossary and Terms&lt;/h2&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193688"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193689"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193690"></A>&lt;dl&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193691"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193692"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-AtomicDType&quot;&gt;atomic datatype&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193693"></A>    &lt;dd&gt;A datatype which cannot be decomposed into smaller units at the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193694"></A>       API level. &lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193695"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193696"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193697"></A>&lt;dt&gt;&lt;a name=&quot;Glossary-Attribute&quot;&gt;&lt;b&gt;attribute&lt;/b&gt;&lt;/a&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193698"></A>&lt;dd&gt;A small dataset that can be used to describe the nature and/or </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193699"></A>    the intended usage of the object it is attached to.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193700"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193701"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193702"></A>&lt;!--</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193703"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-Basic&quot;&gt;basic datatypes&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193704"></A>    &lt;ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193705"></A>        &lt;li&gt;char     - 8-bit character (only for ASCII information)&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193706"></A>        &lt;li&gt;int8     - 8-bit signed integer&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193707"></A>        &lt;li&gt;uint8    - 8-bit unsigned integer&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193708"></A>        &lt;li&gt;int16    - 16-bit signed integer&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193709"></A>        &lt;li&gt;uint16   - 16-bit unsigned integer&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193710"></A>        &lt;li&gt;int32    - 32-bit signed integer&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193711"></A>        &lt;li&gt;uint32   - 32-bit unsigned integer&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193712"></A>        &lt;li&gt;intn     - &quot;native&quot; signed integer&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193713"></A>        &lt;li&gt;uintn    - &quot;native&quot; unsigned integer&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193714"></A>        &lt;li&gt;int64    - 64-bit signed integer (new)&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193715"></A>        &lt;li&gt;uint64   - 64-bit unsigned integer (new)&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193716"></A>        &lt;li&gt;float32  - 32-bit IEEE float&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193717"></A>        &lt;li&gt;float64  - 64-bit IEEE float&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193718"></A>    &lt;/ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193719"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193720"></A>--&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193721"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193722"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-LayoutChunked&quot;&gt;chunked layout&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193723"></A>&lt;dd&gt;The storage layout of a chunked dataset.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193724"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193725"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193726"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-Chunking&quot;&gt;chunking&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193727"></A>&lt;dd&gt;A storage layout where a dataset is partitioned into fixed-size </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193728"></A>    multi-dimensional chunks.  Chunking tends to improve performance</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193729"></A>    and facilitates dataset extensibility.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193730"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193731"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193732"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-DTypeCommitted&quot;&gt;committed datatype&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193733"></A>&lt;dd&gt;A datatype that is named and stored in a file so that it can be shared. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193734"></A>    Committed datatypes can be shared. Committing is permanent; a datatype </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193735"></A>    cannot be changed after being committed. Committed datatypes used to be </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193736"></A>    called &lt;a name=&quot;Glossary-DTypeNamed&quot;&gt;named&lt;/a&gt; datatypes.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193737"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193738"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193739"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-CompoundDType&quot;&gt;compound datatype&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193740"></A>&lt;dd&gt;A collection of one or more atomic types or small arrays of such types.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193741"></A>    Similar to a struct in C or a common block in Fortran.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193742"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193743"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193744"></A>&lt;!--</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193745"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-ComplexDType&quot;&gt;complex datatype&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193746"></A>&lt;dd&gt;A collection of one or more atomic types or small arrays of such types.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193747"></A>    &lt;ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193748"></A>        &lt;li&gt;hid_t   - 32-bit unsigned integer used as ID for memory objects&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193749"></A>        &lt;li&gt;hoid_t  - 32-bit unsigned integer (currently) used as ID for </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193750"></A>            disk-based objects&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193751"></A>        &lt;li&gt;hbool_t - boolean to indicate true/false/error codes from functions&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193752"></A>        &lt;li&gt;herr_t  - 32-bit integer to indicate succeed/fail codes from </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193753"></A>            functions&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193754"></A>    &lt;/ul&gt;&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193755"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193756"></A>--&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193757"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193758"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-LayoutContig&quot;&gt;contiguous layout&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193759"></A>&lt;dd&gt;The storage layout of a dataset that is not chunked, so that the entire</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193760"></A>    data portion of the dataset is stored in a single contiguous block.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193761"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193762"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193763"></A>&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-PListDataTransfer&quot;&gt;data transfer property list&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193764"></A>&lt;dd&gt;The data transfer property list is used to control various aspects </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193765"></A>    of the I/O, such as caching hints or collective I/O information.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193766"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193767"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193768"></A>&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-Dataset&quot;&gt;dataset&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193769"></A>&lt;dd&gt;A multi-dimensional array of data elements, together with </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193770"></A>    supporting metadata. &lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193771"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193772"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193773"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193774"></A>&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-PListDSetAccess&quot;&gt;dataset access property list&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193775"></A>&lt;dd&gt;A property list containing information on how a dataset is to be accessed.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193776"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193777"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193778"></A>&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-PListDSetCreate&quot;&gt;dataset creation property list&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193779"></A>&lt;dd&gt;A property list containing information on how </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193780"></A>    raw data is organized on disk and how the raw data is compressed.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193781"></A>&lt;!--</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193782"></A>    The dataset API partitions these terms by layout, compression,</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193783"></A>    and external storage:</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193784"></A>    &lt;ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193785"></A>    &lt;b&gt; Layout:&lt;/b&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193786"></A>    &lt;ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193787"></A>    &lt;li&gt;H5D_COMPACT: Data is small and can be stored in object header (not</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193788"></A>        implemented yet).  This eliminates disk seek/read requests.&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193789"></A>    &lt;li&gt;H5D_CONTIGUOUS: (&lt;b&gt;default&lt;/b&gt;) The data is large, non-extendible, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193790"></A>        non-compressible, non-sparse, and can be stored externally.&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193791"></A>    &lt;li&gt;H5D_CHUNKED:  The data is large and can be extended in any dimension.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193792"></A>        It is partitioned into chunks so each chunk is the same logical size. &lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193793"></A>    &lt;/ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193794"></A>    &lt;b&gt;Compression:&lt;/b&gt;  (gzip compression)&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193795"></A>    &lt;b&gt;External Storage Properties:&lt;/b&gt;  The data must be contiguous to be </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193796"></A>       stored externally. It allows you to store </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193797"></A>       the data in one or more non-HDF5 files.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193798"></A>    &lt;/ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193799"></A>--&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193800"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193801"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193802"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193803"></A>&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-Dataspace&quot;&gt;dataspace&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193804"></A>&lt;dd&gt;An object that describes the dimensionality of the data array. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193805"></A>    A dataspace is either a regular N-dimensional array of data points, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193806"></A>    called a simple dataspace, or a more general collection of data points </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193807"></A>    organized in another manner, called a complex dataspace.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193808"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193809"></A>&lt;!-- NEW PAGE --&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193810"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193811"></A>&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-Datatype&quot;&gt;datatype&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193812"></A>&lt;dd&gt;An object that describes the storage format of the individual data </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193813"></A>    points of a data set.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193814"></A>    There are two categories of datatypes: atomic and compound datatypes.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193815"></A>    An atomic type is a type which cannot be decomposed into smaller </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193816"></A>    units at the API level. A compound datatype is a collection of one or </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193817"></A>    more atomic types or small arrays of such types.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193818"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193819"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193820"></A>&lt;!--</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193821"></A>&lt;dt&gt;&lt;b&gt;DDL&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193822"></A>&lt;dd&gt;A detailed description of the HDF5 format and objects, written in a </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193823"></A>    Data Description Language using Backus-Naur Form.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193824"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193825"></A>--&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193826"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193827"></A>&lt;!--</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193828"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-DiskIO&quot;&gt;disk I/O datatypes&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193829"></A>&lt;ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193830"></A>    &lt;li&gt;hoff_t  - (64-bit?) offset on disk in bytes&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193831"></A>    &lt;li&gt;hlen_t  - (64-bit?) length on disk in bytes&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193832"></A>&lt;/ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193833"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193834"></A>--&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193835"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193836"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-DTypeEnum&quot;&gt;enumeration datatype&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193837"></A>&lt;dd&gt;A one-to-one mapping between a set of symbols and a set of </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193838"></A>    integer values, and an order is imposed on the symbols by their </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193839"></A>    integer values. The symbols are passed between the application </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193840"></A>    and library as character strings and all the values for a </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193841"></A>    particular enumeration datatype are of the same integer type, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193842"></A>    which is not necessarily a native type.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193843"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193844"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193845"></A>&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-File&quot;&gt;file&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193846"></A>&lt;dd&gt;A container for storing grouped collections of </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193847"></A>    multi-dimensional arrays containing scientific data. &lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193848"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193849"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193850"></A>&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-FileAccessMode&quot;&gt;file access mode&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193851"></A>&lt;dd&gt;Determines whether an existing file will be overwritten,</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193852"></A>    opened for read-only access, or opened for read/write access.  </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193853"></A>    All newly created files are opened for both reading and</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193854"></A>    writing.  &lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193855"></A>&lt;!--</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193856"></A>    Possible values are:</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193857"></A>    &lt;PRE&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193858"></A>      H5F_ACC_RDWR:   Allow read and write access to file. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193859"></A>      H5F_ACC_RDONLY: Allow read-only access to file. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193860"></A>      H5F_ACC_TRUNC:  Truncate file, if it already exists, erasing all data </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193861"></A>                      previously stored in the file. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193862"></A>      H5F_ACC_EXCL:   Fail if file already exists. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193863"></A>      H5F_ACC_DEBUG:  Print debug information. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193864"></A>      H5P_DEFAULT:    Apply default file access and creation properties. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193865"></A>    &lt;/PRE&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193866"></A>--&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193867"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193868"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193869"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193870"></A>&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-PListFileAccess&quot;&gt;file access property list&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193871"></A>&lt;dd&gt;File access property lists are used to control different methods </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193872"></A>    of performing I/O on files.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193873"></A>&lt;!--</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193874"></A>    &lt;ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193875"></A>    &lt;b&gt;Unbuffered I/O:&lt;/b&gt; Local permanent files can be accessed with the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193876"></A>       functions described in Section 2 of the Posix manual, namely open(), </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193877"></A>       lseek(), read(), write(), and close(). &lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193878"></A>    &lt;b&gt;Buffered I/O:&lt;/b&gt; Local permanent files can be accessed with the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193879"></A>       functions declared in the stdio.h header file, namely fopen(), </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193880"></A>       fseek(), fread(), fwrite(), and fclose().&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193881"></A>    &lt;b&gt;Memory I/O:&lt;/b&gt; Local temporary files can be created and accessed </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193882"></A>       directly from memory without ever creating permanent storage. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193883"></A>       The library uses malloc() and free() to create storage space for the </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193884"></A>       file&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193885"></A>    &lt;b&gt;Parallel Files using MPI I/O:&lt;/b&gt; This driver allows parallel access </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193886"></A>       to a file through the MPI I/O library. The parameters which can be </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193887"></A>       modified are the MPI communicator, the info object, and the access mode.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193888"></A>       The communicator and info object are saved and then passed to </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193889"></A>       MPI_File_open() during file creation or open. The access_mode </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193890"></A>       controls the kind of parallel access the application intends.&lt;br /&gt; </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193891"></A>    &lt;b&gt;Data Alignment:&lt;/b&gt; Sometimes file access is faster if certain things </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193892"></A>       are aligned on file blocks. This can be controlled by setting alignment</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193893"></A>       properties of a file access property list with the H5Pset_alignment() </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193894"></A>       function. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193895"></A>    &lt;/ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193896"></A>--&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193897"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193898"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193899"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193900"></A>&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-PListFileCreate&quot;&gt;file creation property list&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193901"></A>&lt;dd&gt;The property list used to control file metadata. &lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193902"></A>&lt;!--</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193903"></A>    The parameters that can be modified are:</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193904"></A>    &lt;ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193905"></A>    &lt;b&gt;User-Block Size:&lt;/b&gt; The &quot;user-block&quot; is a fixed length block </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193906"></A>       of data located at the beginning of the file which is ignored </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193907"></A>       by the HDF5 library and may be used to store any data information </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193908"></A>       found to be useful to applications. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193909"></A>    &lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193910"></A>    &lt;b&gt;Offset and Length Sizes:&lt;/b&gt; The number of bytes used to store the</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193911"></A>       offset and length of objects in the HDF5 file can be controlled </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193912"></A>       with this parameter. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193913"></A>    &lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193914"></A>    &lt;b&gt;Symbol Table Parameters:&lt;/b&gt; The size of symbol table B-trees can </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193915"></A>       be controlled by setting the 1/2 rank and 1/2 node size </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193916"></A>       parameters of the B-tree. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193917"></A>    &lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193918"></A>    &lt;b&gt;Indexed Storage Parameters:&lt;/b&gt; The size of indexed storage </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193919"></A>       B-trees can be controlled by setting the 1/2 rank and 1/2 node </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193920"></A>       size parameters of the B-tree.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193921"></A>    &lt;/ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193922"></A>--&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193923"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193924"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193925"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193926"></A>&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-Group&quot;&gt;group&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193927"></A>&lt;dd&gt;A structure containing zero or more HDF5 objects, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193928"></A>    together with supporting metadata. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193929"></A>    The two primary HDF5 objects are datasets and groups.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193930"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193931"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193932"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-LinkHard&quot;&gt;hard link&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193933"></A>&lt;dd&gt;A direct association between a name and the object where both exist </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193934"></A>    in a single HDF5 address space.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193935"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193936"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193937"></A>&lt;!--</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193938"></A>&lt;dt&gt;&lt;b&gt;HDF5&lt;/b&gt; &lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193939"></A>&lt;dd&gt;HDF5 is an abbreviation for Hierarchical Data Format Version 5. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193940"></A>    This file format is intended to make it easy to write and read </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193941"></A>    scientific data</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193942"></A>    &lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193943"></A>    &lt;ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193944"></A>    &lt;li&gt;by including the information needed to understand the data </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193945"></A>        within the file&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193946"></A>    &lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193947"></A>    &lt;li&gt;by providing a library of C, FORTRAN, and other language </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193948"></A>        programs that reduce the work required to provide efficient </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193949"></A>        writing and reading - even with parallel IO&lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193950"></A>    &lt;/ul&gt;&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193951"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193952"></A>--&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193953"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193954"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193955"></A>&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-Hyperslab&quot;&gt;hyperslab&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193956"></A>&lt;dd&gt;A portion of a dataset. A hyperslab selection can be a </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193957"></A>    logically contiguous collection of points in a dataspace or</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193958"></A>    a regular pattern of points or blocks in a dataspace. &lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193959"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193960"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193961"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-Identifier&quot;&gt;identifier&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193962"></A>&lt;dd&gt;A unique entity provided by the HDF5 library and used to access</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193963"></A>    an HDF5 object such as a file, group, or dataset. In the past, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193964"></A>    an identifier might have been called a handle.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193965"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193966"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193967"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-Link&quot;&gt;link&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193968"></A>&lt;dd&gt;An association between a name and the object in an HDF5 file group.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193969"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193970"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193971"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-GroupMember&quot;&gt;member&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193972"></A>&lt;dd&gt;A group or dataset that is in another dataset, &lt;i&gt;dataset A&lt;/i&gt;,</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193973"></A>    is a member of &lt;i&gt;dataset A&lt;/i&gt;.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193974"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193975"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193976"></A>&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-Name&quot;&gt;name&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193977"></A>&lt;dd&gt;A slash-separated list of components that uniquely identifies an </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193978"></A>    element of an HDF5 file.  A name begins that begins with a slash </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193979"></A>    is an absolute name which is accessed beginning with the root group </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193980"></A>    of the file; all other names are relative names and the associated</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193981"></A>    objects are accessed beginning with the current or specified group.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193982"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193983"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193984"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-DTypeOpaque&quot;&gt;opaque datatype&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193985"></A>&lt;dd&gt;A mechanism for describing data which cannot be otherwise described </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193986"></A>    by HDF5. The only properties associated with opaque types are a </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193987"></A>    size in bytes and an ASCII tag.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193988"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193989"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193990"></A>&lt;!--</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193991"></A>&lt;dt&gt;&lt;b&gt;parallel I/O HDF5&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193992"></A>&lt;dd&gt;The parallel I/O version of HDF5 supports parallel file access using </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193993"></A>    MPI (Message Passing Interface).  &lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193994"></A>&lt;br /&gt; </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193995"></A>--&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193996"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193997"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-Path&quot;&gt;path&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193998"></A>&lt;dd&gt;The slash-separated list of components that forms the name </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1193999"></A>    uniquely identifying an element of an HDF5 file.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194000"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194001"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194002"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-PList&quot;&gt;property list&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194003"></A>&lt;dd&gt;A collection of name/value pairs that can be passed to other </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194004"></A>    HDF5 functions to control features that are typically unimportant </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194005"></A>    or whose default values are usually used. &lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194006"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194007"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194008"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-RootGroup&quot;&gt;root group&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194009"></A>&lt;dd&gt;The group that is the entry point to the group graph in an HDF5 file.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194010"></A>    Every HDF5 file has exactly one root group.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194011"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194012"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194013"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-Selection&quot;&gt;selection&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194014"></A>&lt;dd&gt;(1) A subset of a dataset or a dataspace, up to the entire dataset or </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194015"></A>    dataspace.</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194016"></A>    (2) The elements of an array or dataset that are marked for I/O.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194017"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194018"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194019"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-Serialization&quot;&gt;serialization&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194020"></A>&lt;dd&gt;The flattening of an N&lt;/em&gt;-dimensional data object into a </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194021"></A>    1-dimensional object so that, for example, the data object can be </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194022"></A>    transmitted over the network as a 1-dimensional bitstream.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194023"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194024"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194025"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-LinkSoft&quot;&gt;soft link&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194026"></A>&lt;dd&gt;An indirect association between a name and an object in an </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194027"></A>    HDF5 file group.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194028"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194029"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194030"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-StorageLayout&quot;&gt;storage layout&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194031"></A>&lt;dd&gt;The manner in which a dataset is stored, either contiguous or</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194032"></A>    chunked, in the HDF5 file.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194033"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194034"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194035"></A>&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-SuperBlock&quot;&gt;super block&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194036"></A>&lt;dd&gt;A block of data containing the information required to portably access </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194037"></A>    HDF5 files on multiple platforms, followed by information about the groups </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194038"></A>    and datasets in the file. </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194039"></A>    The super block contains information about the size of offsets, </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194040"></A>    lengths of objects, the number of entries in group tables,</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194041"></A>    and additional version information for the file. &lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194042"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194043"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194044"></A>&lt;!--</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194045"></A>&lt;dt&gt;&lt;b&gt;threadsafe&lt;/b&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194046"></A>&lt;dd&gt;A &quot;thread-safe&quot; version of HDF-5 (TSHDF5) is one that can be called </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194047"></A>    from any thread of a multi-threaded program. Any calls to HDF</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194048"></A>    can be made in any order, and each individual HDF call will perform </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194049"></A>    correctly. A calling program does not have to explicitly lock the HDF</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194050"></A>    library in order to do I/O. Applications programmers may assume that </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194051"></A>    the TSHDF5 guarantees the following: </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194052"></A>    &lt;ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194053"></A>        &lt;li&gt;the HDF-5 library does not create or destroy threads. &lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194054"></A>        &lt;li&gt;the HDF-5 library uses modest amounts of per-thread </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194055"></A>          private memory. &lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194056"></A>        &lt;li&gt;the HDF-5 library only locks/unlocks it's own locks (no locks </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194057"></A>          are passed in or returned from HDF), and the internal locking </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194058"></A>          is guaranteed to be deadlock free. &lt;/li&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194059"></A>    &lt;/ul&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194060"></A>    &lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194061"></A>    These properties mean that the TSHDF5 library will not interfere </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194062"></A>    with an application's use of threads. A TSHDF5 library is the same</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194063"></A>    library as regular HDF-5 library, with additional code to synchronize </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194064"></A>    access to the HDF-5 library's internal data structures. &lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194065"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194066"></A>--&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194067"></A>&lt;!-- PRINT VERSION CONTINUED --</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194068"></A>&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-DTypeVLen&quot;&gt;variable-length datatype&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194069"></A>&lt;dd&gt;A sequence of an existing datatype (atomic, variable-length (VL), </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194070"></A>    or compound) which are not fixed in length from one dataset location </P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194071"></A>    to another.&lt;/dd&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194072"></A>&lt;br /&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194073"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194074"></A>&lt;/dl&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194075"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194076"></A>&lt;!-- FOR USE WITH PRINT VERSION --------------------------------------&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194077"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194078"></A>&lt;/body&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194079"></A>&lt;/html&gt;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1194080"></A>&nbsp;</P>
<P CLASS="FM-Body">
<A NAME="50647043_pgfId-1181485"></A>&nbsp;</P>
<p><a href=”HDF5_Users_Guide.htm”>Return to main page</a> <a href=”HDF5_Users_Guide-12.htm”><img src=”Images/back.png” border=”0”></a></p></BODY>
</HTML>
