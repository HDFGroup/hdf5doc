<!DOCTYPE HTML>
<html>
<head>

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>HDF5 Datatypes</title>

 <meta content="How to fly your personal spaceship" name="search-keywords" />
 <meta name="generator" content="Adobe FrameMaker 12" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\evan\1 MEE\Working\hdf5_trunk\html\UG\FmSource\Datatypes.fm" />
 <link rel="stylesheet" href="Datatypes.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "6";
</script>
 <meta name="brsprev" value="HDF5_Users_Guide/Datasets/HDF5_Datasets.htm">
 <meta name="brsnext" value="HDF5_Users_Guide/Dataspaces/HDF5_Dataspaces_and_Partial_I_O.htm">
</head>

<body>
<script type="text/javascript" src="../../ehlpdhtm.js"></script>

 <p class="FM__Heading_Level1">6. <a name="XREF_DatatypesChapter"></a>HDF5 Datatypes</p>
 <p class="FM__Heading_Level2"><a name="TOC_6_1_Introduction_and"></a>6.1. Introduction and Definitions</p>
 <p class="FM__Body">An HDF5 dataset is an array of data elements, arranged according to the specifications of the dataspace. In general, a data element is the smallest addressable unit of storage in the HDF5 file. (Compound datatypes are the exception to this rule.) The HDF5 datatype defines the storage format for a single data element. See the figure below.</p>
 <p class="FM__Body">The model for HDF5 attributes is extremely similar to datasets: an attribute has a dataspace and a data&#173;type, as shown in the figure below. The information in this chapter applies to both datasets and attributes.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:324.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure1" x-list-start="1" align="bottom">Figure 6-1. Datatypes, dataspaces, and datasets</caption>
  <tr style=" height : 218.22pt;">
  <td style="width : 324.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig1.JPG" id="image0" src="Dtypes_fig1.JPG" style="width:100%; max-width:321px" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">Abstractly, each data element within the dataset is a sequence of bits, interpreted as a single value from a set of values (for example, a number or a character). For a given datatype, there is a standard or conven&#173;tion for representing the values as bits, and when the bits are represented in a particular storage the bits are laid out in a specific storage scheme such as 8-bit bytes with a specific ordering and alignment of bytes within the storage array.</p>
 <p class="FM__Body">HDF5 datatypes implement a flexible, extensible, and portable mechanism for specifying and discovering the storage layout of the data elements, determining how to interpret the elements (for example, as float&#173;ing point numbers), and for transferring data from different compatible layouts.</p>
 <p class="FM__Body">An HDF5 datatype describes one specific layout of bits. A dataset has a single datatype which applies to every data element. When a dataset is created, the storage datatype is defined. After the dataset or attri&#173;bute is created, the datatype cannot be changed.</p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>The datatype describes the storage layout of a single data element</p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>All elements of the dataset must have the same type</p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>The datatype of a dataset is immutable</p>
 <p class="FM__Body">When data is transferred (for example, a read or write), each end point of the transfer has a datatype, which describes the correct storage for the elements. The source and destination may have different (but compatible) layouts, in which case the data elements are automatically transformed during the transfer.</p>
 <p class="FM__Body">HDF5 datatypes describe commonly used binary formats for numbers (integers and floating point) and characters (ASCII). A given computing architecture and programming language supports certain number and character representations. For example, a computer may support 8-, 16-, 32-, and 64-bit signed inte&#173;gers, stored in memory in little-endian byte order. These would presumably correspond to the C program&#173;ming language types ‘char’, ‘short’, ‘int’, and ‘long’.</p>
 <p class="FM__Body"><a name="IX_H5T_NATIVE_INT_23"></a>When reading and writing from memory, the HDF5 Library must know the appropriate datatype that describes the architecture specific layout. The HDF5 Library provides the platform independent ‘NATIVE’ types, which are mapped to an appropriate datatype for each platform. So the type ‘<span class="FM_Code">H5T_NATIVE_INT</span>’ is an alias for the appropriate descriptor for each platform.</p>
 <p class="FM__Body">Data in memory has a datatype:</p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>The storage layout in memory is architecture-specific</p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>The HDF5 ‘NATIVE’ types are predefined aliases for the architecture-specific memory layout</p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>The memory datatype need not be the same as the stored datatype of the dataset</p>
 <p class="FM__Body">In addition to numbers and characters, an HDF5 datatype can describe more abstract classes of types including enumerations, strings, bit strings, and references (pointers to objects in the HDF5 file). HDF5 supports several classes of composite datatypes which are combinations of one or more other datatypes. In addition to the standard predefined datatypes, users can define new datatypes within the datatype classes.</p>
 <p class="FM__Body">The HDF5 datatype model is very general and flexible:</p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>For common simple purposes, only predefined types will be needed</p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Datatypes can be combined to create complex structured datatypes</p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>If needed, users can define custom atomic datatypes</p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Committed datatypes can be shared by datasets or attributes</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level2"><a name="TOC_6_2_HDF5_Datatype_Model"></a>6.2. HDF5 Datatype Model</p>
 <p class="FM__Body"><a name="IX_H5T_INTEGER_1"></a>The HDF5 Library implements an object-oriented model of datatypes. HDF5 datatypes are organized as a logical set of base types, or datatype classes. Each datatype class defines a format for representing logical values as a sequence of bits. For example the <span class="FM_Code">H5T_INTEGER</span> class is a format for representing twos com&#173;plement integers of various sizes.</p>
 <p class="FM__Body">A datatype class is defined as a set of one or more datatype properties. A datatype property is a property of the bit string. The datatype properties are defined by the logical model of the datatype class. For exam&#173;ple, the integer class (twos complement integers) has properties such as “signed or unsigned”, “length”, and “byte-order”. The float class (IEEE floating point numbers) has these properties, plus “exponent bits”, “exponent sign”, etc.</p>
 <p class="FM__Body">A datatype is derived from one datatype class: a given datatype has a specific value for the datatype prop&#173;erties defined by the class. For example, for 32-bit signed integers, stored big-endian, the HDF5 datatype is a sub-type of integer with the properties set to <span class="FM_Code">signed=1</span>, <span class="FM_Code">size=4</span>&#160;(bytes), and <span class="FM_Code">byte-order=BE</span>.</p>
 <p class="FM__Body">The HDF5 datatype API (H5T functions) provides methods to create datatypes of different datatype classes, to set the datatype properties of a new datatype, and to discover the datatype properties of an existing datatype.</p>
 <p class="FM__Body">The datatype for a dataset is stored in the HDF5 file as part of the metadata for the dataset.</p>
 <p class="FM__Body">A datatype can be shared by more than one dataset in the file if the datatype is saved to the file with a name. This shareable datatype is known as a committed datatype. In the past, this kind of datatype was called a named datatype.</p>
 <p class="FM__Body">When transferring data (for example, a read or write), the data elements of the source and destination storage must have compatible types. As a general rule, data elements with the same datatype class are compatible while elements from different datatype classes are not compatible. When transferring data of one datatype to another compatible datatype, the HDF5 Library uses the datatype properties of the source and destination to automatically transform each data element. For example, when reading from data stored as 32-bit signed integers, big-endian into 32-bit signed integers, little-endian, the HDF5 Library will automatically swap the bytes.</p>
 <p class="FM__Body"><a name="IX_H5Awrite_2"></a><a name="IX_H5Aread_4"></a><a name="IX_H5Dwrite_20"></a><a name="IX_H5Dread_18"></a>Thus, data transfer operations (<span class="FM_Code">H5Dread</span>, <span class="FM_Code">H5Dwrite</span>, <span class="FM_Code">H5Aread</span>, <span class="FM_Code">H5Awrite</span>) require a datatype for both the source and the destination.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:360.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-2. The datatype model</caption>
  <tr style=" height : 153.00pt;">
  <td style="width : 360.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig2.JPG" id="image1" src="Dtypes_fig2.JPG" style="width:100%; max-width:386px" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">The HDF5 Library defines a set of predefined datatypes, corresponding to commonly used storage for&#173;mats, such as twos complement integers, IEEE Floating point numbers, etc., 4- and 8-byte sizes, big-endian and little-endian byte orders. In addition, a user can derive types with custom values for the properties. For example, a user program may create a datatype to describe a 6-bit integer, or a 600-bit floating point number.</p>
 <p class="FM__Body">In addition to atomic datatypes, the HDF5 Library supports composite datatypes. A composite datatype is an aggregation of one or more datatypes. Each class of composite datatypes has properties that describe the organization of the composite datatype. See the figure below. Composite datatypes include:</p>
 <p class="FM__ListBullets_Level1"><a name="IX_compound_datatype_2"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Compound datatypes: structured records</p>
 <p class="FM__ListBullets_Level1"><a name="IX_array"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Array: a multidimensional array of a datatype</p>
 <p class="FM__ListBullets_Level1"><a name="IX_variable_length"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Variable-length: a one-dimensional array of a datatype</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:324.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-3. Composite datatypes</caption>
  <tr style=" height : 177.00pt;">
  <td style="width : 324.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig3.JPG" id="image2" src="Dtypes_fig3.JPG" style="width:100%; max-width:326px" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level3"><a name="TOC_6_2_1_Datatype_Classes"></a>6.2.1. Datatype Classes and Properties</p>
 <p class="FM__Body">The figure below shows the HDF5 datatype classes. Each class is defined to have a set of properties which describe the layout of the data element and the interpretation of the bits. The table below lists the prop&#173;erties for the datatype classes.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-4. Datatype classes</caption>
  <tr style=" height : 376.06pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig4.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:1.500pt; margin-bottom:0.750pt; width:100%; max-width:478px;" id="image3" src="Dtypes_fig4.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable1" x-list-start="1">Table 6-1. Datatype classes and their properties</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 72.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Class</p>
</th>
  <th style="width : 98.182pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Description</p>
</th>
  <th style="width : 130.909pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Properties</p>
</th>
  <th style="width : 130.909pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Notes</p>
</th>
</tr>
  <tr style=" height : 62.00pt;">
  <td style="width : 72.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Integer</p>
</td>
  <td style="width : 98.182pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Twos complement integers</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Size (bytes), precision (bits), offset (bits), pad, byte order, signed/unsigned</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 140.00pt;">
  <td style="width : 72.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Float</p>
</td>
  <td style="width : 98.182pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Floating Point numbers</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Size (bytes), precision (bits), offset (bits), pad, byte order, sign position, exponent position, expo&#173;nent size (bits), exponent sign, exponent bias, man&#173;tissa position, mantissa (size) bits, mantissa sign, mantissa normalization, internal padding</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">See IEEE 754 for a defini&#173;tion of these properties. These properties describe non-IEEE 754 floating point formats as well.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 72.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Character</p>
</td>
  <td style="width : 98.182pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Array of 1-byte character encoding</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Size (characters), Charac&#173;ter set, byte order, pad/no pad, pad character</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Currently, ASCII and UTF-8 are supported.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 72.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Bitfield</p>
</td>
  <td style="width : 98.182pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">String of bits</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Size (bytes), precision (bits), offset (bits), pad, byte order</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">A sequence of bit values packed into one or more bytes.</p>
</td>
</tr>
  <tr style=" height : 75.00pt;">
  <td style="width : 72.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Opaque</p>
</td>
  <td style="width : 98.182pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Uninterpreted data</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Size (bytes), precision (bits), offset (bits), pad, byte order, tag</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">A sequence of bytes, stored and retrieved as a block. The ‘tag’ is a string that can be used to label the value.</p>
</td>
</tr>
  <tr style=" height : 62.00pt;">
  <td style="width : 72.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Enumeration</p>
</td>
  <td style="width : 98.182pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">A list of discrete values, with sym&#173;bolic names in the form of strings.</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Number of elements, ele&#173;ment names, element val&#173;ues</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Enumeration is a list of pairs (name, value). The name is a string; the value is an unsigned integer.</p>
</td>
</tr>
  <tr style=" height : 62.00pt;">
  <td style="width : 72.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Reference</p>
</td>
  <td style="width : 98.182pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Reference to object or region within the HDF5 file</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">&nbsp;</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">See the Reference API, H5R</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 72.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Array</p>
</td>
  <td style="width : 98.182pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Array (1-4 dimen&#173;sions) of data ele&#173;ments</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Number of dimensions, dimension sizes, base datatype</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">The array is accessed atomically: no selection or sub-setting.</p>
</td>
</tr>
  <tr style=" height : 62.00pt;">
  <td style="width : 72.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Variable-length</p>
</td>
  <td style="width : 98.182pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">A variable-length 1-dimensional array of data ele&#173;ments</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Current size, base type</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 75.00pt;">
  <td style="width : 72.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Compound</p>
</td>
  <td style="width : 98.182pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">A Datatype of a sequence of Data&#173;types</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Number of members, member names, member types, member offset, member class, member size, byte order</p>
</td>
  <td style="width : 130.909pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level3"><a name="TOC_6_2_2_Predefined"></a>6.2.2. Predefined Datatypes</p>
 <p class="FM__Body"><a name="IX_H5Tcopy_9"></a>The HDF5 Library predefines a modest number of commonly used datatypes. These types have standard symbolic names of the form <span class="FM_Code">H5T_</span><span class="FM_CodeItalic">arch_base</span>&#160;where <span class="FM_CodeItalic">arch</span>&#160;is an architecture name and <span class="FM_CodeItalic">base</span> is a pro&#173;gramming type name (Table 2). New types can be derived from the predefined types by copying the pre&#173;defined type (see <span class="FM_Code">H5Tcopy()</span>) and then modifying the result. </p>
 <p class="FM__Body">The base name of most types consists of a letter to indicate the class (Table 3), a precision in bits, and an indication of the byte order (Table 4).</p>
 <p class="FM__Body">Table 5 shows examples of predefined datatypes. The full list can be found in the “<span class="FM_LT_LinkText"><a href="http://www.hdfgroup.org/HDF5/doc/RM/PredefDTypes.html">HDF5 Predefined Data&#173;types</a></span>” section of the <span class="FM_EI_EmphasisItalic">HDF5 Reference Manual</span>.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-2. Architectures used in predefined datatypes</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 108.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Architecture Name</p>
</th>
  <th style="width : 324.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Description</p>
</th>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCode">IEEE</p>
</td>
  <td style="width : 324.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Body">IEEE-754 standard floating point types in various byte orders.</p>
</td>
</tr>
  <tr style=" height : 51.00pt;">
  <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCode">STD</p>
</td>
  <td style="width : 324.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Body">This is an architecture that contains semi-standard datatypes like signed two’s complement integers, unsigned integers, and bitfields in various byte orders.</p>
</td>
</tr>
  <tr style=" height : 65.00pt;">
  <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCode">C</p>
  <p class="FM__BodyCode">FORTRAN</p>
</td>
  <td style="width : 324.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Body"><a name="IX_H5T_C_S1"></a>Types which are specific to the C or Fortran programming languages are defined in these architectures. For instance, <span class="FM_Code">H5T_C_S1</span>&#160;defines a base string type with null termination which can be used to derive string types of other lengths.</p>
</td>
</tr>
  <tr style=" height : 79.00pt;">
  <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCode">NATIVE</p>
</td>
  <td style="width : 324.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Body"><a name="IX_H5detect"></a>This architecture contains C-like datatypes for the machine on which the library was compiled. The types were actually defined by running the <span class="FM_Code">H5detect</span>&#160;program when the library was compiled. In order to be portable, applications should almost always use this architecture to describe things in memory.</p>
</td>
</tr>
  <tr style=" height : 37.00pt;">
  <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCode">CRAY</p>
</td>
  <td style="width : 324.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Body">Cray architectures. These are word-addressable, big-endian systems with non-IEEE floating point.</p>
</td>
</tr>
  <tr style=" height : 51.00pt;">
  <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCode">INTEL</p>
</td>
  <td style="width : 324.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Body">All Intel and compatible CPU’s including 80286, 80386, 80486, Pen&#173;tium, Pentium-Pro, and Pentium-II. These are little-endian systems with IEEE floating-point.</p>
</td>
</tr>
  <tr style=" height : 37.00pt;">
  <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCode">MIPS</p>
</td>
  <td style="width : 324.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Body">All MIPS CPU’s commonly used in SGI systems. These are big-endian systems with IEEE floating-point.</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCode">ALPHA</p>
</td>
  <td style="width : 324.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Body">All DEC Alpha CPU’s, little-endian systems with IEEE floating-point.</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:216.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-3. Base types</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 72.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">B</p>
</th>
  <th style="width : 144.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Bitfield</p>
</th>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 72.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">F</p>
</td>
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Floating point</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 72.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">I</p>
</td>
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Signed integer</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 72.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">R</p>
</td>
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">References</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 72.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">S</p>
</td>
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Character string</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 72.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">U</p>
</td>
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Unsigned integer</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:216.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-4. Byte order</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 72.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">BE</p>
</th>
  <th style="width : 144.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Big-endian</p>
</th>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 72.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">LE</p>
</td>
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Little-endian</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-5. Some predefined datatypes</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 144.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Example</p>
</th>
  <th style="width : 288.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Description</p>
</th>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_IEEE_F64LE"></a>H5T_IEEE_F64LE</p>
</td>
  <td style="width : 288.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Eight-byte, little-endian, IEEE floating-point &#160;&#160;&#160;</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_IEEE_F32BE_1"></a>H5T_IEEE_F32BE</p>
</td>
  <td style="width : 288.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Four-byte, big-endian, IEEE floating point &#160;&#160;&#160;</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_STD_I32LE"></a>H5T_STD_I32LE</p>
</td>
  <td style="width : 288.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Four-byte, little-endian, signed two’s complement integer &#160;&#160;&#160;</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_STD_U16BE"></a>H5T_STD_U16BE</p>
</td>
  <td style="width : 288.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Two-byte, big-endian, unsigned integer &#160;&#160;&#160;</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_C_S1_1"></a>H5T_C_S1</p>
</td>
  <td style="width : 288.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">One-byte, null-terminated string of eight-bit characters &#160;&#160;&#160;</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_INTEL_B64"></a>H5T_INTEL_B64</p>
</td>
  <td style="width : 288.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Eight-byte bit field on an Intel CPU &#160;&#160;&#160;</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_CRAY_F64"></a>H5T_CRAY_F64</p>
</td>
  <td style="width : 288.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Eight-byte Cray floating point &#160;&#160;&#160;</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_STD_ROBJ"></a>H5T_STD_ROBJ</p>
</td>
  <td style="width : 288.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Reference to an entire object in a file &#160;&#160;&#160;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><a name="IX_H5T_STD_I32BE"></a><a name="IX_H5T_STD_I32LE_1"></a><a name="IX_H5T_NATIVE_INT_24"></a><a name="IX_NATIVE"></a>The HDF5 Library predefines a set of <span class="FM_Code">NATIVE</span>&#160;datatypes which are similar to C type names. The native types are set to be an alias for the appropriate HDF5 datatype for each platform. For example, <span class="FM_Code">H5T_NA&#173;TIVE_INT</span>&#160;corresponds to a C <span class="FM_Code">int</span>&#160;type. On an Intel based PC, this type is the same as <span class="FM_Code">H5T_STD_I32LE</span>, while on a MIPS system this would be equivalent to <span class="FM_Code">H5T_STD_I32BE</span>. Table 6 shows examples of <span class="FM_Code">NATIVE</span>&#160;types and corresponding C types for a common 32-bit workstation.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:396.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-6. Native and 32-bit C datatypes</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 144.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Example</p>
</th>
  <th style="width : 252.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Corresponding C Type</p>
</th>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_CHAR</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">char</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_SCHAR</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">signed char</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_UCHAR</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">unsigned char</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_SHORT</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">short</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_USHORT</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">unsigned short</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_INT</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">int</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_UINT</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">unsigned</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_LONG</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">long</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_ULONG</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">unsigned long</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_LLONG</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">long long</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_ULLONG</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">unsigned long long</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_FLOAT</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">float</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_DOUBLE</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">double</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_LDOUBLE</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">long double</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_HSIZE</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">hsize_t</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_HSSIZE</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">hssize_t</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_HERR</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">herr_t</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_HBOOL</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">hbool_t</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_B8</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">8-bit unsigned integer or 8-bit buffer in memory</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_B16</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">16-bit unsigned integer or 16-bit buffer in memory</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_B32</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">32-bit unsigned integer or 32-bit buffer in memory</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_NATIVE_B64</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">64-bit unsigned integer or 64-bit buffer in memory &#160;&#160;&#160;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level2"><a name="TOC_6_3_How_Datatypes_are"></a>6.3. How Datat<a name="XREF_DtypesUsed"></a>ypes are Used</p>
 <p class="FM__Heading_Level3"><a name="TOC_6_3_1_The_Datatype"></a>6.3.1. The Datatype Object and the HDF5 Datatype API</p>
 <p class="FM__Body"><a name="IX_H5Tclose_7"></a>The HDF5 Library manages datatypes as objects. The HDF5 datatype API manipulates the datatype objects through C function calls. New datatypes can be created from scratch or copied from existing datatypes. When a datatype is no longer needed its resources should be released by calling <span class="FM_Code">H5Tclose()</span>. </p>
 <p class="FM__Body">The datatype object is used in several roles in the HDF5 data model and library. Essentially, a datatype is used whenever the format of data elements is needed. There are four major uses of datatypes in the HDF5 Library: at dataset creation, during data transfers, when discovering the contents of a file, and for specify&#173;ing user-defined datatypes. See the table below.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-7. Datatype uses</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 180.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Use</p>
</th>
  <th style="width : 252.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Description</p>
</th>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 180.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Dataset creation</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">The datatype of the data elements must be declared when the dataset is created.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 180.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Data transfer</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">The datatype (format) of the data elements must be defined for both the source and destination.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 180.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Discovery</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">The datatype of a dataset can be interrogated to retrieve a complete description of the storage layout.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 180.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Creating user-defined datatypes</p>
</td>
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Users can define their own datatypes by creating datatype objects and setting their properties. &#160;&#160;&#160;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level3"><a name="TOC_6_3_2_Dataset_Creation"></a>6.3.2. Dataset Creation</p>
 <p class="FM__Body">All the data elements of a dataset have the same datatype. When a dataset is created, the datatype for the data elements must be specified. The datatype of a dataset can never be changed. The example below shows the use of a datatype to create a dataset called “/dset”. In this example, the dataset will be stored as 32-bit signed integers in big-endian order.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample1" x-list-start="1" align="bottom">Code Example 6-1. Using a datatype to create a dataset</caption>
  <tr style=" height : 61.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">hid_t dt;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_STD_I32BE_1"></a><a name="IX_H5Tcopy_10"></a>dt = H5Tcopy(H5T_STD_I32BE);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dcreate_16"></a>dataset_id = H5Dcreate(file_id, “/dset”, dt, dataspace_id, &#160;&#160;</p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level3"><a name="TOC_6_3_3_Data_Transfer_Read"></a>6.3.3. Data Transfer (Read and Write)</p>
 <p class="FM__Body">Probably the most common use of datatypes is to write or read data from a dataset or attribute. In these operations, each data element is transferred from the source to the destination (possibly rearranging the order of the elements). Since the source and destination do not need to be identical (in other words, one is disk and the other is memory), the transfer requires both the format of the source element and the des&#173;tination element. Therefore, data transfers use two datatype objects, for the source and destination.</p>
 <p class="FM__Body">When data is written, the source is memory and the destination is disk (file). The memory datatype describes the format of the data element in the machine memory, and the file datatype describes the desired format of the data element on disk. Similarly, when reading, the source datatype describes the format of the data element on disk, and the destination datatype describes the format in memory.</p>
 <p class="FM__Body">In the most common cases, the file datatype is the datatype specified when the dataset was created, and the memory datatype should be the appropriate NATIVE type.</p>
 <p class="FM__Body"><a name="IX_H5T_INTEGER_2"></a><a name="IX_H5T_NATIVE_INT_25"></a>The examples below show samples of writing data to and reading data from a dataset. The data in mem&#173;ory is declared C type ‘int’, and the datatype <span class="FM_Code">H5T_NATIVE_INT</span>&#160;corresponds to this type. The datatype of the dataset should be of datatype class <span class="FM_Code">H5T_INTEGER</span>.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-2. Writing to a dataset</caption>
  <tr style=" height : 61.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">int &#160;dset_data[DATA_SIZE];</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5S_ALL_11"></a><a name="IX_H5T_NATIVE_INT_26"></a><a name="IX_H5Dwrite_21"></a>status = H5Dwrite(dataset_id, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, dset_data);</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-3. Reading from a dataset</caption>
  <tr style=" height : 61.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">int dset_data[DATA_SIZE];</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dread_19"></a>status = H5Dread(dataset_id, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, dset_data);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level3"><a name="TOC_6_3_4_Discovery_of_Data"></a>6.3.4. Discovery of Data Format</p>
 <p class="FM__Body">The HDF5 Library enables a program to determine the datatype class and properties for any datatype. In order to discover the storage format of data in a dataset, the datatype is obtained, and the properties are determined by queries to the datatype object. The example below shows code that analyzes the datatype for an integer and prints out a description of its storage properties (byte order, signed, size).</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-4. Discovering datatype properties</caption>
  <tr style=" height : 100.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">switch (H5Tget_class(type)) {</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_INTEGER_3"></a>case H5T_INTEGER:</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_order"></a>ord = H5Tget_order(type);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_sign"></a>sgn = H5Tget_sign(type);</p>
  <p class="FM__BodyCellCode">printf(“Integer ByteOrder= ”);</p>
  <p class="FM__BodyCellCode">switch (ord) {</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 100.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_ORDER_LE_4"></a>case H5T_ORDER_LE:</p>
  <p class="FM__BodyCellCodeIndent">printf(“LE”);</p>
  <p class="FM__BodyCellCodeIndent">break;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_ORDER_BE_1"></a>case H5T_ORDER_BE:</p>
  <p class="FM__BodyCellCodeIndent">printf(“BE”);</p>
  <p class="FM__BodyCellCodeIndent">break;</p>
  <p class="FM__BodyCellCode">}</p>
</td>
</tr>
  <tr style=" height : 126.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">printf(“ Sign= ”);</p>
  <p class="FM__BodyCellCode">switch (sgn) {</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_SGN_NONE"></a>case H5T_SGN_NONE:</p>
  <p class="FM__BodyCellCodeIndent">printf(“false”);</p>
  <p class="FM__BodyCellCodeIndent">break;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_SGN_2"></a>case H5T_SGN_2:</p>
  <p class="FM__BodyCellCodeIndent">printf(“true”);</p>
  <p class="FM__BodyCellCodeIndent">break;</p>
  <p class="FM__BodyCellCode">}</p>
</td>
</tr>
  <tr style=" height : 74.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">printf(“ Size= ”);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_size_1"></a>sz = H5Tget_size(type);</p>
  <p class="FM__BodyCellCode">printf(“%d”, sz);</p>
  <p class="FM__BodyCellCode">printf(“\n”);</p>
  <p class="FM__BodyCellCode">break;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level3"><a name="TOC_6_3_5_Creating_and_Using"></a>6.3.5. Creating and Using User-defined Datatypes</p>
 <p class="FM__Body">Most programs will primarily use the predefined datatypes described above, possibly in composite data&#173;types such as compound or array datatypes. However, the HDF5 datatype model is extremely general; a user program can define a great variety of atomic datatypes (storage layouts). In particular, the datatype properties can define signed and unsigned integers of any size and byte order, and floating point numbers with different formats, size, and byte order. The HDF5 datatype API provides methods to set these proper&#173;ties.</p>
 <p class="FM__Body">User-defined types can be used to define the layout of data in memory; examples might include to match some platform specific number format or application defined bit-field. The user-defined type can also describe data in the file such as an application-defined format. The user-defined types can be translated to and from standard types of the same class, as described above.</p>
 <p class="FM__Heading_Level2"><a name="TOC_6_4_Datatype_H5T"></a>6.4. Dataty<a name="XREF_FileFunctSums"></a>pe (H5T) Function Summaries</p>
 <p class="FM__Body">Functions that can be used with datatypes (H5T functions) and property list functions that can be used with datatypes (H5P functions) are listed below.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-bottom:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFunctionListing1" x-list-start="1">Function Listing 6-1. General datatype operations</caption>
  <tr style=" height : 36.00pt;">
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">C Function</p>
  <p class="FM__Heading_Cell">Fortran Subroutine</p>
</th>
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Purpose</p>
</th>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcreate_1"></a>H5Tcreate</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tcreate_f"></a>h5tcreate_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Creates a new datatype.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Topen"></a>H5Topen</p>
  <p class="FM__BodyCellCode"><a name="IX_h5topen_f"></a>h5topen_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Opens a committed datatype. The C function is a macro: see “<span class="FM_LT_LinkText"><a href="http://www.hdfgroup.org/HDF5/doc/RM/APICompatMacros.html">API Compatibility Macros in HDF5</a></span>.”</p>
</td>
</tr>
  <tr style=" height : 62.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcommit"></a>H5Tcommit</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tcommit_f"></a>h5tcommit_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Commits a transient datatype to a file. The datatype is now a committed datatype. The C function is a macro: see “<span class="FM_LT_LinkText"><a href="http://www.hdfgroup.org/HDF5/doc/RM/APICompatMacros.html">API Compatibility Macros in HDF5</a></span>.”</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcommit_anon"></a>H5Tcommit_anon</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tcommit_anon_f"></a>h5tcommit_anon_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Commits a transient datatype to a file. The datatype is now a committed datatype, but it is not linked into the file structure. </p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcommitted"></a>H5Tcommitted</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tcommitted_f"></a>h5tcommitted_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Determines whether a datatype is a commit&#173;ted or a transient type.</p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcopy_11"></a>H5Tcopy</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tcopy_f"></a>h5tcopy_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Copies an existing datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tequal"></a>H5Tequal</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tequal_f"></a>h5tequal_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Determines whether two datatype identifiers refer to the same datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tlock"></a>H5Tlock</p>
  <p class="FM__BodyCell">(no Fortran subroutine)</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Locks a datatype.</p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_class_1"></a>H5Tget_class</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_class_f"></a>h5tget_class_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Returns the datatype class identifier.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_create_plist"></a>H5Tget_create_plist</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_create_plist_f"></a>h5tget_create_plist_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Returns a copy of a datatype creation prop&#173;erty list. </p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_size_2"></a>H5Tget_size</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_size_f"></a>h5tget_size_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Returns the size of a datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_super"></a>H5Tget_super</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_super_f"></a>h5tget_super_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Returns the base datatype from which a data&#173;type is derived.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_native_type"></a>H5Tget_native_type</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_native_type_f"></a>h5tget_native_type_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Returns the native datatype of a specified datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tdetect_class"></a>H5Tdetect_class</p>
  <p class="FM__BodyCell">(no Fortran subroutine)</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Determines whether a datatype is of the given datatype class.</p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_order_1"></a>H5Tget_order</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_order_f"></a>h5tget_order_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Returns the byte order of a datatype.</p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_order_3"></a>H5Tset_order</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tset_order_f"></a>h5tset_order_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Sets the byte ordering of a datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tdecode"></a>H5Tdecode</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tdecode_f"></a>h5tdecode_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Decode a binary object description of data&#173;type and return a new object identifier. </p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tencode"></a>H5Tencode</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tencode_1"></a>h5tencode</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">&#160;Encode a datatype object description into a binary buffer. </p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tclose_8"></a>H5Tclose</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tclose_f"></a>h5tclose_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Releases a datatype.</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-bottom:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFunctionListing">Function Listing 6-2. Conversion functions</caption>
  <tr style=" height : 36.00pt;">
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">C Function</p>
  <p class="FM__Heading_Cell">Fortran Subroutine</p>
</th>
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell"> Purpose</p>
</th>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tconvert"></a>H5Tconvert</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tconvert_f"></a>h5tconvert_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Converts data between specified datatypes. </p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcompiler_conv"></a>H5Tcompiler_conv</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tcompiler_conv_f"></a>h5tcompiler_conv_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Check whether the library’s default conver&#173;sion is hard conversion. </p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tfind"></a>H5Tfind</p>
  <p class="FM__BodyCell">(no Fortran subroutine)</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Finds a conversion function.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tregister"></a>H5Tregister</p>
  <p class="FM__BodyCell">(no Fortran subroutine)</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Registers a conversion function.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tunregister"></a>H5Tunregister</p>
  <p class="FM__BodyCell">(no Fortran subroutine)</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Removes a conversion function from all con&#173;version paths.</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-bottom:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFunctionListing">Function Listing 6-3. Atomic datatype properties</caption>
  <tr style=" height : 36.00pt;">
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">C Function</p>
  <p class="FM__Heading_Cell">Fortran Subroutine</p>
</th>
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell"> Purpose</p>
</th>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_size_2"></a>H5Tset_size</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tset_size_f"></a>h5tset_size_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Sets the total size for an atomic datatype.</p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_precision"></a>H5Tget_precision</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_precision_f"></a>h5tget_precision_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Returns the precision of an atomic datatype.</p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_precision_2"></a>H5Tset_precision</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tset_precision_f"></a>h5tset_precision_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Sets the precision of an atomic datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_offset"></a>H5Tget_offset</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_offset_f"></a>h5tget_offset_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves the bit offset of the first significant bit.</p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_offset_2"></a>H5Tset_offset</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tset_offset_f"></a>h5tset_offset_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Sets the bit offset of the first significant bit.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_pad"></a>H5Tget_pad</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_pad_f"></a>h5tget_pad_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves the padding type of the least and most-significant bit padding.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_pad"></a>H5Tset_pad</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tset_pad_f"></a>h5tset_pad_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Sets the least and most-significant bits pad&#173;ding types.</p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_sign_1"></a>H5Tget_sign</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_sign_f"></a>h5tget_sign_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves the sign type for an integer type.</p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_sign"></a>H5Tset_sign</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tset_sign_f"></a>h5tset_sign_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Sets the sign property for an integer type.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_fields"></a>H5Tget_fields</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_fields_f"></a>h5tget_fields_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves floating point datatype bit field information. </p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_fields_1"></a>H5Tset_fields</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tset_fields_f"></a>h5tset_fields_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Sets locations and sizes of floating point bit fields.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_ebias"></a>H5Tget_ebias</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_ebias_f"></a>h5tget_ebias_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves the exponent bias of a floating-point type.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_ebias_1"></a>H5Tset_ebias</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tset_ebias_f"></a>h5tset_ebias_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Sets the exponent bias of a floating-point type.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_norm"></a>H5Tget_norm</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_norm_f"></a>h5tget_norm_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves mantissa normalization of a float&#173;ing-point datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_norm"></a>H5Tset_norm</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tset_norm_f"></a>h5tset_norm_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Sets the mantissa normalization of a floating-point datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_inpad"></a>H5Tget_inpad</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_inpad_f"></a>h5tget_inpad_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves the internal padding type for unused bits in floating-point datatypes.</p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_inpad"></a>H5Tset_inpad</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tset_inpad_f"></a>h5tset_inpad_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Fills unused internal floating point bits.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_cset"></a>H5Tget_cset</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_cset_f"></a>h5tget_cset_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves the character set type of a string datatype.</p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_cset"></a>H5Tset_cset</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tset_cset_f"></a>h5tset_cset_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Sets character set to be used.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_strpad"></a>H5Tget_strpad</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_strpad_f"></a>h5tget_strpad_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves the storage mechanism for a string datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_strpad"></a>H5Tset_strpad</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tset_strpad_f"></a>h5tset_strpad_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Defines the storage mechanism for character strings.</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-bottom:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFunctionListing">Function Listing 6-4. Enumeration datatypes</caption>
  <tr style=" height : 36.00pt;">
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">C Function</p>
  <p class="FM__Heading_Cell">Fortran Subroutine</p>
</th>
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell"> Purpose</p>
</th>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tenum_create"></a>H5Tenum_create</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tenum_create_f"></a>h5tenum_create_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Creates a new enumeration datatype.</p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tenum_insert"></a>H5Tenum_insert</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tenum_insert_f"></a>h5tenum_insert_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Inserts a new enumeration datatype member.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tenum_nameof"></a>H5Tenum_nameof</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tenum_nameof_f"></a>h5tenum_nameof_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Returns the symbol name corresponding to a specified member of an enumeration data&#173;type.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tenum_valueof"></a>H5Tenum_valueof</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tenum_valueof_f"></a>h5tenum_valueof_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Returns the value corresponding to a speci&#173;fied member of an enumeration datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_member_value"></a>H5Tget_member_value</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_member_value_f"></a>h5tget_member_value_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Returns the value of an enumeration data&#173;type member.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_nmembers"></a>H5Tget_nmembers</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_nmembers_f"></a>h5tget_nmembers_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves the number of elements in a com&#173;pound or enumeration datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_member_name"></a>H5Tget_member_name</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_member_name_f"></a>h5tget_member_name_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves the name of a compound or enu&#173;meration datatype member.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_member_index"></a>H5Tget_member_index</p>
  <p class="FM__BodyCell">(no Fortran subroutine)</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves the index of a compound or enu&#173;meration datatype member.</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-bottom:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFunctionListing">Function Listing 6-5. Compound datatype properties</caption>
  <tr style=" height : 36.00pt;">
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">C Function</p>
  <p class="FM__Heading_Cell">Fortran Subroutine</p>
</th>
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell"> Purpose</p>
</th>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_nmembers_1"></a>H5Tget_nmembers</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_nmembers_f_1"></a>h5tget_nmembers_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves the number of elements in a com&#173;pound or enumeration datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_member_class"></a>H5Tget_member_class</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_member_class_f"></a>h5tget_member_class_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Returns datatype class of compound datatype member.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_member_name_1"></a>H5Tget_member_name</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_member_name_f_1"></a>h5tget_member_name_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves the name of a compound or enu&#173;meration datatype member.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_member_index_1"></a>H5Tget_member_index</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_member_index_f"></a>h5tget_member_index_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves the index of a compound or enu&#173;meration datatype member.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_member_offset"></a>H5Tget_member_offset</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_member_offset_f"></a>h5tget_member_offset_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves the offset of a field of a compound datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_member_type"></a>H5Tget_member_type</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_member_type_f"></a>h5tget_member_type_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Returns the datatype of the specified mem&#173;ber.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tinsert_2"></a>H5Tinsert</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tinsert_f"></a>h5tinsert_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Adds a new member to a compound data&#173;type.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tpack"></a>H5Tpack</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tpack_f"></a>h5tpack_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Recursively removes padding from within a compound datatype.</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-bottom:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFunctionListing">Function Listing 6-6. Array datatypes</caption>
  <tr style=" height : 36.00pt;">
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">C Function</p>
  <p class="FM__Heading_Cell">Fortran Subroutine</p>
</th>
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell"> Purpose</p>
</th>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tarray_create"></a>H5Tarray_create</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tarray_create_f"></a>h5tarray_create_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Creates an array datatype object. The C func&#173;tion is a macro: see “<span class="FM_LT_LinkText"><a href="http://www.hdfgroup.org/HDF5/doc/RM/APICompatMacros.html">API Compatibility Macros in HDF5</a></span>.”</p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_array_ndims"></a>H5Tget_array_ndims</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_array_ndims_f"></a>h5tget_array_ndims_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Returns the rank of an array datatype.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_array_dims"></a>H5Tget_array_dims</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_array_dims_f"></a>h5tget_array_dims_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Returns sizes of array dimensions and dimen&#173;sion permutations. The C function is a macro: see “<span class="FM_LT_LinkText"><a href="http://www.hdfgroup.org/HDF5/doc/RM/APICompatMacros.html">API Compatibility Macros in HDF5</a></span>.”</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-bottom:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFunctionListing">Function Listing 6-7. Variable-length datatypes</caption>
  <tr style=" height : 36.00pt;">
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">C Function</p>
  <p class="FM__Heading_Cell">Fortran Subroutine</p>
</th>
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell"> Purpose</p>
</th>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tvlen_create"></a>H5Tvlen_create</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tvlen_create_f"></a>h5tvlen_create_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Creates a new variable-length datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tis_variable_str"></a>H5Tis_variable_str</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tis_variable_str_f"></a>h5tis_variable_str_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Determines whether datatype is a variable-length string.</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-bottom:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFunctionListing">Function Listing 6-8. Opaque datatypes</caption>
  <tr style=" height : 36.00pt;">
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">C Function</p>
  <p class="FM__Heading_Cell">Fortran Subroutine</p>
</th>
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell"> Purpose</p>
</th>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_tag"></a>H5Tset_tag</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tset_tag_f"></a>h5tset_tag_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Tags an opaque datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_tag"></a>H5Tget_tag</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_tag_f"></a>h5tget_tag_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Gets the tag associated with an opaque data&#173;type.</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-bottom:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFunctionListing">Function Listing 6-9. Conversions between datatype and text</caption>
  <tr style=" height : 36.00pt;">
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">C Function</p>
  <p class="FM__Heading_Cell">Fortran Subroutine</p>
</th>
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell"> Purpose</p>
</th>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5LTtext_to_dtype"></a>H5LTtext_to_dtype</p>
  <p class="FM__BodyCell">(no Fortran subroutine)</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Creates a datatype from a text description.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5LTdtype_to_text"></a>H5LTdtype_to_text</p>
  <p class="FM__BodyCell">(no Fortran subroutine)</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Generates a text description of a datatype.</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-bottom:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFunctionListing">Function Listing 6-10. Datatype creation property list functions (H5P)</caption>
  <tr style=" height : 36.00pt;">
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">C Function</p>
  <p class="FM__Heading_Cell">Fortran Subroutine</p>
</th>
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell"> Purpose</p>
</th>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Pset_char_encoding_3"></a>H5Pset_char_encoding</p>
  <p class="FM__BodyCellCode"><a name="IX_h5pset_char_encoding_f_2"></a>h5pset_char_encoding_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Sets the character encoding used to encode a string. Use to set ASCII or UTF-8 character encoding for object names.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Pget_char_encoding_2"></a>H5Pget_char_encoding</p>
  <p class="FM__BodyCellCode"><a name="IX_h5pget_char_encoding_f_2"></a>h5pget_char_encoding_f</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Retrieves the character encoding used to cre&#173;ate a string. </p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-bottom:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFunctionListing">Function Listing 6-11. Datatype access property list functions (H5P)</caption>
  <tr style=" height : 36.00pt;">
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">C Function</p>
  <p class="FM__Heading_Cell">Fortran Subroutine</p>
</th>
  <th style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell"> Purpose</p>
</th>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Pset_type_conv_cb_1"></a>H5Pset_type_conv_cb</p>
  <p class="FM__BodyCell">(no Fortran subroutine)</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Sets user-defined datatype conversion call&#173;back function.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Pget_type_conv_cb_1"></a>H5Pget_type_conv_cb</p>
  <p class="FM__BodyCell">(no Fortran subroutine)</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Gets user-defined datatype conversion call&#173;back function. </p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level2"><a name="TOC_6_5_Programming_Model"></a>6.5. Programm<a name="XREF_Pmodel"></a>ing Model for Datatyp<a name="XREF_ProgrammingModelForDataty"></a>es</p>
 <p class="FM__Body">The HDF5 Library implements an object-oriented model of datatypes. HDF5 datatypes are organized as a logical set of base types, or datatype classes. The HDF5 Library manages datatypes as objects. The HDF5 datatype API manipulates the datatype objects through C function calls. The figure below shows the abstract view of the datatype object. The table below shows the methods (C functions) that operate on datatype objects. New datatypes can be created from scratch or copied from existing datatypes.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:360.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-5. The datatype object</caption>
  <tr style=" height : 101.59pt;">
  <td style="width : 360.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig5.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:1.500pt; margin-bottom:0.750pt; width:100%; max-width:403px;" id="image4" src="Dtypes_fig5.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-8. General operations on datatype objects</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 232.615pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">API Function</p>
</th>
  <th style="width : 199.385pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Description</p>
</th>
</tr>
  <tr style=" height : 120.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcreate_2"></a>hid_t H5Tcreate (H5T_class_t <span class="FM_CodeItalic">class</span>, size_t <span class="FM_CodeItalic">size</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Create a new datatype object of datatype class <span class="FM_CodeItalic">class</span>. The following datatype classes are supported with this function: </p>
  <p class="FM__ListBullets_Level1" style="font-family : Courier New; font-size  : 10.0pt;"><a name="IX_H5T_COMPOUND_2"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_COMPOUND</span></p>
  <p class="FM__ListBullets_Level1" style="font-family : Courier New; font-size  : 10.0pt;"><a name="IX_H5T_OPAQUE"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_OPAQUE</span></p>
  <p class="FM__ListBullets_Level1" style="font-family : Courier New; font-size  : 10.0pt;"><a name="IX_H5T_ENUM"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_ENUM</span></p>
  <p class="FM__BodyCell"><a name="IX_H5Tcopy_12"></a>Other datatypes are created with <span class="FM_Code">H5Tcopy()</span>.</p>
</td>
</tr>
  <tr style=" height : 75.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcopy_13"></a>hid_t H5Tcopy (hid_t <span class="FM_CodeItalic">type</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Obtain a modifiable transient datatype which is a copy of <span class="FM_CodeItalic">type</span>. If <span class="FM_CodeItalic">type</span> is a data&#173;set identifier then the type returned is a modifiable transient copy of the datatype of the specified dataset.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Topen_1"></a>hid_t H5Topen (hid_t <span class="FM_CodeItalic">location</span>, const char *<span class="FM_CodeItalic">name</span>, H5P_DEFAULT)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Open a committed datatype. The commit&#173;ted datatype returned by this function is read-only.</p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tequal_1"></a>htri_t H5Tequal (hid_t <span class="FM_CodeItalic">type1</span>, hid_t <span class="FM_CodeItalic">type2</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Determines if two types are equal. </p>
</td>
</tr>
  <tr style=" height : 75.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tclose_9"></a>herr_t H5Tclose (hid_t <span class="FM_CodeItalic">type</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5Tcreate_3"></a><a name="IX_H5Topen_2"></a><a name="IX_H5Tcopy_14"></a>Releases resources associated with a data&#173;type obtained from <span class="FM_Code">H5Tcopy</span>, <span class="FM_Code">H5Topen</span>, or <span class="FM_Code">H5Tcreate</span>. It is illegal to close an immutable transient datatype (for exam&#173;ple, predefined types).</p>
</td>
</tr>
  <tr style=" height : 62.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcommit_1"></a>herr_t H5Tcommit (hid_t <span class="FM_CodeItalic">location</span>, const char *<span class="FM_CodeItalic">name</span>, hid_t <span class="FM_CodeItalic">type</span>, H5P_DE&#173;FAULT, H5P_DEFAULT, H5P_DEFAULT)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Commit a transient datatype (not immutable) to a file to become a commit&#173;ted datatype. Committed datatypes can be shared.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcommitted_1"></a>htri_t H5Tcommitted (hid_t <span class="FM_CodeItalic">type</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Test whether the datatype is transient or committed (named).</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tlock_1"></a>herr_t H5Tlock (hid_t <span class="FM_CodeItalic">type</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Make a transient datatype immutable (read-only and not closable). Predefined types are locked.</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><a name="IX_H5Tclose_10"></a><a name="IX_H5Tget_super_1"></a><a name="IX_H5Tget_member_type_1"></a><a name="IX_H5Aget_type"></a><a name="IX_H5Dget_type_3"></a><a name="IX_H5Topen_3"></a><a name="IX_H5Tcopy_15"></a><a name="IX_H5Tcreate_4"></a>In order to use a datatype, the object must be created (<span class="FM_Code">H5Tcreate</span>), or a reference obtained by cloning from an existing type (<span class="FM_Code">H5Tcopy</span>), or opened (<span class="FM_Code">H5Topen</span>). In addition, a reference to the datatype of a data&#173;set or attribute can be obtained with <span class="FM_Code">H5Dget_type</span>&#160;or <span class="FM_Code">H5Aget_type</span>. For composite datatypes a refer&#173;ence to the datatype for members or base types can be obtained (<span class="FM_Code">H5Tget_member_type</span>, <span class="FM_Code">H5Tget_super</span>). When the datatype object is no longer needed, the reference is discarded with <span class="FM_Code">H5Tclose</span>. </p>
 <p class="FM__Body"><a name="IX_H5Tequal_2"></a>Two datatype objects can be tested to see if they are the same with <span class="FM_Code">H5Tequal</span>. This function returns true if the two datatype references refer to the same datatype object. However, if two datatype objects define equivalent datatypes (the same datatype class and datatype properties), they will not be considered ‘equal’.</p>
 <p class="FM__Body"><a name="IX_H5Tcommit_2"></a>A datatype can be written to the file as a first class object (<span class="FM_Code">H5Tcommit</span>). This is a committed datatype and can be used in the same way as any other datatype.</p>
 <p class="FM__Heading_Level3"><a name="TOC_6_5_1_Discovery_of"></a>6.5.1. Discovery of Datatype Properties</p>
 <p class="FM__Body">Any HDF5 datatype object can be queried to discover all of its datatype properties. For each datatype class, there are a set of API functions to retrieve the datatype properties for this class. </p>
 <p class="FM__Heading_Level4">6.5.1.1. Properties of Atomic Datatypes</p>
 <p class="FM__Body">Table 9 lists the functions to discover the properties of atomic datatypes. Table 10 lists the queries rele&#173;vant to specific numeric types. Table 11 gives the properties for atomic string datatype, and Table 12 gives the property of the opaque datatype.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-9. Functions to discover properties of atomic datatypes</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 232.615pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Functions</p>
</th>
  <th style="width : 199.385pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Description</p>
</th>
</tr>
  <tr style=" height : 75.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_class_t H5Tget_class (hid_t <span class="FM_CodeItalic">type</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5T_ARRAY"></a><a name="IX_H5T_VLEN"></a><a name="IX_H5T_ENUM_1"></a><a name="IX_H5T_REFERENCE"></a><a name="IX_H5T_COMPOUND_3"></a><a name="IX_H5T_OPAQUE_1"></a><a name="IX_H5T_BITFIELD"></a><a name="IX_H5T_STRING"></a><a name="IX_H5T_FLOAT"></a><a name="IX_H5T_INTEGER_4"></a>The datatype class: <span class="FM_Code">H5T_INTEGER</span>, <span class="FM_Code">H5T_FLOAT</span>, <span class="FM_Code">H5T_STRING</span>, <span class="FM_Code">H5T_BIT&#173;FIELD</span>, <span class="FM_Code">H5T_OPAQUE</span>, <span class="FM_Code">H5T_COMPOUND</span>, <span class="FM_Code">H5T_REFERENCE</span>, <span class="FM_Code">H5T_ENUM</span>, <span class="FM_Code">H5T_VLEN</span>, <span class="FM_Code">H5T_ARRAY</span></p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">size_t H5Tget_size (hid_t <span class="FM_CodeItalic">type</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">The total size of the element in bytes, including padding which may appear on either side of the actual value.</p>
</td>
</tr>
  <tr style=" height : 114.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">H5T_order_t H5Tget_order (hid_t <span class="FM_CodeItalic">type</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5T_ORDER_BE_2"></a><a name="IX_big_endian"></a><a name="IX_H5T_ORDER_LE_5"></a><a name="IX_little_endian"></a>The byte order describes how the bytes of the datatype are laid out in memory. If the lowest memory address contains the least significant byte of the datum then it is said to be <span class="FM_EI_EmphasisItalic">little-endian</span>&#160;or <span class="FM_Code">H5T_ORDER_LE</span>. If the bytes are in the opposite order then they are said to be <span class="FM_EI_EmphasisItalic">big-endian</span>&#160;or <span class="FM_Code">H5T_ORDER_BE</span>.</p>
</td>
</tr>
  <tr style=" height : 114.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">size_t H5Tget_precision (hid_t <span class="FM_CodeItalic">type</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">The <span class="FM_Code">precision</span>&#160;property identifies the number of significant bits of a datatype and the <span class="FM_Code">offset</span>&#160;property (defined below) identifies its location. Some datatypes occupy more bytes than what is needed to store the value. For instance, a <span class="FM_Code">short</span>&#160;on a Cray is 32 significant bits in an eight-byte field.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">int H5Tget_offset (hid_t <span class="FM_CodeItalic">type</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">The <span class="FM_Code">offset</span> property defines the bit loca&#173;tion of the least significant bit of a bit field whose length is <span class="FM_Code">precision</span>.</p>
</td>
</tr>
  <tr style=" height : 114.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">herr_t H5Tget_pad (hid_t <span class="FM_CodeItalic">type</span>, H5T_pad_t *<span class="FM_EI_EmphasisItalic">lsb</span>, H5T_pad_t *<span class="FM_EI_EmphasisItalic">msb</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5T_PAD_ONE"></a><a name="IX_H5T_PAD_ZERO"></a>Padding is the bits of a data element which are not significant as defined by the <span class="FM_Code">precision</span>&#160;and <span class="FM_Code">offset</span> properties. Pad&#173;ding in the low-numbered bits is <span class="FM_EI_EmphasisItalic">lsb</span> pad&#173;ding and padding in the high-numbered bits is <span class="FM_EI_EmphasisItalic">msb</span>&#160;padding. Padding bits can be set to zero (<span class="FM_Code">H5T_PAD_ZERO</span>) or one (<span class="FM_Code">H5T_PAD_ONE</span>). </p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-10. Functions to discover properties of atomic numeric datatypes</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 232.615pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Functions</p>
</th>
  <th style="width : 199.385pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Description</p>
</th>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_sign_2"></a>H5T_sign_t H5Tget_sign (hid_t <span class="FM_CodeItalic">type</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5T_SGN_NONE_1"></a><a name="IX_H5T_SGN_2_1"></a><span class="FM_EH_EmphasisHeavy">(INTEGER)</span>&#160;Integer data can be signed two’s complement (<span class="FM_Code">H5T_SGN_2</span>) or unsigned (<span class="FM_Code">H5T_SGN_NONE</span>).</p>
</td>
</tr>
  <tr style=" height : 114.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_fields_1"></a>herr_t H5Tget_fields (hid_t <span class="FM_CodeItalic">type</span>, size_t *<span class="FM_CodeItalic">spos</span>, size_t *<span class="FM_CodeItalic">epos</span>, size_t *<span class="FM_CodeItalic">esize</span>, size_t *<span class="FM_CodeItalic">mpos</span>, size_t *<span class="FM_CodeItalic">msize</span>) </p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(FLOAT)</span>&#160;A floating-point data element has bit fields which are the exponent and mantissa as well as a mantissa sign bit. These properties define the location (bit position of least significant bit of the field) and size (in bits) of each field. The sign bit is always of length one and none of the fields are allowed to overlap.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_ebias_1"></a>size_t H5Tget_ebias (hid_t <span class="FM_CodeItalic">type</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(FLOAT)</span> The exponent is stored as a non-negative value which is <span class="FM_Code">ebias</span>&#160;larger than the true exponent.</p>
</td>
</tr>
  <tr style=" height : 269.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_norm_1"></a>H5T_norm_t H5Tget_norm (hid_t <span class="FM_CodeItalic">type</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(FLOAT)</span> This property describes the nor&#173;malization method of the mantissa. </p>
  <p class="FM__ListBullets_Level1"><a name="IX_H5T_NORM_MSBSET"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_NORM_MSBSET</span>: the mantissa is shifted left (if non-zero) until the first bit after the radix point is set and the exponent is adjusted accordingly. All bits of the man&#173;tissa after the radix point are stored. </p>
  <p class="FM__ListBullets_Level1"><a name="IX_H5T_NORM_IMPLIED"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_NORM_IMPLIED</span>: the man&#173;tissa is shifted left \ (if non-zero) until the first bit after the radix point is set and the exponent is adjusted accordingly. The first bit after the radix point is not stored since it’s always set. </p>
  <p class="FM__ListBullets_Level1"><a name="IX_H5T_NORM_NONE"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_NORM_NONE</span>: the fractional part of the mantissa is stored without normalizing it. </p>
</td>
</tr>
  <tr style=" height : 114.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_inpad_1"></a>H5T_pad_t H5Tget_inpad (hid_t <span class="FM_CodeItalic">type</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5T_PAD_ONE_1"></a><a name="IX_H5T_PAD_ZERO_1"></a><a name="IX_H5T_PAD_NONE"></a><span class="FM_EH_EmphasisHeavy">(FLOAT)</span>&#160;If any internal bits (that is, bits between the sign bit, the mantissa field, and the exponent field but within the pre&#173;cision field) are unused, then they will be filled according to the value of this prop&#173;erty. The padding can be: <span class="FM_Code">H5T_PAD_&#173;NONE</span>, <span class="FM_Code">H5T_PAD_ZERO,</span>&#160;or <span class="FM_Code">H5T_PAD_ONE</span>. &#160;&#160;&#160;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-11. Functions to discover properties of atomic string datatypes</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 232.615pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Functions</p>
</th>
  <th style="width : 199.385pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Description</p>
</th>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_cset_1"></a>H5T_cset_t H5Tget_cset (hid_t <span class="FM_CodeItalic">type</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5T_CSET_UTF8"></a><a name="IX_H5T_CSET_ASCII"></a>Two character sets are currently sup&#173;ported: ASCII (<span class="FM_Code">H5T_CSET_ASCII</span>) and UTF-8 (<span class="FM_Code">H5T_CSET_UTF8</span>). </p>
</td>
</tr>
  <tr style=" height : 101.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_strpad_1"></a>H5T_str_t H5Tget_strpad (hid_t <span class="FM_CodeItalic">type</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5T_STR_SPACEPAD"></a><a name="IX_H5T_STR_NULLPAD"></a><a name="IX_H5T_STR_NULLTERM"></a>The string datatype has a fixed length, but the string may be shorter than the length. This property defines the storage mecha&#173;nism for the left over bytes. The options are: <span class="FM_Code">H5T_STR_NULLTERM</span>, <span class="FM_Code">H5T_STR_NULLPAD</span>, or <span class="FM_Code">H5T_STR_SPACEPAD</span>. </p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-12. Functions to discover properties of atomic opaque datatypes</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 232.615pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Functions</p>
</th>
  <th style="width : 199.385pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Description</p>
</th>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_tag_1"></a>char *H5Tget_tag(hid_t type_id)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">A user-defined string. &#160;&#160;&#160;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level4">6.5.1.2. Properties of Composite Datatypes</p>
 <p class="FM__Body">The composite datatype classes can also be analyzed to discover their datatype properties and the data&#173;types that are members or base types of the composite datatype. The member or base type can, in turn, be analyzed. The table below lists the functions that can access the datatype properties of the different composite datatypes.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-13. Functions to discover properties of composite datatypes</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 232.615pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Functions</p>
</th>
  <th style="width : 199.385pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Description</p>
</th>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_nmembers_2"></a>int H5Tget_nmembers(hid_t type_id)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(COMPOUND)</span>&#160;The number of fields in the compound datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_member_class_1"></a>H5T_class_t H5Tget_member_class (hid_t cdtype_id, unsigned member_no)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(COMPOUND)</span> The datatype class of com&#173;pound datatype member <span class="FM_Code">member_no</span>.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_member_name_2"></a>char * H5Tget_member_name (hid_t type_id, unsigned field_idx)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(COMPOUND)</span>&#160;The name of field <span class="FM_Code">field_idx</span> of a compound datatype.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_member_offset_1"></a>size_t H5Tget_member_offset (hid_t type_id, unsigned memb_no)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(COMPOUND)</span>&#160;The byte offset of the beginning of a field within a compound datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_member_type_2"></a>hid_t H5Tget_member_type (hid_t type_id, unsigned field_idx)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(COMPOUND)</span> The datatype of the speci&#173;fied member.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_array_ndims_1"></a>int H5Tget_array_ndims (hid_t adtype_id)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(ARRAY)</span>&#160;The number of dimensions (rank) of the array datatype object.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_array_dims_1"></a>int H5Tget_array_dims (hid_t adtype_id, hsize_t *dims[])</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(ARRAY)</span>&#160;The sizes of the dimensions and the dimension permutations of the array datatype object.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_super_2"></a>hid_t H5Tget_super(hid_t type) </p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(ARRAY, VL, ENUM)</span>&#160;The base datatype from which the datatype type is derived.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tenum_nameof_1"></a>herr_t H5Tenum_nameof(hid_t type void *value, char *name, size_t size)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(ENUM)</span> The symbol name that corre&#173;sponds to the specified value of the enu&#173;meration datatype.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tenum_valueof_1"></a>herr_t H5Tenum_valueof(hid_t type char *name, void *value)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(ENUM)</span>&#160;The value that corresponds to the specified name of the enumeration datatype.</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_member_value_1"></a>herr_t H5Tget_member_value (hid_t type unsigned memb_no, void *value)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(ENUM)</span>&#160;The value of the enumeration datatype member <span class="FM_Code">memb_no</span>.</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level3"><a name="TOC_6_5_2_Definition_of"></a>6.5.2. Definition of Datatyp<a name="XREF_DefinitionOfDatatypes"></a>es</p>
 <p class="FM__Body">The HDF5 Library enables user programs to create and modify datatypes. The essential steps are: </p>
 <p class="FM__ListNumbered1_Level1">1.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Create a new datatype object of a specific composite datatype class, or copy an existing atomic datatype object</p>
 <p class="FM__ListNumbered_Level1">2.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Set properties of the datatype object</p>
 <p class="FM__ListNumbered_Level1">3.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Use the datatype object</p>
 <p class="FM__ListNumbered_Level1">4.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Close the datatype object</p>
 <p class="FM__Body"><a name="IX_H5Tcopy_16"></a>To create a user-defined atomic datatype, the procedure is to clone a predefined datatype of the appropri&#173;ate datatype class (<span class="FM_Code">H5Tcopy</span>), and then set the datatype properties appropriate to the datatype class. The table below shows how to create a datatype to describe a 1024-bit unsigned integer.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-5. Create a new datatype</caption>
  <tr style=" height : 48.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_NATIVE_INT_27"></a><a name="IX_H5Tcopy_17"></a>hid_t new_type = H5Tcopy (H5T_NATIVE_INT);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_precision_3"></a>H5Tset_precision(new_type, 1024);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_SGN_NONE_2"></a><a name="IX_H5Tset_sign_1"></a>H5Tset_sign(new_type, H5T_SGN_NONE);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">Composite datatypes are created with a specific API call for each datatype class. The table below shows the creation method for each datatype class. A newly created datatype cannot be used until the datatype properties are set. For example, a newly created compound datatype has no members and cannot be used.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:288.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-14. Functions to create each datatype class</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 144.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Datatype Class</p>
</th>
  <th style="width : 144.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Function to Create</p>
</th>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">COMPOUND</p>
</td>
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcreate_5"></a>H5Tcreate</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">OPAQUE</p>
</td>
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcreate_6"></a>H5Tcreate</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">ENUM</p>
</td>
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tenum_create_1"></a>H5Tenum_create</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">ARRAY</p>
</td>
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tarray_create_1"></a>H5Tarray_create</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">VL</p>
</td>
  <td style="width : 144.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tvlen_create_1"></a>H5Tvlen_create &#160;&#160;&#160;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">Once the datatype is created and the datatype properties set, the datatype object can be used. </p>
 <p class="FM__Body"><a name="IX_H5Tlock_3"></a><a name="IX_H5Tlock_2"></a>Predefined datatypes are defined by the library during initialization using the same mechanisms as described here. Each predefined datatype is locked (<span class="FM_Code">H5Tlock</span>), so that it cannot be changed or destroyed. User-defined datatypes may also be locked using <span class="FM_Code">H5Tlock</span>. </p>
 <p class="FM__Heading_Level4">6.5.2.1. User-defined Atomic Datatypes</p>
 <p class="FM__Body">Table 15 summarizes the API methods that set properties of atomic types. Table 16 shows properties spe&#173;cific to numeric types, Table 17 shows properties specific to the string datatype class. Note that offset, pad, etc. do not apply to strings. Table 18 shows the specific property of the OPAQUE datatype class.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-15. API methods that set properties of atomic datatypes</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 232.615pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Functions</p>
</th>
  <th style="width : 199.385pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Description</p>
</th>
</tr>
  <tr style=" height : 205.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_size_3"></a>herr_t H5Tset_size (hid_t <span class="FM_CodeItalic">type</span>, size_t <span class="FM_CodeItalic">size</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5T_FLOAT_1"></a>Set the total size of the element in bytes. This includes padding which may appear on either side of the actual value. If this property is reset to a smaller value which would cause the significant part of the data to extend beyond the edge of the datatype, then the offset property is dec&#173;remented a bit at a time. If the offset reaches zero and the significant part of the data still extends beyond the edge of the datatype then the precision property is decremented a bit at a time. Decreasing the size of a datatype may fail if the <span class="FM_Code">H5T_FLOAT</span>&#160;bit fields would extend beyond the significant part of the type.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_order_4"></a>herr_t H5Tset_order (hid_t <span class="FM_CodeItalic">type</span>, H5T_order_t <span class="FM_CodeItalic">order</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5T_ORDER_BE_3"></a><a name="IX_H5T_ORDER_LE_6"></a>Set the byte order to little-endian (<span class="FM_Code">H5T_ORDER_LE</span>) or big-endian (<span class="FM_Code">H5T_ORDER_BE</span>).</p>
</td>
</tr>
  <tr style=" height : 244.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_precision_4"></a>herr_t H5Tset_precision (hid_t <span class="FM_CodeItalic">type</span>, size_t <span class="FM_CodeItalic">precision</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5T_FLOAT_2"></a>Set the number of significant bits of a datatype. The <span class="FM_Code">offset</span>&#160;property (defined below) identifies its location. The size property defined above represents the entire size (in bytes) of the datatype. If the precision is decreased then padding bits are inserted on the MSB side of the signif&#173;icant bits (this will fail for <span class="FM_Code">H5T_FLOAT</span>&#160;types if it results in the sign, mantissa, or exponent bit field extending beyond the edge of the significant bit field). On the other hand, if the precision is increased so that it “hangs over” the edge of the total size then the offset property is decre&#173;mented a bit at a time. If the offset reaches zero and the significant bits still hang over the edge, then the total size is increased a byte at a time. </p>
</td>
</tr>
  <tr style=" height : 205.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_offset_3"></a>herr_t H5Tset_offset (hid_t <span class="FM_CodeItalic">type</span>, size_t <span class="FM_CodeItalic">offset</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Set the bit location of the least significant bit of a bit field whose length is <span class="FM_Code">preci&#173;sion</span>. The bits of the entire data are num&#173;bered beginning at zero at the least significant bit of the least significant byte (the byte at the lowest memory address for a little-endian type or the byte at the highest address for a big-endian type). The offset property defines the bit loca&#173;tion of the least significant bit of a bit field whose length is precision. If the offset is increased so the significant bits “hang over” the edge of the datum, then the size property is automatically incre&#173;mented.</p>
</td>
</tr>
  <tr style=" height : 114.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_pad_1"></a>herr_t H5Tset_pad (hid_t <span class="FM_CodeItalic">type</span>, H5T_pad_t <span class="FM_CodeItalic">lsb</span>, H5T_pad_t <span class="FM_CodeItalic">msb</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5T_PAD_ONE_2"></a><a name="IX_H5T_PAD_ZERO_2"></a>Set the padding to zeros (<span class="FM_Code">H5T_PAD_ZERO</span>) or ones (<span class="FM_Code">H5T_PAD_ONE</span>). Padding is the bits of a data element which are not sig&#173;nificant as defined by the <span class="FM_Code">precision</span>&#160;and <span class="FM_Code">offset</span> properties. Padding in the low-numbered bits is <span class="FM_CodeItalic">lsb</span> padding and pad&#173;ding in the high-numbered bits is <span class="FM_CodeItalic">msb</span>&#160;padding. &#160;&#160;&#160;&#160;</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-16. API methods that set properties of numeric datatypes</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 232.615pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Functions</p>
</th>
  <th style="width : 199.385pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Description</p>
</th>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_sign_2"></a>herr_t H5Tset_sign (hid_t <span class="FM_CodeItalic">type</span>, H5T_sign_t <span class="FM_CodeItalic">sign</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5T_SGN_NONE_3"></a><a name="IX_H5T_SGN_2_2"></a><span class="FM_EH_EmphasisHeavy">(INTEGER)</span>&#160;Integer data can be signed two’s complement (<span class="FM_Code">H5T_SGN_2</span>) or unsigned (<span class="FM_Code">H5T_SGN_NONE</span>).</p>
</td>
</tr>
  <tr style=" height : 88.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_fields_2"></a>herr_t H5Tset_fields (hid_t <span class="FM_CodeItalic">type</span>, size_t <span class="FM_CodeItalic">spos</span>, size_t <span class="FM_CodeItalic">epos</span>, size_t <span class="FM_CodeItalic">esize</span>, size_t <span class="FM_CodeItalic">mpos</span>, size_t <span class="FM_CodeItalic">msize</span>) </p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(FLOAT)</span>&#160;Set the properties define the location (bit position of least significant bit of the field) and size (in bits) of each field. The sign bit is always of length one and none of the fields are allowed to overlap.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_ebias_2"></a>herr_t H5Tset_ebias (hid_t <span class="FM_CodeItalic">type</span>, size_t <span class="FM_CodeItalic">ebias</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(FLOAT)</span> The exponent is stored as a non-negative value which is <span class="FM_Code">ebias</span>&#160;larger than the true exponent.</p>
</td>
</tr>
  <tr style=" height : 269.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_norm_1"></a>herr_t H5Tset_norm (hid_t <span class="FM_CodeItalic">type</span>, H5T_norm_t <span class="FM_CodeItalic">norm</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><span class="FM_EH_EmphasisHeavy">(FLOAT)</span> This property describes the nor&#173;malization method of the mantissa. </p>
  <p class="FM__ListBullets_Level1"><a name="IX_H5T_NORM_MSBSET_1"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_NORM_MSBSET</span>: the mantissa is shifted left (if non-zero) until the first bit after the radix point is set and the exponent is adjusted accordingly. All bits of the man&#173;tissa after the radix point are stored. </p>
  <p class="FM__ListBullets_Level1"><a name="IX_H5T_NORM_IMPLIED_1"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_NORM_IMPLIED</span>: the man&#173;tissa is shifted left (if non-zero) until the first bit after the radix point is set and the exponent is adjusted accordingly. The first bit after the radix point is not stored since it is always set. </p>
  <p class="FM__ListBullets_Level1"><a name="IX_H5T_NORM_NONE_1"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_NORM_NONE</span>: the fractional part of the mantissa is stored without normalizing it. </p>
</td>
</tr>
  <tr style=" height : 101.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_inpad_1"></a>herr_t H5Tset_inpad (hid_t <span class="FM_CodeItalic">type</span>, H5T_pad_t <span class="FM_CodeItalic">inpad</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5T_PAD_ONE_3"></a><a name="IX_H5T_PAD_ZERO_3"></a><a name="IX_H5T_PAD_NONE_1"></a><span class="FM_EH_EmphasisHeavy">(FLOAT)</span>&#160;If any internal bits (that is, bits between the sign bit, the mantissa field, and the exponent field but within the pre&#173;cision field) are unused, then they will be filled according to the value of this prop&#173;erty. The padding can be: <span class="FM_Code">H5T_PAD_&#173;NONE</span>, <span class="FM_Code">H5T_PAD_ZERO</span>&#160;or <span class="FM_Code">H5T_PAD_ONE</span>. &#160;&#160;&#160;</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-17. API methods that set properties of string datatypes</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 232.615pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Functions</p>
</th>
  <th style="width : 199.385pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Description</p>
</th>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">herr_t H5Tset_size (hid_t <span class="FM_CodeItalic">type</span>, size_t <span class="FM_CodeItalic">size</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Set the length of the string, in bytes. The precision is automatically set to 8*<span class="FM_Code">size</span>.</p>
</td>
</tr>
  <tr style=" height : 35.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">herr_t H5Tset_precision (hid_t <span class="FM_CodeItalic">type</span>, size_t <span class="FM_CodeItalic">precision</span>)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">The precision must be a multiple of 8.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">herr_t H5Tset_cset (hid_t type_id, H5T_cset_t cset)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5T_CSET_UTF8_1"></a><a name="IX_H5T_CSET_ASCII_1"></a>Two character sets are currently sup&#173;ported: ASCII (<span class="FM_Code">H5T_CSET_ASCII</span>) and UTF-8 (<span class="FM_Code">H5T_CSET_UTF8</span>).</p>
</td>
</tr>
  <tr style=" height : 251.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">herr_t H5Tset_strpad (hid_t type_id, H5T_str_t strpad)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">The string datatype has a fixed length, but the string may be shorter than the length. This property defines the storage mecha&#173;nism for the left over bytes. The method used to store character strings differs with the programming language: </p>
  <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>C usually null terminates strings</p>
  <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Fortran left-justifies and space-pads strings</p>
  <p class="FM__BodyCell">Valid string padding values, as passed in the parameter strpad, are as follows: </p>
  <p class="FM__ListBullets_Level1"><a name="IX_H5T_STR_NULLTERM_1"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_STR_NULLTERM</span>: Null termi&#173;nate (as C does)</p>
  <p class="FM__ListBullets_Level1"><a name="IX_H5T_STR_NULLPAD_1"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_STR_NULLPAD</span>: Pad with zeros</p>
  <p class="FM__ListBullets_Level1"><a name="IX_H5T_STR_SPACEPAD_1"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_STR_SPACEPAD</span>: Pad with spaces (as FORTRAN does)</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-18. API methods that set properties of opaque datatypes</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 232.615pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Functions</p>
</th>
  <th style="width : 199.385pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Description</p>
</th>
</tr>
  <tr style=" height : 37.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">herr_t H5Tset_tag (hid_t type_id const char *tag)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Body">Tags the opaque datatype type_id with an ASCII identifier tag. </p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_SubSection">Examples</p>
 <p class="FM__Body">The example below shows how to create a 128-bit little-endian signed integer type. Increasing the preci&#173;sion of a type automatically increases the total size. Note that the proper procedure is to begin from a type of the intended datatype class which in this case is a <span class="FM_Code">NATIVE INT</span>.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-6. Create a new 128-bit little-endian signed integer datatype</caption>
  <tr style=" height : 48.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_NATIVE_INT_28"></a><a name="IX_H5Tcopy_18"></a>hid_t new_type = H5Tcopy (H5T_NATIVE_INT);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_precision_5"></a>H5Tset_precision (new_type, 128);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_ORDER_LE_7"></a><a name="IX_H5Tset_order_5"></a>H5Tset_order (new_type, H5T_ORDER_LE);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><a name="IX_H5T_NATIVE_INT_29"></a><a name="IX_H5Tcopy_19"></a>The figure below shows the storage layout as the type is defined. The <span class="FM_Code">H5Tcopy</span>&#160;creates a datatype that is the same as <span class="FM_Code">H5T_NATIVE_INT</span>. In this example, suppose this is a 32-bit big-endian number (Figure a). The precision is set to 128 bits, which automatically extends the size to 8 bytes (Figure b). Finally, the byte order is set to little-endian (Figure c).</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-6. The storage layout for a new 128-bit little-endian signed integer datatype</caption>
  <tr style=" height : 214.06pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig6.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:1.500pt; margin-bottom:0.750pt; width:100%; max-width:519px;" id="image5" src="Dtypes_fig6.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">The significant bits of a data element can be offset from the beginning of the memory for that element by an amount of padding. The <span class="FM_Code">offset</span>&#160;property specifies the number of bits of padding that appear to the “right of” the value. The table and figure below show how a 32-bit unsigned integer with 16-bits of preci&#173;sion having the value <span class="FM_Code">0x1122</span> will be laid out in memory.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-19. Memory Layout for a 32-bit unsigned integer</caption>
  <tr style=" height : 36.00pt;">
  <th style="width : 86.400pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Byte Position</p>
</th>
  <th style="width : 86.400pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Big-Endian Offset=0</p>
</th>
  <th style="width : 86.400pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Big-Endian Offset=16</p>
</th>
  <th style="width : 86.400pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Little-Endian Offset=0</p>
</th>
  <th style="width : 86.400pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Little-Endian Offset=16</p>
</th>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">0:</p>
</td>
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">[pad]</p>
</td>
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">[0x11]</p>
</td>
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">[0x22]</p>
</td>
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">[pad]</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">1:</p>
</td>
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">[pad]</p>
</td>
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">[0x22]</p>
</td>
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">[0x11]</p>
</td>
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">[pad]</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">2:</p>
</td>
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">[0x11]</p>
</td>
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">[pad]</p>
</td>
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">[pad]</p>
</td>
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">[0x22]</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">3:</p>
</td>
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">[0x22]</p>
</td>
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">[pad]</p>
</td>
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">[pad]</p>
</td>
  <td style="width : 86.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">[0x11]</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:324.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-7. Memory Layout for a 32-bit unsigned integer</caption>
  <tr style=" height : 355.97pt;">
  <td style="width : 324.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig7.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:294px;" id="image6" src="Dtypes_fig7.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">If the offset is incremented then the total size is incremented also if necessary to prevent significant bits of the value from hanging over the edge of the datatype. </p>
 <p class="FM__Body">The bits of the entire data are numbered beginning at zero at the least significant bit of the least signifi&#173;cant byte (the byte at the lowest memory address for a little-endian type or the byte at the highest address for a big-endian type). The <span class="FM_Code">offset</span>&#160;property defines the bit location of the least significant bit of a bit field whose length is <span class="FM_Code">precision</span>. If the offset is increased so the significant bits “hang over” the edge of the datum, then the <span class="FM_Code">size</span>&#160;property is automatically incremented. </p>
 <p class="FM__Body">To illustrate the properties of the integer datatype class, the example below shows how to create a user-defined datatype that describes a 24-bit signed integer that starts on the third bit of a 32-bit word. The datatype is specialized from a 32-bit integer, the <span class="FM_EI_EmphasisItalic">precision</span>&#160;is set to 24 bits, and the <span class="FM_EI_EmphasisItalic">offset</span> is set to 3.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-7. A user-defined datatype with a 24-bit signed integer</caption>
  <tr style=" height : 100.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">hid_t dt;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_SDT_I32LE"></a><a name="IX_H5Tcopy_20"></a>dt = H5Tcopy(H5T_SDT_I32LE);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_precision_6"></a>H5Tset_precision(dt, 24);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_offset_4"></a>H5Tset_offset(dt,3);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_PAD_ONE_4"></a><a name="IX_H5T_PAD_ZERO_4"></a><a name="IX_H5Tset_pad_2"></a>H5Tset_pad(dt, H5T_PAD_ZERO, H5T_PAD_ONE);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><a name="IX_H5Tset_pad_3"></a>The figure below shows the storage layout for a data element. Note that the unused bits in the offset will be set to zero and the unused bits at the end will be set to one, as specified in the <span class="FM_Code">H5Tset_pad</span> call.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:450.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-8. A user-defined integer datatype with a range of -1,048,583 to 1,048,584</caption>
  <tr style=" height : 137.74pt;">
  <td style="width : 450.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig8.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:416px;" id="image7" src="Dtypes_fig8.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">To illustrate a user-defined floating point number, the example below shows how to create a 24-bit float&#173;ing point number that starts 5 bits into a 4 byte word. The floating point number is defined to have a man&#173;tissa of 19 bits (bits 5-23), an exponent of 3 bits (25-27), and the sign bit is bit 28. (Note that this is an illustration of what can be done and is not necessarily a floating point format that a user would require.)</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-8. A user-defined 24-bit floating point datatype</caption>
  <tr style=" height : 113.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">hid_t dt;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_IEEE_F32LE"></a><a name="IX_H5Tcopy_21"></a>dt = H5Tcopy(H5T_IEEE_F32LE);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_precision_7"></a>H5Tset_precision(dt, 24);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_fields_3"></a>H5Tset_fields (dt, 28, 25, 3, 5, 19);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_PAD_ZERO_5"></a><a name="IX_H5Tset_pad_4"></a>H5Tset_pad(dt, H5T_PAD_ZERO, H5T_PAD_ONE);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_inpad_2"></a>H5Tset_inpad(dt, H5T_PAD_ZERO);</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:360.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-9. A user-defined floating point datatype</caption>
  <tr style=" height : 155.02pt;">
  <td style="width : 360.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig9.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:416px;" id="image8" src="Dtypes_fig9.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">The figure above shows the storage layout of a data element for this datatype. Note that there is an unused bit (24) between the mantissa and the exponent. This bit is filled with the <span class="FM_EI_EmphasisItalic">inpad</span>&#160;value which in this case is 0. </p>
 <p class="FM__Body">The sign bit is always of length one and none of the fields are allowed to overlap. When expanding a float&#173;ing-point type one should set the precision first; when decreasing the size one should set the field posi&#173;tions and sizes first. </p>
 <p class="FM__Heading_Level4">6.5.2.2. Composite Datatypes</p>
 <p class="FM__Body">All composite datatypes must be user-defined; there are no predefined composite datatypes. </p>
 <p class="FM__Heading_Level5">6.5.2.2.1. Compound Datatypes</p>
 <p class="FM__Body">The subsections below describe how to create a compound datatype and how to write and read data of a compound datatype.</p>
 <p class="FM__Heading_SubSection">Defining Compound Datatypes</p>
 <p class="FM__Body">Compound datatypes are conceptually similar to a C struct or Fortran derived types. The compound data&#173;type defines a contiguous sequence of bytes, which are formatted using one up to 2^16 datatypes (mem&#173;bers). A compound datatype may have any number of members, in any order, and the members may have any datatype, including compound. Thus, complex nested compound datatypes can be created. The total size of the compound datatype is greater than or equal to the sum of the size of its members, up to a max&#173;imum of 2^32 bytes. HDF5 does not support datatypes with distinguished records or the equivalent of C unions or Fortran EQUIVALENCE statements.</p>
 <p class="FM__Body">Usually a C struct or Fortran derived type will be defined to hold a data point in memory, and the offsets of the members in memory will be the offsets of the struct members from the beginning of an instance of the struct. The HDF5 C library provides a macro <span class="FM_Code">HOFFSET (s,m)</span>&#160;to calculate the member’s offset. The HDF5 Fortran applications have to calculate offsets by using sizes of members datatypes and by taking in consideration the order of members in the Fortran derived type.</p>
 <p class="FM__BodyCode">HOFFSET(s,m)</p>
 <p class="FM__BodyIndent">This macro computes the offset of member <span class="FM_CodeItalic">m</span>&#160;within a struct <span class="FM_CodeItalic">s</span></p>
 <p class="FM__BodyCode">offsetof(s,m)</p>
 <p class="FM__BodyIndent">This macro defined in <span class="FM_Code">stddef.h</span>&#160;does exactly the same thing as the <span class="FM_Code">HOFFSET()</span> macro.</p>
 <p class="FM__Body"><span class="FM_EI_EmphasisItalic">Note for Fortran users</span>: Offsets of Fortran structure members correspond to the offsets within a packed datatype (see explanation below) stored in an HDF5 file.</p>
 <p class="FM__Body">Each member of a compound datatype must have a descriptive name which is the key used to uniquely identify the member within the compound datatype. A member name in an HDF5 datatype does not nec&#173;essarily have to be the same as the name of the member in the C struct or Fortran derived type, although this is often the case. Nor does one need to define all members of the C struct or Fortran derived type in the HDF5 compound datatype (or vice versa).</p>
 <p class="FM__Body">Unlike atomic datatypes which are derived from other atomic datatypes, compound datatypes are created from scratch. First, one creates an empty compound datatype and specifies its total size. Then members are added to the compound datatype in any order. Each member type is inserted at a designated offset. Each member has a name which is the key used to uniquely identify the member within the compound datatype.</p>
 <p class="FM__Body">The example below shows a way of creating an HDF5 C compound datatype to describe a complex num&#173;ber. This is a structure with two components, “real” and “imaginary”, and each component is a double. An equivalent C struct whose type is defined by the <span class="FM_Code">complex_t</span> struct is shown.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-9. A compound datatype for complex numbers in C</caption>
  <tr style=" height : 139.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>double re; &#160;&#160;/*real part*/</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>double im; &#160;&#160;/*imaginary part*/</p>
  <p class="FM__BodyCellCode">} complex_t;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_COMPOUND_4"></a><a name="IX_H5Tcreate_7"></a>hid_t complex_id = H5Tcreate (H5T_COMPOUND, sizeof (complex_t));</p>
  <p class="FM__BodyCellCode"><a name="IX_HOFFSET_1"></a><a name="IX_H5Tinsert_3"></a>H5Tinsert (complex_id, “real”, HOFFSET(complex_t,re),</p>
  <p class="FM__BodyCellCodeIndent"><a name="IX_H5T_NATIVE_DOUBLE_2"></a>H5T_NATIVE_DOUBLE);</p>
  <p class="FM__BodyCellCode">H5Tinsert (complex_id, “imaginary”, HOFFSET(complex_t,im),</p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">The example below shows a way of creating an HDF5 Fortran compound datatype to describe a complex number. This is a Fortran derived type with two components, “real” and “imaginary”, and each component is DOUBLE PRECISION. An equivalent Fortran TYPE whose type is defined by the TYPE <span class="FM_Code">complex_t</span>&#160;is shown.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-10. A compound datatype for complex numbers in Fortran</caption>
  <tr style=" height : 204.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">TYPE complex_t</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DOUBLE PRECISION re &#160;&#160;! real part</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DOUBLE PRECISION im; &#160;! imaginary part</p>
  <p class="FM__BodyCellCode">END TYPE complex_t</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_size_f_1"></a>CALL h5tget_size_f(H5T_NATIVE_DOUBLE, re_size, error)</p>
  <p class="FM__BodyCellCode">CALL h5tget_size_f(H5T_NATIVE_DOUBLE, im_size, error)</p>
  <p class="FM__BodyCellCode">complex_t_size = re_size + im_size</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_COMPOUND_F"></a><a name="IX_h5tcreate_f_1"></a>CALL h5tcreate_f(H5T_COMPOUND_F, complex_t_size, type_id)</p>
  <p class="FM__BodyCellCode">offset = 0</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_NATIVE_DOUBLE_3"></a><a name="IX_h5tinsert_f_1"></a>CALL h5tinsert_f(type_id, “real”, offset, H5T_NATIVE_DOUBLE, </p>
  <p class="FM__BodyCellCodeIndent">error)</p>
  <p class="FM__BodyCellCode">offset = offset + re_size</p>
  <p class="FM__BodyCellCode">CALL h5tinsert_f(type_id, “imaginary”, offset, H5T_NATIVE_DOUBLE, </p>
  <p class="FM__BodyCellCodeIndent">error)</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><span class="FM_EI_EmphasisItalic">Important Note</span>: The compound datatype is created with a size sufficient to hold all its members. In the C example above, the size of the C struct and the <span class="FM_Code">HOFFSET</span>&#160;macro are used as a convenient mechanism to determine the appropriate size and offset. Alternatively, the size and offset could be manually deter&#173;mined: the size can be set to 16 with “real” at offset 0 and “imaginary” at offset 8. However, different plat&#173;forms and compilers have different sizes for “double” and may have alignment restrictions which require additional padding within the structure. It is much more portable to use the <span class="FM_Code">HOFFSET</span>&#160;macro which assures that the values will be correct for any platform.</p>
 <p class="FM__Body">The figure below shows how the compound datatype would be laid out assuming that <span class="FM_Code">NATIVE_DOUBLE</span>&#160;are 64-bit numbers and that there are no alignment requirements. The total size of the compound data&#173;type will be 16 bytes, the “real” component will start at byte 0, and “imaginary” will start at byte 8.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-10. Layout of a compound datatype</caption>
  <tr style=" height : 161.28pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig10.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:1.500pt; margin-bottom:1.500pt; width:100%; max-width:509px;" id="image9" src="Dtypes_fig10.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">The members of a compound datatype may be any HDF5 datatype including the compound, array, and variable-length (VL) types. The figure and example below show the memory layout and code which cre&#173;ates a compound datatype composed of two complex values, and each complex value is also a compound datatype as in the figure above.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:450.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-11. Layout of a compound datatype nested in a compound datatype</caption>
  <tr style=" height : 277.85pt;">
  <td style="width : 450.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig11.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:1.500pt; margin-bottom:0.750pt; width:100%; max-width:509px;" id="image10" src="Dtypes_fig11.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:450.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-11. Code for a compound datatype nested in a compound datatype</caption>
  <tr style=" height : 87.00pt;">
  <td style="width : 450.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>complex_t x;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>complex_t y;</p>
  <p class="FM__BodyCellCode">} surf_t;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">hid_t complex_id, surf_id; /*hdf5 datatypes*/</p>
</td>
</tr>
  <tr style=" height : 87.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_COMPOUND_5"></a><a name="IX_H5Tcreate_8"></a>complex_id = H5Tcreate (H5T_COMPOUND, sizeof(complex_t));</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tinsert_4"></a>H5Tinsert (complex_id, “re”, HOFFSET(complex_t,re),</p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE);</p>
  <p class="FM__BodyCellCode">H5Tinsert (complex_id, “im”, HOFFSET(complex_t,im),</p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE);</p>
</td>
</tr>
  <tr style=" height : 61.00pt;">
  <td style="width : 450.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">surf_id = H5Tcreate (H5T_COMPOUND, sizeof(surf_t));</p>
  <p class="FM__BodyCellCode">H5Tinsert (surf_id, “x”, HOFFSET(surf_t,x), complex_id);</p>
  <p class="FM__BodyCellCode">H5Tinsert (surf_id, “y”, HOFFSET(surf_t,y), complex_id);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">Note that a similar result could be accomplished by creating a compound datatype and inserting four fields. See the figure below. This results in the same layout as the figure above. The difference would be how the fields are addressed. In the first case, the real part of ‘y’ is called ‘y.re’; in the second case it is ‘y-re’.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:450.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-12. Another compound datatype nested in a compound datatype</caption>
  <tr style=" height : 74.00pt;">
  <td style="width : 450.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>complex_t x;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>complex_t y;</p>
  <p class="FM__BodyCellCode">} surf_t;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 126.00pt;">
  <td style="width : 450.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcreate_9"></a>hid_t surf_id = H5Tcreate (H5T_COMPOUND, sizeof(surf_t));</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tinsert_5"></a>H5Tinsert (surf_id, “x-re”, HOFFSET(surf_t,x.re),</p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE);</p>
  <p class="FM__BodyCellCode">H5Tinsert (surf_id, “x-im”, HOFFSET(surf_t,x.im),</p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE);</p>
  <p class="FM__BodyCellCode">H5Tinsert (surf_id, “y-re”, HOFFSET(surf_t,y.re),</p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE);</p>
  <p class="FM__BodyCellCode">H5Tinsert (surf_id, “y-im”, HOFFSET(surf_t,y.im),</p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">The members of a compound datatype do not always fill all the bytes. The <span class="FM_Code">HOFFSET</span>&#160;macro assures that the members will be laid out according to the requirements of the platform and language. The example below shows an example of a C struct which requires extra bytes of padding on many platforms. The sec&#173;ond element, ‘b’, is a 1-byte character followed by an 8 byte double, ‘c’. On many systems, the 8-byte value must be stored on a 4- or 8-byte boundary. This requires the struct to be larger than the sum of the size of its elements. </p>
 <p class="FM__Body">In the example below, <span class="FM_Code">sizeof</span>&#160;and <span class="FM_Code">HOFFSET</span> are used to assure that the members are inserted at the cor&#173;rect offset to match the memory conventions of the platform. The figure below shows how this data ele&#173;ment would be stored in memory, assuming the double must start on a 4-byte boundary. Notice the extra bytes between ‘b’ and ‘c’.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-13. A compound datatype that requires padding</caption>
  <tr style=" height : 139.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct s1_t { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>int&nbsp;&nbsp;&nbsp;&nbsp;a; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>char&nbsp;&nbsp;&nbsp;b; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>double&nbsp;c; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
  <p class="FM__BodyCellCode">} s1_t;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tcreate_10"></a>s1_tid = H5Tcreate (H5T_COMPOUND, sizeof(s1_t));</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_NATIVE_INT_30"></a><a name="IX_H5Tinsert_6"></a>H5Tinsert(s1_tid, “a_name”, HOFFSET(s1_t, a), H5T_NATIVE_INT);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_NATIVE_CHAR"></a>H5Tinsert(s1_tid, “b_name”, HOFFSET(s1_t, b), H5T_NATIVE_CHAR);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_NATIVE_DOUBLE_4"></a>H5Tinsert(s1_tid, “c_name”, HOFFSET(s1_t, c), H5T_NATIVE_DOUBLE);</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-12. Memory layout of a compound datatype that requires padding</caption>
  <tr style=" height : 189.50pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig23.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:471px;" id="image11" src="Dtypes_fig23.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><a name="IX_H5Tcopy_22"></a><a name="IX_H5Tpack_1"></a>However, data stored on disk does not require alignment, so unaligned versions of compound data struc&#173;tures can be created to improve space efficiency on disk. These unaligned compound datatypes can be created by computing offsets by hand to eliminate inter-member padding, or the members can be packed by calling <span class="FM_Code">H5Tpack</span>&#160;(which modifies a datatype directly, so it is usually preceded by a call to <span class="FM_Code">H5Tcopy</span>).</p>
 <p class="FM__Body">The example below shows how to create a disk version of the compound datatype from the figure above in order to store data on disk in as compact a form as possible. Packed compound datatypes should gener&#173;ally not be used to describe memory as they may violate alignment constraints for the architecture being used. Note also that using a packed datatype for disk storage may involve a higher data conversion cost.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-14. Create a packed compound datatype in C</caption>
  <tr style=" height : 35.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcopy_23"></a>&#160;hid_t s2_tid = H5Tcopy (s1_tid);</p>
  <p class="FM__BodyCellCodeIndent"><a name="IX_H5Tpack_2"></a>H5Tpack (s2_tid);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">The example below shows the sequence of Fortran calls to create a packed compound datatype. An HDF5 Fortran compound datatype never describes a compound datatype in memory and compound data is <span class="FM_EI_EmphasisItalic">ALWAYS</span> written by fields as described in the next section. Therefore packing is not needed unless the off&#173;set of each consecutive member is not equal to the sum of the sizes of the previous members.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-15. Create a packed compound datatype in Fortran</caption>
  <tr style=" height : 35.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_h5tcopy_f_1"></a>CALL h5tcopy_f(s1_id, s2_id, error)</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tpack_f_1"></a>CALL h5tpack_f(s2_id, error)</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_SubSection">Creating and Writing Datasets with Compound Datatypes</p>
 <p class="FM__Body">Creating datasets with compound datatypes is similar to creating datasets with any other HDF5 datatypes. But writing and reading may be different since datasets that have compound datatypes can be written or read by a field (member) or subsets of fields (members). The compound datatype is the only composite datatype that supports “sub-setting” by the elements the datatype is built from.</p>
 <p class="FM__Body">The example below shows a C example of creating and writing a dataset with a compound datatype.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-16. Create and write a dataset with a compound datatype in C</caption>
  <tr style=" height : 87.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct s1_t {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>int&nbsp;a;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>float&nbsp;b;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>double&nbsp;c;</p>
  <p class="FM__BodyCellCode">} s1_t;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 126.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">s1_t data[LENGTH];</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">/* Initialize data */</p>
  <p class="FM__BodyCellCode">for (i = 0; i &lt; LENGTH; i++) {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>data[i].a = i;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>data[i].b = i*i;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>data[i].c = 1./(i+1);</p>
  <p class="FM__BodyCellCode">...</p>
</td>
</tr>
  <tr style=" height : 113.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_COMPOUND_6"></a><a name="IX_H5Tcreate_11"></a>s1_tid = H5Tcreate (H5T_COMPOUND, sizeof(s1_t));</p>
  <p class="FM__BodyCellCode">H5Tinsert(s1_tid, “a_name”, HOFFSET(s1_t, a), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_INT);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s1_tid, “b_name”, HOFFSET(s1_t, b), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_FLOAT);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s1_tid, “c_name”, HOFFSET(s1_t, c), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE);</p>
  <p class="FM__BodyCellCode">...</p>
</td>
</tr>
  <tr style=" height : 61.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Dcreate_17"></a>dataset_id = H5Dcreate(file_id, “SDScompound.h5”, s1_t, </p>
  <p class="FM__BodyCellCodeIndent">space_id, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dwrite_22"></a>H5Dwrite (dataset_id, s1_tid, H5S_ALL, H5S_ALL, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, data);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">The example below shows the content of the file written on a little-endian machine.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-17. Create and write a little-endian dataset with a compound datatype in C</caption>
  <tr style=" height : 100.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">HDF5 “SDScompound.h5” {</p>
  <p class="FM__BodyCellCode">GROUP “/” {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DATASET “ArrayOfStructures” {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DATATYPE &#160;H5T_COMPOUND {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_STD_I32LE “a_name”;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_IEEE_F32LE “b_name”;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_IEEE_F64LE “c_name”;</p>
</td>
</tr>
  <tr style=" height : 113.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DATASPACE &#160;SIMPLE { ( 3 ) / ( 3 ) }</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DATA {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>(0): {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>0,</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>0,</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>1</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>},</p>
</td>
</tr>
  <tr style=" height : 74.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>(1): {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>1,</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>1,</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>0.5</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>},</p>
</td>
</tr>
  <tr style=" height : 126.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>(2): {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>2,</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>4,</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>0.333333</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM__BodyCellCode">}</p>
  <p class="FM__BodyCellCode">}</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><a name="IX_H5Pset_preserve"></a>It is not necessary to write the whole data at once. Datasets with compound datatypes can be written by field or by subsets of fields. In order to do this one has to remember to set the transfer property of the dataset using the <span class="FM_Code">H5Pset_preserve</span>&#160;call and to define the memory datatype that corresponds to a field. The example below shows how float and double fields are &#160;written to the dataset.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-18. Writing floats and doubles to a dataset</caption>
  <tr style=" height : 74.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct sb_t {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>float&nbsp;b;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>double&nbsp;c;</p>
  <p class="FM__BodyCellCode">} sb_t;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 100.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct sc_t {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>float&nbsp;b;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>double&nbsp;c;</p>
  <p class="FM__BodyCellCode">} sc_t;</p>
  <p class="FM__BodyCellCode">sb_t data1[LENGTH];</p>
  <p class="FM__BodyCellCode">sc_t data2[LENGTH];</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 113.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">/* Initialize data */</p>
  <p class="FM__BodyCellCode">for (i = 0; i &lt; LENGTH; i++) {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>data1.b = i*i;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>data2.c = 1./(i+1);</p>
  <p class="FM__BodyCellCode">}</p>
  <p class="FM__BodyCellCode">...</p>
  <p class="FM__BodyCellCode">/* Create dataset as in example 15 */</p>
  <p class="FM__BodyCellCode">...</p>
</td>
</tr>
  <tr style=" height : 139.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">/* Create memory datatypes corresponding to float */</p>
  <p class="FM__BodyCellCode">/* and double datatype fields */</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tcreate_12"></a>sb_tid = H5Tcreate (H5T_COMPOUND, sizeof(sb_t));</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tinsert_7"></a>H5Tinsert(sb_tid, “b_name”, HOFFSET(sb_t, b), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_FLOAT);</p>
  <p class="FM__BodyCellCode">sc_tid = H5Tcreate (H5T_COMPOUND, sizeof(sc_t));</p>
  <p class="FM__BodyCellCode">H5Tinsert(sc_tid, “c_name”, HOFFSET(sc_t, c), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE);</p>
  <p class="FM__BodyCellCode">...</p>
</td>
</tr>
  <tr style=" height : 100.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">/* Set transfer property */</p>
  <p class="FM__BodyCellCode"><a name="IX_H5P_DATASET_XFER_2"></a><a name="IX_H5Pcreate_16"></a>xfer_id = H5Pcreate(H5P_DATASET_XFER);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Pset_preserve_1"></a>H5Pset_preserve(xfer_id, 1);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dwrite_23"></a>H5Dwrite (dataset_id, sb_tid, H5S_ALL, H5S_ALL, </p>
  <p class="FM__BodyCellCodeIndent">xfer_id, data1);</p>
  <p class="FM__BodyCellCode">H5Dwrite (dataset_id, sc_tid, H5S_ALL, H5S_ALL, </p>
  <p class="FM__BodyCellCodeIndent">xfer_id, data2);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">The figure below shows the content of the file written on a little-endian machine. Only float and double fields are written. The default fill value is used to initialize the unwritten integer field.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:450.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-19. Writing floats and doubles to a dataset on a little-endian system</caption>
  <tr style=" height : 113.00pt;">
  <td style="width : 450.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">HDF5 “SDScompound.h5” {</p>
  <p class="FM__BodyCellCode">GROUP “/” {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DATASET “ArrayOfStructures” {</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_COMPOUND_7"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DATATYPE &#160;H5T_COMPOUND {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_STD_I32LE “a_name”;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_IEEE_F32LE “b_name”;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_IEEE_F64LE “c_name”;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
</td>
</tr>
  <tr style=" height : 100.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DATASPACE &#160;SIMPLE { ( 3 ) / ( 3 ) }</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DATA {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>(0): {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>0,</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>0,</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>1</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>},</p>
</td>
</tr>
  <tr style=" height : 74.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>(1): {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>0,</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>1,</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>0.5</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>},</p>
</td>
</tr>
  <tr style=" height : 61.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>(2): {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>0,</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>4,</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>0.333333</p>
</td>
</tr>
  <tr style=" height : 74.00pt;">
  <td style="width : 450.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM__BodyCellCode">}</p>
  <p class="FM__BodyCellCode">}</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">The example below contains a Fortran example that creates and writes a dataset with a compound data&#173;type. As this example illustrates, writing and reading compound datatypes in Fortran is <span class="FM_EI_EmphasisItalic">always</span>&#160;done by fields. The content of the written file is the same as shown in the example above.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:450.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-20. Create and write a dataset with a compound datatype in Fortran</caption>
  <tr style=" height : 100.00pt;">
  <td style="width : 450.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">! One cannot write an array of a derived datatype in </p>
  <p class="FM__BodyCellCode">! Fortran.</p>
  <p class="FM__BodyCellCode">TYPE s1_t</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>INTEGER a</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>REAL b</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DOUBLE PRECISION c</p>
  <p class="FM__BodyCellCode">END TYPE s1_t</p>
</td>
</tr>
  <tr style=" height : 126.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">TYPE(s1_t) d(LENGTH)</p>
  <p class="FM__BodyCellCode">! Therefore, the following code initializes an array </p>
  <p class="FM__BodyCellCode">! corresponding to each field in the derived datatype </p>
  <p class="FM__BodyCellCode">! and writes those arrays to the dataset</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">INTEGER, DIMENSION(LENGTH) :: a</p>
  <p class="FM__BodyCellCode">REAL, DIMENSION(LENGTH) :: b</p>
  <p class="FM__BodyCellCode">DOUBLE PRECISION, DIMENSION(LENGTH) :: c</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 126.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">! Initialize data</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>do i = 1, LENGTH</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>a(i) = i-1</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>b(i) = (i-1) * (i-1)</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>c(i) = 1./i</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>enddo</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">...</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 113.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">! Set dataset transfer property to preserve partially </p>
  <p class="FM__BodyCellCode">! initialized fields during write/read to/from dataset </p>
  <p class="FM__BodyCellCode">! with compound datatype.</p>
  <p class="FM__BodyCellCode">!</p>
  <p class="FM__BodyCellCode"><a name="IX_H5P_DATASET_XFER_F"></a><a name="IX_h5pcreate_f"></a>CALL h5pcreate_f(H5P_DATASET_XFER_F, plist_id, error)</p>
  <p class="FM__BodyCellCode"><a name="IX_h5pset_preserve_f"></a>CALL h5pset_preserve_f(plist_id, .TRUE., error)</p>
  <p class="FM__BodyCellCode">...</p>
  <p class="FM__BodyCellCode">!</p>
</td>
</tr>
  <tr style=" height : 139.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">! Create compound datatype.</p>
  <p class="FM__BodyCellCode">!</p>
  <p class="FM__BodyCellCode">! First calculate total size by calculating sizes of </p>
  <p class="FM__BodyCellCode">! each member</p>
  <p class="FM__BodyCellCode">!</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tget_size_f_2"></a>CALL h5tget_size_f(H5T_NATIVE_INTEGER, type_sizei, error)</p>
  <p class="FM__BodyCellCode">CALL h5tget_size_f(H5T_NATIVE_REAL, type_sizer, error)</p>
  <p class="FM__BodyCellCode">CALL h5tget_size_f(H5T_NATIVE_DOUBLE, type_sized, error)</p>
  <p class="FM__BodyCellCode">type_size = type_sizei + type_sizer + type_sized</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tcreate_f_2"></a>CALL h5tcreate_f(H5T_COMPOUND_F, type_size, dtype_id, error)</p>
</td>
</tr>
  <tr style=" height : 61.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">!</p>
  <p class="FM__BodyCellCode">! Insert members</p>
  <p class="FM__BodyCellCode">!</p>
  <p class="FM__BodyCellCode">!</p>
</td>
</tr>
  <tr style=" height : 165.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">! INTEGER member</p>
  <p class="FM__BodyCellCode">!</p>
  <p class="FM__BodyCellCode">offset = 0</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tinsert_f_2"></a>CALL h5tinsert_f(dtype_id, “a_name”, offset, </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_INTEGER, error)</p>
  <p class="FM__BodyCellCode">!</p>
  <p class="FM__BodyCellCode">! REAL member</p>
  <p class="FM__BodyCellCode">!</p>
  <p class="FM__BodyCellCode">offset = offset + type_sizei</p>
  <p class="FM__BodyCellCode">CALL h5tinsert_f(dtype_id, “b_name”, offset, H5T_NATIVE_REAL, </p>
  <p class="FM__BodyCellCodeIndent">error)</p>
  <p class="FM__BodyCellCode">!</p>
</td>
</tr>
  <tr style=" height : 126.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">! DOUBLE PRECISION member</p>
  <p class="FM__BodyCellCode">!</p>
  <p class="FM__BodyCellCode">offset = offset + type_sizer</p>
  <p class="FM__BodyCellCode">CALL h5tinsert_f(dtype_id, “c_name”, offset, </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE, error)</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">!</p>
  <p class="FM__BodyCellCode">! Create the dataset with compound datatype.</p>
  <p class="FM__BodyCellCode">!</p>
</td>
</tr>
  <tr style=" height : 113.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">CALL h5dcreate_f(file_id, dsetname, dtype_id, dspace_id, &amp;</p>
  <p class="FM__BodyCellCodeIndent">dset_id, error, H5P_DEFAULT_F, H5P_DEFAULT_F, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT_F)</p>
  <p class="FM__BodyCellCode">!</p>
  <p class="FM__BodyCellCode">...</p>
  <p class="FM__BodyCellCode">! Create memory types. We have to create a compound </p>
  <p class="FM__BodyCellCode">! datatype for each member we want to write.</p>
  <p class="FM__BodyCellCode">!</p>
</td>
</tr>
  <tr style=" height : 100.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_h5tcreate_f_3"></a>CALL h5tcreate_f(H5T_COMPOUND_F, type_sizei, dt1_id, error)</p>
  <p class="FM__BodyCellCode">offset = 0</p>
  <p class="FM__BodyCellCode"><a name="IX_h5tinsert_f_3"></a>CALL h5tinsert_f(dt1_id, “a_name”, offset, </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_INTEGER, error)</p>
  <p class="FM__BodyCellCode">!</p>
  <p class="FM__BodyCellCode">CALL h5tcreate_f(H5T_COMPOUND_F, type_sizer, dt2_id, error)</p>
  <p class="FM__BodyCellCode">offset = 0</p>
</td>
</tr>
  <tr style=" height : 100.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">CALL h5tinsert_f(dt2_id, “b_name”, offset, H5T_NATIVE_REAL, </p>
  <p class="FM__BodyCellCodeIndent">error)</p>
  <p class="FM__BodyCellCode">!</p>
  <p class="FM__BodyCellCode">CALL h5tcreate_f(H5T_COMPOUND_F, type_sized, dt3_id, error)</p>
  <p class="FM__BodyCellCode">offset = 0</p>
  <p class="FM__BodyCellCode">CALL h5tinsert_f(dt3_id, “c_name”, offset, H5T_NATIVE_DOUBLE, </p>
  <p class="FM__BodyCellCodeIndent">error)</p>
</td>
</tr>
  <tr style=" height : 139.00pt;">
  <td style="width : 450.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">!</p>
  <p class="FM__BodyCellCode">! Write data by fields in the datatype. Fields order </p>
  <p class="FM__BodyCellCode">! is not important.</p>
  <p class="FM__BodyCellCode">!</p>
  <p class="FM__BodyCellCode"><a name="IX_h5dwrite_f_1"></a>CALL h5dwrite_f(dset_id, dt3_id, c, data_dims, error, </p>
  <p class="FM__BodyCellCodeIndent">xfer_prp = plist_id)</p>
  <p class="FM__BodyCellCode">CALL h5dwrite_f(dset_id, dt2_id, b, data_dims, error, </p>
  <p class="FM__BodyCellCodeIndent">xfer_prp = plist_id)</p>
  <p class="FM__BodyCellCode">CALL h5dwrite_f(dset_id, dt1_id, a, data_dims, error, </p>
  <p class="FM__BodyCellCodeIndent">xfer_prp = plist_id)</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_SubSection">Reading Datasets with Compound Datatypes</p>
 <p class="FM__Body">Reading datasets with compound datatypes may be a challenge. For general applications there is no way to know <span class="FM_EI_EmphasisItalic">a priori</span> the corresponding C structure. Also, C structures cannot be allocated on the fly during dis&#173;covery of the dataset’s datatype. For general C, C++, Fortran and Java application the following steps will be required to read and to interpret data from the dataset with compound datatype:</p>
 <p class="FM__ListNumbered1_Level1"><a name="IX_H5Dget_type_4"></a>1.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Get the identifier of the compound datatype in the file with the <span class="FM_Code">H5Dget_type</span> call</p>
 <p class="FM__ListNumbered_Level1"><a name="IX_H5Tget_nmembers_3"></a>2.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Find the number of the compound datatype members with the <span class="FM_Code">H5Tget_nmembers</span> call</p>
 <p class="FM__ListNumbered_Level1">3.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Iterate through compound datatype members</p>
 <p class="FM__ListBullets_Level2"><a name="IX_H5Tget_member_class_2"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Get member class with the <span class="FM_Code">H5Tget_member_class</span> call</p>
 <p class="FM__ListBullets_Level2"><a name="IX_H5Tget_member_name_3"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Get member name with the <span class="FM_Code">H5Tget_member_name</span> call</p>
 <p class="FM__ListBullets_Level2">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Check class type against predefined classes</p>
 <p class="FM__ListBullets_Level3" style="margin-top  : 3.000pt; font-family : Courier New; font-size  : 10.0pt;"><a name="IX_H5T_INTEGER_5"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_INTEGER</span></p>
 <p class="FM__ListBullets_Level3" style="margin-top  : 3.000pt; font-family : Courier New; font-size  : 10.0pt;"><a name="IX_H5T_FLOAT_3"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_FLOAT</span></p>
 <p class="FM__ListBullets_Level3" style="margin-top  : 3.000pt; font-family : Courier New; font-size  : 10.0pt;"><a name="IX_H5T_STRING_1"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_STRING</span></p>
 <p class="FM__ListBullets_Level3" style="margin-top  : 3.000pt; font-family : Courier New; font-size  : 10.0pt;"><a name="IX_H5T_BITFIELD_1"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_BITFIELD</span></p>
 <p class="FM__ListBullets_Level3" style="margin-top  : 3.000pt; font-family : Courier New; font-size  : 10.0pt;"><a name="IX_H5T_OPAQUE_2"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_OPAQUE</span></p>
 <p class="FM__ListBullets_Level3" style="margin-top  : 3.000pt; font-family : Courier New; font-size  : 10.0pt;"><a name="IX_H5T_COMPOUND_8"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_COMPOUND</span></p>
 <p class="FM__ListBullets_Level3" style="margin-top  : 3.000pt; font-family : Courier New; font-size  : 10.0pt;"><a name="IX_H5T_REFERENCE_1"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_REFERENCE</span></p>
 <p class="FM__ListBullets_Level3" style="margin-top  : 3.000pt; font-family : Courier New; font-size  : 10.0pt;"><a name="IX_H5T_ENUM_2"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_ENUM</span></p>
 <p class="FM__ListBullets_Level3" style="margin-top  : 3.000pt; font-family : Courier New; font-size  : 10.0pt;"><a name="IX_H5T_VLEN_1"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_VLEN</span></p>
 <p class="FM__ListBullets_Level3" style="margin-top  : 3.000pt; font-family : Courier New; font-size  : 10.0pt;"><a name="IX_H5T_ARRAY_1"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">H5T_ARRAY</span></p>
 <p class="FM__ListBullets_Level2"><a name="IX_H5T_COMPOUND_10"></a><a name="IX_H5T_COMPOUND_9"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>If class is <span class="FM_Code">H5T_COMPOUND</span>, then go to step 2 and repeat all steps under step 3. If class is not <span class="FM_Code">H5T_COMPOUND</span>, then a member is of an atomic class and can be read to a corresponding buf&#173;fer after discovering all necessary information specific to each atomic type (for example, size of the integer or floats, super class for enumerated and array datatype, and its sizes)</p>
 <p class="FM__Body">The examples below show how to read a dataset with a known compound datatype.</p>
 <p class="FM__Body"><a name="IX_H5Dread_20"></a>The first example below shows the steps needed to read data of a known structure. First, build a memory datatype the same way it was built when the dataset was created, and then second use the datatype in a <span class="FM_Code">H5Dread</span> call.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-21. Read a dataset using a memory datatype</caption>
  <tr style=" height : 87.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct s1_t {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>int&nbsp;a;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>float&nbsp;b;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>double&nbsp;c;</p>
  <p class="FM__BodyCellCode">} s1_t;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 152.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">s1_t *data;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">...</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_COMPOUND_11"></a><a name="IX_H5Tcreate_13"></a>s1_tid = H5Tcreate(H5T_COMPOUND, sizeof(s1_t));</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tinsert_8"></a>H5Tinsert(s1_tid, “a_name”, HOFFSET(s1_t, a), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_INT);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s1_tid, “b_name”, HOFFSET(s1_t, b), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_FLOAT);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s1_tid, “c_name”, HOFFSET(s1_t, c), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE);</p>
  <p class="FM__BodyCellCode">...</p>
</td>
</tr>
  <tr style=" height : 87.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">dataset_id = H5Dopen(file_id, “SDScompound.h5”, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT);</p>
  <p class="FM__BodyCellCode">...</p>
  <p class="FM__BodyCellCode">data = (s1_t *) malloc (sizeof(s1_t)*LENGTH);</p>
  <p class="FM__BodyCellCode">H5Dread(dataset_id, s1_tid, H5S_ALL, H5S_ALL, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, data);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><a name="IX_H5Tget_native_type_1"></a>Instead of building a memory datatype, the application could use the <span class="FM_Code">H5Tget_native_type</span>&#160;function. See the example below.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-22. Read a dataset using H5Tget_native_type</caption>
  <tr style=" height : 87.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct s1_t {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>int a;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>float b;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>double c;</p>
  <p class="FM__BodyCellCode">} s1_t;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 100.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">s1_t *data;</p>
  <p class="FM__BodyCellCode">hid_t file_s1_t, mem_s1_t;</p>
  <p class="FM__BodyCellCode">...</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dopen_19"></a>dataset_id = H5Dopen(file_id, “SDScompound.h5”, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT);</p>
  <p class="FM__BodyCellCode">/* Discover datatype in the file */</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dget_type_5"></a>file_s1_t &#160;= H5Dget_type(dataset_id);</p>
</td>
</tr>
  <tr style=" height : 100.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">/* Find corresponding memory datatype */</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_native_type_2"></a>mem_s1_t &#160;&#160;= H5Tget_native_type(file_s1_t, </p>
  <p class="FM__BodyCellCodeIndent"><a name="IX_H5T_DIR_DEFAULT"></a>H5T_DIR_DEFAULT); </p>
  <p class="FM__BodyCellCode">...</p>
  <p class="FM__BodyCellCode">data = (s1_t *) malloc (sizeof(s1_t)*LENGTH);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dread_21"></a>H5Dread (dataset_id, mem_s1_tid, H5S_ALL, H5S_ALL, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, data);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">The example below shows how to read just one float member of a compound datatype.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-23. Read one floating point member of a compound datatype</caption>
  <tr style=" height : 230.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct s1_t {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>float&nbsp;b;</p>
  <p class="FM__BodyCellCode">} sf_t;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">sf_t *data;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">...</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tcreate_14"></a>sf_tid = H5Tcreate(H5T_COMPOUND, sizeof(sf_t));</p>
  <p class="FM__BodyCellCode">H5Tinsert(s1_tid, “b_name”, HOFFSET(sf_t, b), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_FLOAT);</p>
  <p class="FM__BodyCellCode">...</p>
  <p class="FM__BodyCellCode">dataset_id = H5Dopen(file_id, “SDScompound.h5”, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT);</p>
  <p class="FM__BodyCellCode">...</p>
  <p class="FM__BodyCellCode">data = (sf_t *) malloc (sizeof(sf_t)*LENGTH);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dread_22"></a>H5Dread(dataset_id, sf_tid, H5S_ALL, H5S_ALL, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, data);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><a name="IX_H5Tinsert_9"></a>The example below shows how to read float and double members of a compound datatype into a struc&#173;ture that has those fields in a different order. Please notice that <span class="FM_Code">H5Tinsert</span>&#160;calls can be used in an order different from the order of the structure’s members.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-24. Read float and double members of a compound datatype</caption>
  <tr style=" height : 269.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct s1_t {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>double c;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>float b;</p>
  <p class="FM__BodyCellCode">} sdf_t;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">sdf_t *data;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">...</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tcreate_15"></a>sdf_tid = H5Tcreate(H5T_COMPOUND, sizeof(sdf_t));</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tinsert_10"></a>H5Tinsert(sdf_tid, “b_name”, HOFFSET(sdf_t, b), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_FLOAT);</p>
  <p class="FM__BodyCellCode">H5Tinsert(sdf_tid, “c_name”, HOFFSET(sdf_t, c), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE);</p>
  <p class="FM__BodyCellCode">...</p>
  <p class="FM__BodyCellCode">dataset_id = H5Dopen(file_id, “SDScompound.h5”, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT);</p>
  <p class="FM__BodyCellCode">...</p>
  <p class="FM__BodyCellCode">data = (sdf_t *) malloc (sizeof(sdf_t)*LENGTH);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dread_23"></a>H5Dread(dataset_id, sdf_tid, H5S_ALL, H5S_ALL, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, data);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level5">6.5.2.2.2. Array</p>
 <p class="FM__Body">Many scientific datasets have multiple measurements for each point in a space. There are several natural ways to represent this data, depending on the variables and how they are used in computation. See the table and the figure below.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-20. Representing data with multiple measurements</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 106.339pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Storage Strategy</p>
</th>
  <th style="width : 106.339pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Stored as</p>
</th>
  <th style="width : 219.322pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Remarks</p>
</th>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 106.339pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Multiple planes</p>
</td>
  <td style="width : 106.339pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Several datasets with identical dataspaces</p>
</td>
  <td style="width : 219.322pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">This is optimal when variables are accessed individually, or when often uses only selected variables.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 106.339pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Additional dimen&#173;sion</p>
</td>
  <td style="width : 106.339pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">One dataset, the last “dimension” is a vec&#173;tor of variables</p>
</td>
  <td style="width : 219.322pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">This can give good performance, although selecting only a few variables may be slow. This may not reflect the science.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 106.339pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Record with multi&#173;ple values</p>
</td>
  <td style="width : 106.339pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">One dataset with compound datatype</p>
</td>
  <td style="width : 219.322pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">This enables the variables to be read all together or selected. Also handles “vectors” of heterogeneous data.</p>
</td>
</tr>
  <tr style=" height : 49.00pt;">
  <td style="width : 106.339pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Vector or Tensor value</p>
</td>
  <td style="width : 106.339pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">One dataset, each data element is a small array of values.</p>
</td>
  <td style="width : 219.322pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">This uses the same amount of space as the previous two, and may represent the science model better.</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-13. Representing data with multiple measurements</caption>
  <tr style=" height : 125.48pt;">
  <td style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig26_pic1of4.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:150px;" id="image12" src="Dtypes_fig26_pic1of4.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
  <td style="width : 216.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig26_pic2of4.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:160px;" id="image13" src="Dtypes_fig26_pic2of4.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 132.48pt;">
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig26_pic3of4.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:150px;" id="image14" src="Dtypes_fig26_pic3of4.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
  <td style="width : 216.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig26_pic4of4.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:150px;" id="image15" src="Dtypes_fig26_pic4of4.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><a name="IX_H5T_ARRAY_2"></a>The HDF5 <span class="FM_Code">H5T_ARRAY</span>&#160;datatype defines the data element to be a homogeneous, multi-dimensional array. See Figure 13d above. The elements of the array can be any HDF5 datatype (including compound and array), and the size of the datatype is the total size of the array. A dataset of array datatype cannot be sub&#173;divided for I/O within the data element: the entire array of the data element must be transferred. If the data elements need to be accessed separately, for example, by plane, then the array datatype should not be used. The table below shows advantages and disadvantages of various storage methods.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-21. Storage method advantages and disadvantages</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 122.400pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Method</p>
</th>
  <th style="width : 154.800pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Advantages</p>
</th>
  <th style="width : 154.800pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Disadvantages</p>
</th>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 122.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">a) Multiple Datasets</p>
</td>
  <td style="width : 154.800pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Easy to access each plane, can select any plane(s)</p>
</td>
  <td style="width : 154.800pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Less efficient to access a ‘col&#173;umn’ through the planes</p>
</td>
</tr>
  <tr style=" height : 88.00pt;">
  <td style="width : 122.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">b) N+1 Dimension</p>
</td>
  <td style="width : 154.800pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">All access patterns supported</p>
</td>
  <td style="width : 154.800pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Must be homogeneous data&#173;type</p>
  <p class="FM__BodyCell">&nbsp;</p>
  <p class="FM__BodyCell">The added dimension may not make sense in the scientific model</p>
</td>
</tr>
  <tr style=" height : 75.00pt;">
  <td style="width : 122.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">c) Compound Datatype</p>
</td>
  <td style="width : 154.800pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Can be heterogeneous datatype</p>
</td>
  <td style="width : 154.800pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Planes must be named, selec&#173;tion is by plane</p>
  <p class="FM__BodyCell">&nbsp;</p>
  <p class="FM__BodyCell">Not a natural representation for a matrix</p>
</td>
</tr>
  <tr style=" height : 36.00pt;">
  <td style="width : 122.400pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">d) Array</p>
</td>
  <td style="width : 154.800pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">A natural representation for vector or tensor data</p>
</td>
  <td style="width : 154.800pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Cannot access elements sepa&#173;rately (no access by plane)</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><a name="IX_H5S_MAX_RANK"></a>An array datatype may be multi-dimensional with 1 to <span class="FM_Code">H5S_MAX_RANK</span>&#160;(the maximum rank of a dataset is currently 32) dimensions. The dimensions can be any size greater than 0, but unlimited dimensions are not supported (although the datatype can be a variable-length datatype).</p>
 <p class="FM__Body"><a name="IX_H5Tarray_create_2"></a>An array datatype is created with the <span class="FM_Code">H5Tarray_create</span>&#160;call, which specifies the number of dimensions, the size of each dimension, and the base type of the array. The array datatype can then be used in any way that any datatype object is used. The example below shows the creation of a datatype that is a two-dimensional array of native integers, and this is then used to create a dataset. Note that the dataset can be a dataspace that is any number and size of dimensions. The figure below shows the layout in memory assuming that the native integers are 4 bytes. Each data element has 6 elements, for a total of 24 bytes.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-25. Create a two-dimensional array datatype</caption>
  <tr style=" height : 139.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">hid_t file, dataset;</p>
  <p class="FM__BodyCellCode">hid_t datatype, dataspace;</p>
  <p class="FM__BodyCellCode">hsize_t adims[] = {3, 2}; </p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tarray_create_3"></a>datatype = H5Tarray_create(H5T_NATIVE_INT, 2, adims, </p>
  <p class="FM__BodyCellCodeIndent">NULL);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dcreate_18"></a>dataset = H5Dcreate(file, datasetname, datatype, </p>
  <p class="FM__BodyCellCodeIndent">dataspace, H5P_DEFAULT, H5P_DEFAULT, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT);</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-14. Memory layout of a two-dimensional array datatype</caption>
  <tr style=" height : 324.65pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig28.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:600px;" id="image16" src="Dtypes_fig28.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level5">6.5.2.2.3. Variable-leng<a name="XREF_VariableLengthDatatypes"></a>th Datatypes</p>
 <p class="FM__Body">A variable-length (VL) datatype is a one-dimensional sequence of a datatype which are not fixed in length from one dataset location to another. In other words, each data element may have a different number of members. Variable-length datatypes cannot be divided, the entire data element must be transferred.</p>
 <p class="FM__Body">VL datatypes are useful to the scientific community in many different ways, possibly including: </p>
 <p class="FM__ListBullets_Level1"><a name="IX_ragged_arrays"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_EI_EmphasisItalic">Ragged arrays</span>: Multi-dimensional ragged arrays can be implemented with the last (fastest chang&#173;ing) dimension being ragged by using a VL datatype as the type of the element stored. </p>
 <p class="FM__ListBullets_Level1"><a name="IX_fractal_arrays"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_EI_EmphasisItalic">Fractal arrays</span>: A nested VL datatype can be used to implement ragged arrays of ragged arrays, to whatever nesting depth is required for the user. </p>
 <p class="FM__ListBullets_Level1"><a name="IX_polygon_lists"></a>•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_EI_EmphasisItalic">Polygon lists</span>: A common storage requirement is to efficiently store arrays of polygons with differ&#173;ent numbers of vertices. A VL datatype can be used to efficiently and succinctly describe an array of polygons with different numbers of vertices. </p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_EI_EmphasisItalic">Character strings</span>: Perhaps the most common use of VL datatypes will be to store C-like VL charac&#173;ter strings in dataset elements or as attributes of objects. </p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_EI_EmphasisItalic">Indices</span>&#160;(for example, of objects within a file): An array of VL object references could be used as an index to all the objects in a file which contain a particular sequence of dataset values. </p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_EI_EmphasisItalic">Object Tracking</span>: An array of VL dataset region references can be used as a method of tracking objects or features appearing in a sequence of datasets. </p>
 <p class="FM__Body"><a name="IX_hvl_t"></a><a name="IX_H5Tvlen_create_2"></a>A VL datatype is created by calling <span class="FM_Code">H5Tvlen_create</span>&#160;which specifies the base datatype. The first example below shows an example of code that creates a VL datatype of unsigned integers. Each data element is a one-dimensional array of zero or more members and is stored in the <span class="FM_Code">hvl_t</span>&#160;structure. See the second example below. </p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-26. Create a variable-length datatype of unsigned integers</caption>
  <tr style=" height : 61.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">tid1 = H5Tvlen_create (H5T_NATIVE_UINT);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dcreate_19"></a>dataset=H5Dcreate(fid1, “Dataset1”, tid1, sid1, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-27. Data element storage for members of the VL datatype</caption>
  <tr style=" height : 74.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct &#160;{</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>size_t len; /* Length of VL data */</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/*(in base type units) */ </p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>void *p; /* Pointer to VL data */</p>
  <p class="FM__BodyCellCode">} hvl_t;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">The first example below shows how the VL data is written. For each of the 10 data elements, a length and data buffer must be allocated. Below the two examples is a figure that shows how the data is laid out in memory. </p>
 <p class="FM__Body"><a name="IX_H5Dvlen_reclaim_5"></a><a name="IX_H5Pset_vlen_mem_manager_2"></a><a name="IX_H5Dvlen_reclaim_4"></a><a name="IX_vl_t"></a>An analogous procedure must be used to read the data. See the second example below. An appropriate array of <span class="FM_Code">vl_t</span>&#160;must be allocated, and the data read. It is then traversed one data element at a time. The <span class="FM_Code">H5Dvlen_reclaim</span>&#160;call frees the data buffer for the buffer. With each element possibly being of different sequence lengths for a dataset with a VL datatype, the memory for the VL datatype must be dynamically allocated. Currently there are two methods of managing the memory for VL datatypes: the standard C malloc/free memory allocation routines or a method of calling user-defined memory management rou&#173;tines to allocate or free memory (set with <span class="FM_Code">H5Pset_vlen_mem_manager</span>). Since the memory allocated when reading (or writing) may be complicated to release, the <span class="FM_Code">H5Dvlen_reclaim</span>&#160;function is provided to traverse a memory buffer and free the VL datatype information without leaking memory.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-28. Write VL data</caption>
  <tr style=" height : 165.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">hvl_t wdata[10]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Information to write */</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">/* Allocate and initialize VL data to write */</p>
  <p class="FM__BodyCellCode">for(i=0; i &lt; 10; i++) {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>wdata[i].p = malloc((i+1)*sizeof(unsigned int));</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>wdata[i].len = i+1;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>for(j=0; j&lt;(i+1); j++)</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>((unsigned int *)wdata[i].p)[j]=i*10+j;</p>
  <p class="FM__BodyCellCode">}</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dwrite_24"></a>ret=H5Dwrite(dataset, tid1, H5S_ALL, H5S_ALL, H5P_DEFAULT, </p>
  <p class="FM__BodyCellCodeIndent">wdata);</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-29. Read VL data</caption>
  <tr style=" height : 139.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">hvl_t rdata[SPACE1_DIM1]; &#160;&#160;&#160;&#160;&#160;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dread_24"></a>ret=H5Dread(dataset, tid1, H5S_ALL, H5S_ALL, xfer_pid, rdata);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">for(i=0; i&lt;SPACE1_DIM1; i++) {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>printf(“%d: len %d ”,rdata[i].len);</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>for(j=0; j&lt;rdata[i].len; j++) {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>printf(“ value: %u\n”,((unsigned int *)rdata[i].p)[j]);</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM__BodyCellCode">} </p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dvlen_reclaim_6"></a>ret=H5Dvlen_reclaim(tid1, sid1, xfer_pid, rdata);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-15. Memory layout of a VL datatype</caption>
  <tr style=" height : 412.70pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig33.JPG" id="image17" src="Dtypes_fig33.JPG" style="width:100%; max-width:524px" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><a name="IX_vl_t_1"></a><a name="IX_free"></a><a name="IX_H5Dvlen_reclaim_7"></a>The user program must carefully manage these relatively complex data structures. The <span class="FM_Code">H5Dvlen_re&#173;claim</span>&#160;function performs a standard traversal, freeing all the data. This function analyzes the datatype and dataspace objects, and visits each VL data element, recursing through nested types. By default, the system <span class="FM_Code">free</span>&#160;is called for the pointer in each <span class="FM_Code">vl_t</span>. Obviously, this call assumes that all of this memory was allocated with the system <span class="FM_Code">malloc</span>.</p>
 <p class="FM__Body"><a name="IX_H5Pvlen_mem_manager"></a>The user program may specify custom memory manager routines, one for allocating and one for freeing. These may be set with the <span class="FM_Code">H5Pvlen_mem_manager</span>, and must have the following prototypes: </p>
 <p class="FM__ListBullets_Level1" style="margin-top  : 3.000pt; font-family : Courier New; font-size  : 10.0pt;">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">typedef void *(*H5MM_allocate_t)(size_t size, void *info); </span></p>
 <p class="FM__ListBullets_Level1" style="margin-top  : 3.000pt; font-family : Courier New; font-size  : 10.0pt;">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_Code">typedef void (*H5MM_free_t)(void *mem, void *free_info); </span></p>
 <p class="FM__Body"><a name="IX_H5Dget_vlen_buf_size_1"></a>The utility function <span class="FM_Code">H5Dget_vlen_buf_size</span>&#160;checks the number of bytes required to store the VL data from the dataset. This function analyzes the datatype and dataspace object to visit all the VL data ele&#173;ments, to determine the number of bytes required to store the data for the in the destination storage (memory). The <span class="FM_Code">size</span> value is adjusted for data conversion and alignment in the destination.</p>
 <p class="FM__Heading_Level2"><a name="TOC_6_6_Other_Non_numeric"></a>6.6. Other Non-numeri<a name="XREF_NonNumDtypes"></a>c Datatypes</p>
 <p class="FM__Body">Several datatype classes define special types of objects. </p>
 <p class="FM__Heading_Level3"><a name="TOC_6_6_1_Strings"></a>6.6.1. Strings</p>
 <p class="FM__Body">Text data is represented by arrays of characters, called strings. Many programming languages support dif&#173;ferent conventions for storing strings, which may be fixed or variable-length, and may have different rules for padding unused storage. HDF5 can represent strings in several ways. See the figure below.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:450.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-16. A string stored as one-character elements in a one-dimensional array</caption>
  <tr style=" height : 15.00pt;">
  <td style="width : 450.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">The strings to store are “Four score” and “lazy programmers.”</p>
</td>
</tr>
  <tr style=" height : 28.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5T_NATIVE_CHAR_1"></a>a) <span class="FM_Code">H5T_NATIVE_CHAR</span>: The dataset is a one-dimensional array with 29 elements, and each element is a single character.</p>
</td>
</tr>
  <tr style=" height : 61.85pt;">
  <td style="width : 450.000pt; ">
  <div align="center"><img alt="Dtypes_fig16a.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:1.500pt; margin-bottom:0.750pt; width:100%; max-width:520px;" id="image18" src="Dtypes_fig16a.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 28.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">b) Fixed-length string: The dataset is a one-dimensional array with two elements, and each element is 20 characters.</p>
</td>
</tr>
  <tr style=" height : 72.79pt;">
  <td style="width : 450.000pt; ">
  <div align="center"><img alt="Dtypes_fig16b.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:1.500pt; width:100%; max-width:235px;" id="image19" src="Dtypes_fig16b.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 41.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">c) Variable-length string: The dataset is a one-dimensional array with two elements, and each ele&#173;ment is a variable-length string. This is the same result when stored as a fixed-length string except that the first element of the array will need only 11 bytes for storage instead of 20.</p>
</td>
</tr>
  <tr style=" height : 65.14pt;">
  <td style="width : 450.000pt; ">
  <div align="center"><img alt="Dtypes_fig16c.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:1.500pt; width:100%; max-width:235px;" id="image20" src="Dtypes_fig16c.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 111.89pt;">
  <td style="width : 450.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig16d.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:1.500pt; width:100%; max-width:239px;" id="image21" src="Dtypes_fig16d.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body"><a name="IX_H5T_NATIVE_CHAR_2"></a>First, a dataset may have a dataset with datatype <span class="FM_Code">H5T_NATIVE_CHAR</span>&#160;with each character of the string as an element of the dataset. This will store an unstructured block of text data, but gives little indication of any structure in the text. See item a in the figure above. </p>
 <p class="FM__Body"><a name="IX_H5T_STRING_2"></a>A second alternative is to store the data using the datatype class <span class="FM_Code">H5T_STRING</span>&#160;with each element a fixed length. See item b in the figure above. In this approach, each element might be a word or a sentence, addressed by the dataspace. The dataset reserves space for the specified number of characters, although some strings may be shorter. This approach is simple and usually is fast to access, but can waste storage space if the length of the Strings varies.</p>
 <p class="FM__Body"><a name="IX_vl_t_2"></a>A third alternative is to use a variable-length datatype. See item c in the figure above. This can be done using the standard mechanisms described above. The program would use <span class="FM_Code">vl_t</span>&#160;structures to write and read the data.</p>
 <p class="FM__Body"><a name="IX_H5T_VARIABLE_2"></a><a name="IX_vl_t_3"></a><a name="IX_H5T_VARIABLE_1"></a><a name="IX_H5T_C_S1_2"></a><a name="IX_H5T_VARIABLE"></a>A fourth alternative is to use a special feature of the string datatype class to set the size of the datatype to <span class="FM_Code">H5T_VARIABLE</span>. See item c in the figure above. The example below shows a declaration of a datatype of type <span class="FM_Code">H5T_C_S1</span>&#160;which is set to <span class="FM_Code">H5T_VARIABLE</span>. The HDF5 Library automatically translates between this and the <span class="FM_Code">vl_t</span>&#160;structure. Note: the <span class="FM_Code">H5T_VARIABLE</span> size can only be used with string datatypes.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-30. Set the string datatype size to H5T_VARIABLE</caption>
  <tr style=" height : 48.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcopy_24"></a>tid1 = H5Tcopy (H5T_C_S1); </p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_VARIABLE_3"></a><a name="IX_H5Tset_size_4"></a>ret = H5Tset_size (tid1, H5T_VARIABLE);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">Variable-length strings can be read into C strings (in other words, pointers to zero terminated arrays of <span class="FM_Code">char</span>). See the example below.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-31. Read variable-length strings into C strings</caption>
  <tr style=" height : 139.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">char *rdata[SPACE1_DIM1]; &#160;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dread_25"></a>ret=H5Dread(dataset, tid1, H5S_ALL, H5S_ALL, xfer_pid, rdata);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">for(i=0; i&lt;SPACE1_DIM1; i++) { &#160;&#160;</p>
  <p class="FM__BodyCellCodeIndent">printf(“%d: len: %d, str is: %s\n”, i, strlen(rdata[i]), </p>
  <p class="FM__BodyCellCodeIndent">rdata[i]);</p>
  <p class="FM__BodyCellCode">} </p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dvlen_reclaim_8"></a>ret=H5Dvlen_reclaim(tid1, sid1, xfer_pid, rdata);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level3"><a name="TOC_6_6_2_Reference"></a>6.6.2. Refere<a name="XREF_reference"></a>nce</p>
 <p class="FM__Body"><a name="IX_H5Rcreate"></a>In HDF5, objects (groups, datasets, and committed datatypes) are usually accessed by name. There is another way to access stored objects - by reference. There are two reference datatypes: object reference and region reference. Object reference objects are created with <span class="FM_Code">H5Rcreate</span> and other calls (cross refer&#173;ence). These objects can be stored and retrieved in a dataset as elements with reference datatype. The first example below shows an example of code that creates references to four objects, and then writes the array of object references to a dataset. The second example below shows a dataset of datatype reference being read and one of the reference objects being dereferenced to obtain an object pointer.</p>
 <p class="FM__Body"><a name="IX_H5T_REGION_OBJ"></a>In order to store references to regions of a dataset, the datatype should be <span class="FM_Code">H5T_REGION_OBJ</span>. Note that a data element must be either an object reference or a region reference: these are different types and cannot be mixed within a single array.</p>
 <p class="FM__Body">A reference datatype cannot be divided for I/O: an element is read or written completely.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-32. Create object references and write to a dataset</caption>
  <tr style=" height : 100.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_STD_REF_OBJ"></a><a name="IX_H5Dcreate_20"></a>dataset=H5Dcreate(fid1, “Dataset3”, H5T_STD_REF_OBJ, sid1,</p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/* Create reference to dataset */</p>
  <p class="FM__BodyCellCode"><a name="IX_H5R_OBJECT_1"></a><a name="IX_H5Rcreate_1"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ret = H5Rcreate(&amp;wbuf[0], fid1,“/Group1/Dataset1”, H5R_OBJECT, </p>
  <p class="FM__BodyCellCodeIndent">-1);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 100.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/* Create reference to dataset */</p>
  <p class="FM__BodyCellCode"><a name="IX_H5R_OBJECT_2"></a><a name="IX_H5Rcreate_2"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ret = H5Rcreate(&amp;wbuf[1], fid1, “/Group1/Dataset2”, H5R_OBJECT, </p>
  <p class="FM__BodyCellCodeIndent">-1);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/* Create reference to group */</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ret = H5Rcreate(&amp;wbuf[2], fid1, “/Group1”, H5R_OBJECT, -1);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 113.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/* Create reference to committed datatype */</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ret = H5Rcreate(&amp;wbuf[3], fid1, “/Group1/Datatype1”, </p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5R_OBJECT, -1);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/* Write selection to disk */</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_STD_REF_OBJ_1"></a><a name="IX_H5Dwrite_25"></a>ret=H5Dwrite(dataset, H5T_STD_REF_OBJ, H5S_ALL, H5S_ALL, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, wbuf);</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-33. Read a dataset with a reference datatype</caption>
  <tr style=" height : 113.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">rbuf = malloc(sizeof(hobj_ref_t)*SPACE1_DIM1);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">/* Read selection from disk */</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_STD_REF_OBJ_2"></a><a name="IX_H5Dread_26"></a>ret=H5Dread(dataset, H5T_STD_REF_OBJ, H5S_ALL, H5S_ALL, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, rbuf);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">/* Open dataset object */</p>
  <p class="FM__BodyCellCode"><a name="IX_H5R_OBJECT_3"></a><a name="IX_H5Rdereference_1"></a>dset2 = H5Rdereference(dataset, H5R_OBJECT, &amp;rbuf[0]);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level3"><a name="TOC_6_6_3_ENUM"></a>6.6.3. ENUM</p>
 <p class="FM__Body">The enum datatype implements a set of (name, value) pairs, similar to C/C++ enum. The values are cur&#173;rently limited to native integer datatypes. Each name can be the name of only one value, and each value can have only one name.</p>
 <p class="FM__Body">The data elements of the ENUMERATION are stored according to the datatype. An example would be as an array of integers. The example below shows an example of how to create an enumeration with five ele&#173;ments. The elements map symbolic names to 2-byte integers. See the table below.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-34. Create an enumeration with five elements</caption>
  <tr style=" height : 139.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_ENUM_3"></a><a name="IX_H5Tcreate_16"></a>hid_t hdf_en_colors = H5Tcreate(H5T_ENUM, sizeof(short));</p>
  <p class="FM__BodyCellCode">short val;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tenum_insert_1"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5Tenum_insert(hdf_en_colors, “RED”, (val=0,&amp;val));</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5Tenum_insert(hdf_en_colors, “GREEN”, (val=1,&amp;val));</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5Tenum_insert(hdf_en_colors, “BLUE”, (val=2,&amp;val));</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5Tenum_insert(hdf_en_colors, “WHITE”, (val=3,&amp;val));</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5Tenum_insert(hdf_en_colors, “BLACK”, (val=4,&amp;val));</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dcreate_21"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5Dcreate(fileid, datasetname, hdf_en_colors, spaceid, </p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:252.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-22. An enumeration with five elements</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 126.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Name</p>
</th>
  <th style="width : 126.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Value</p>
</th>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 126.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">RED</p>
</td>
  <td style="width : 126.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">0</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 126.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">GREEN</p>
</td>
  <td style="width : 126.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">1</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 126.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">BLUE</p>
</td>
  <td style="width : 126.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">2</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 126.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">WHITE</p>
</td>
  <td style="width : 126.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">3</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 126.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">BLACK</p>
</td>
  <td style="width : 126.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">4</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">The figure below shows how an array of eight values might be stored. Conceptually, the array is an array of symbolic names [BLACK, RED, WHITE, BLUE, ...]. See item a in the figure below. These are stored as the val&#173;ues and are short integers. So, the first 2 bytes are the value associated with “BLACK”, which is the number 4, and so on. See item b in the figure below. </p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:396.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-17. Storing an enum array</caption>
  <tr style=" height : 15.00pt;">
  <td style="width : 396.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">a) Logical data to be written - eight elements</p>
</td>
</tr>
  <tr style=" height : 189.27pt;">
  <td style="width : 396.000pt; ">
  <div align="center"><img alt="Dtypes_fig17a.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:183px;" id="image22" src="Dtypes_fig17a.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 150.48pt;">
  <td style="width : 396.000pt; ">
  <div align="center"><img alt="Dtypes_fig40.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:461px;" id="image23" src="Dtypes_fig40.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 15.00pt;">
  <td style="width : 396.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">b) The storage layout. Total size of the array is 16 bytes, 2 bytes per element.</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><a name="IX_H5Tequal_3"></a>The order that members are inserted into an enumeration type is unimportant; the important part is the associations between the symbol names and the values. Thus, two enumeration datatypes will be consid&#173;ered equal if and only if both types have the same symbol/value associations and both have equal under&#173;lying integer datatypes. Type equality is tested with the <span class="FM_Code">H5Tequal</span> function.</p>
 <p class="FM__Body"><a name="IX_H5Tconvert_1"></a>If a particular architecture type is required, a little-endian or big-endian datatype for example, use a native integer datatype as the ENUM base datatype and use <span class="FM_Code">H5Tconvert</span>&#160;on values as they are read from or written to a dataset. </p>
 <p class="FM__Heading_Level3"><a name="TOC_6_6_4_Opaque"></a>6.6.4. Opaque</p>
 <p class="FM__Body">In some cases, a user may have data objects that should be stored and retrieved as blobs with no attempt to interpret them. For example, an application might wish to store an array of encrypted certificates which are 100 bytes long.</p>
 <p class="FM__Body"><a name="IX_H5Tset_tag_1"></a>While an arbitrary block of data may always be stored as bytes, characters, integers, or whatever, this might mislead programs about the meaning of the data. The opaque datatype defines data elements which are uninterpreted by HDF5. The opaque data may be labeled with <span class="FM_Code">H5Tset_tag</span>&#160;with a string that might be used by an application. For example, the encrypted certificates might have a tag to indicate the encryption and the certificate standard.</p>
 <p class="FM__Heading_Level3"><a name="TOC_6_6_5_Bitfield"></a>6.6.5. Bitfield</p>
 <p class="FM__Body">Some data is represented as bits, where the number of bits is not an integral byte and the bits are not nec&#173;essarily interpreted as a standard type. Some examples might include readings from machine registers (for example, switch positions), a cloud mask, or data structures with several small integers that should be store in a single byte.</p>
 <p class="FM__Body">This data could be stored as integers, strings, or enumerations. However, these storage methods would likely result in considerable wasted space. For example, storing a cloud mask with one byte per value would use up to eight times the space of a packed array of bits.</p>
 <p class="FM__Body">The HDF5 bitfield datatype class defines a data element that is a contiguous sequence of bits, which are stored on disk in a packed array. The programming model is the same as for unsigned integers: the data&#173;type object is created by copying a predefined datatype, and then the precision, offset, and padding are set.</p>
 <p class="FM__Body">While the use of the bitfield datatype will reduce storage space substantially, there will still be wasted space if the bitfield as a whole does not match the 1-, 2-, 4-, or 8-byte unit in which it is written. The remaining unused space can be removed by applying the N-bit filter to the dataset containing the bitfield data. <a href="../Datasets/HDF5_Datasets.htm#XREF_N_Bit">For more information, see &quot;Using the N-bit Filter.&quot;</a></p>
 <p class="FM__Heading_Level2"><a name="TOC_6_7_Fill_Values"></a>6.7. Fill Value<a name="XREF_Fvalues"></a>s</p>
 <p class="FM__Body">The “fill value” for a dataset is the specification of the default value assigned to data elements that have not yet been written. In the case of a dataset with an atomic datatype, the fill value is a single value of the appropriate datatype, such as ‘0’ or ‘-1.0’. In the case of a dataset with a composite datatype, the fill value is a single data element of the appropriate type. For example, for an array or compound datatype, the fill value is a single data element with values for all the component elements of the array or compound data&#173;type.</p>
 <p class="FM__Body"><a name="IX_H5Dcreate_23"></a><a name="IX_H5Dcreate_22"></a>The fill value is set (permanently) when the dataset is created. The fill value is set in the dataset creation properties in the <span class="FM_Code">H5Dcreate</span>&#160;call. Note that the <span class="FM_Code">H5Dcreate</span>&#160;call must also include the datatype of the dataset, and the value provided for the fill value will be interpreted as a single element of this datatype. The example below shows code which creates a dataset of integers with fill value -1. Any unwritten data elements will be set to -1.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-35. Create a dataset wi<a name="XREF_CreateADatasetWithAFillVa"></a>th a fill value of -1</caption>
  <tr style=" height : 139.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">hid_t &#160;&#160;&#160;&#160;&#160;&#160;plist_id; &#160;</p>
  <p class="FM__BodyCellCode">int filler;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">filler = -1;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5P_DATASET_CREATE_10"></a><a name="IX_H5Pcreate_17"></a>plist_id = H5Pcreate(H5P_DATASET_CREATE);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Pset_fill_value_3"></a>H5Pset_fill_value(plist_id, H5T_NATIVE_INT, &amp;filler);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">/* Create the dataset with fill value ‘-1’. */</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_STD_I32BE_2"></a><a name="IX_H5Dcreate_24"></a>dataset_id = H5Dcreate(file_id, “/dset”, H5T_STD_I32BE, </p>
  <p class="FM__BodyCellCodeIndent">dataspace_id, H5P_DEFAULT, plist_id, H5P_DEFAULT);</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-36. Create a fill value for a compound datatype</caption>
  <tr style=" height : 100.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct s1_t {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>int a;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>char b;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>double c; </p>
  <p class="FM__BodyCellCode">} s1_t;</p>
  <p class="FM__BodyCellCode">s1_t filler;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 165.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_COMPOUND_12"></a><a name="IX_H5Tcreate_17"></a>s1_tid = H5Tcreate (H5T_COMPOUND, sizeof(s1_t));</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tinsert_11"></a>H5Tinsert(s1_tid, “a_name”, HOFFSET(s1_t, a), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_INT);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s1_tid, “b_name”, HOFFSET(s1_t, b), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_CHAR);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s1_tid, “c_name”, HOFFSET(s1_t, c), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">filler.a = -1;</p>
  <p class="FM__BodyCellCode">filler.b = ‘*’;</p>
  <p class="FM__BodyCellCode">filler.c = -2.0;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 100.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5P_DATASET_CREATE_11"></a><a name="IX_H5Pcreate_18"></a>plist_id = H5Pcreate(H5P_DATASET_CREATE);</p>
  <p class="FM__BodyCellCode">H5Pset_fill_value(plist_id, s1_tid, &amp;filler);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">/* Create the dataset with fill value */</p>
  <p class="FM__BodyCellCode">/* (-1, ‘*’, -2.0). */</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dcreate_25"></a>dataset = H5Dcreate(file, datasetname, s1_tid, space, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, plist_id, H5P_DEFAULT);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">The figure above shows how to create a fill value for a compound datatype. The procedure is the same as the previous example except the filler must be a structure with the correct fields. Each field is initialized to the desired fill value.</p>
 <p class="FM__Body"><a name="IX_H5Dread_27"></a><a name="IX_H5Pget_fill_value_1"></a>The fill value for a dataset can be retrieved by reading the dataset creation properties of the dataset and then by reading the fill value with <span class="FM_Code">H5Pget_fill_value</span>. The data will be read into memory using the storage layout specified by the datatype. This transfer will convert data in the same way as <span class="FM_Code">H5Dread</span>. The example below shows how to get the fill value from the dataset created in the example <a href="#XREF_CreateADatasetWithAFillVa">&quot;Create a dataset with a fill value of -1&quot;</a>.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-37. Retrieve a fill value</caption>
  <tr style=" height : 126.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">hid_t plist2;</p>
  <p class="FM__BodyCellCode">int filler;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dopen_20"></a>dataset_id = H5Dopen(file_id, “/dset”, H5P_DEFAULT);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dget_create_plist_2"></a>plist2 = H5Dget_create_plist(dataset_id);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Pget_fill_value_2"></a>H5Pget_fill_value(plist2, H5T_NATIVE_INT, &amp;filler);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">/* filler has the fill value, ‘-1’ */</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><a name="IX_H5Pget_fill_value_3"></a>A similar procedure is followed for any datatype. The example below shows how to read the fill value for the compound datatype created in an example above. Note that the program must pass an element large enough to hold a fill value of the datatype indicated by the argument to <span class="FM_Code">H5Pget_fill_value</span>. Also, the program must understand the datatype in order to interpret its components. This may be difficult to determine without knowledge of the application that created the dataset.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-38. Read the fill value for a compound datatype</caption>
  <tr style=" height : 74.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">char * &#160;&#160;&#160;&#160;&#160;&#160;fillbuf;</p>
  <p class="FM__BodyCellCode">int sz;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dopen_21"></a>dataset = H5Dopen( file, DATASETNAME, H5P_DEFAULT);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dget_type_6"></a>s1_tid = H5Dget_type(dataset);</p>
</td>
</tr>
  <tr style=" height : 87.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">sz = H5Tget_size(s1_tid);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">fillbuf = (char *)malloc(sz);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dget_create_plist_3"></a>plist_id = H5Dget_create_plist(dataset);</p>
</td>
</tr>
  <tr style=" height : 87.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">H5Pget_fill_value(plist_id, s1_tid, fillbuf);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">printf(“filler.a: %d\n”,((s1_t *) fillbuf)-&gt;a);</p>
  <p class="FM__BodyCellCode">printf(“filler.b: %c\n”,((s1_t *) fillbuf)-&gt;b);</p>
  <p class="FM__BodyCellCode">printf(“filler.c: %f\n”,((s1_t *) fillbuf)-&gt;c);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level2"><a name="TOC_6_8_Complex_Combinations"></a>6.8. Complex Combinati<a name="XREF_CCDtypes"></a>ons of Datatypes</p>
 <p class="FM__Body">Several composite datatype classes define collections of other datatypes, including other composite data&#173;types. In general, a datatype can be nested to any depth, with any combination of datatypes.</p>
 <p class="FM__Body">For example, a compound datatype can have members that are other compound datatypes, arrays, VL datatypes. An array can be an array of array, an array of compound, or an array of VL. And a VL datatype can be a variable-length array of compound, array, or VL datatypes.</p>
 <p class="FM__Body">These complicated combinations of datatypes form a logical tree, with a single root datatype, and leaves which must be atomic datatypes (predefined or user-defined). The figure below shows an example of a logical tree describing a compound datatype constructed from different datatypes.</p>
 <p class="FM__Body">Recall that the datatype is a description of the layout of storage. The complicated compound datatype is constructed from component datatypes, each of which describe the layout of part of the storage. Any datatype can be used as a component of a compound datatype, with the following restrictions:</p>
 <p class="FM__ListNumbered1_Level1">1.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>No byte can be part of more than one component datatype (in other words, the fields cannot overlap within the compound datatype)</p>
 <p class="FM__ListNumbered_Level1">2.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>The total size of the components must be less than or equal to the total size of the compound datatype</p>
 <p class="FM__Body">These restrictions are essentially the rules for C structures and similar record types familiar from program&#173;ming languages. Multiple typing, such as a C union, is not allowed in HDF5 datatypes.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-18. A compound datatype built with different datatypes</caption>
  <tr style=" height : 251.78pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig45.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:468px;" id="image24" src="Dtypes_fig45.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level3"><a name="TOC_6_8_1_Creating_a"></a>6.8.1. Creating a Complicated Compound Datatype</p>
 <p class="FM__Body">To construct a complicated compound datatype, each component is constructed, and then added to the enclosing datatype description. The example below shows how to create a compound datatype with four members:</p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>“T1”, a compound datatype with three members</p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>“T2”, a compound datatype with two members</p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>“T3”, a one-dimensional array of integers</p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>“T4”, a string</p>
 <p class="FM__Body">Below the example code is a figure that shows this datatype as a logical tree. The output of the <span class="FM_Code">h5dump</span>&#160;utility is shown in the example below the figure. </p>
 <p class="FM__Body">Each datatype is created as a separate datatype object. Figure 20 below shows the storage layout for the four individual datatypes. Then the datatypes are inserted into the outer datatype at an appropriate off&#173;set. Figure 21 below shows the resulting storage layout. The combined record is 89 bytes long.</p>
 <p class="FM__Body">The Dataset is created using the combined compound datatype. The dataset is declared to be a 4 by 3 array of compound data. Each data element is an instance of the 89-byte compound datatype. Figure 22 below shows the layout of the dataset, and expands one of the elements to show the relative position of the component data elements.</p>
 <p class="FM__Body">Each data element is a compound datatype, which can be written or read as a record, or each field may be read or written individually. The first field (“T1”) is itself a compound datatype with three fields (“T1.a”, “T1.b”, and “T1.c”). “T1” can be read or written as a record, or individual fields can be accessed. Similarly, the second filed is a compound datatype with two fields (“T2.f1”, “T2.f2”).</p>
 <p class="FM__Body">The third field (“T3”) is an array datatype. Thus, “T3” should be accessed as an array of 40 integers. Array data can only be read or written as a single element, so all 40 integers must be read or written to the third field. The fourth field (“T4”) is a single string of length 25.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-39. Create a compound datatype with four members</caption>
  <tr style=" height : 87.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct s1_t {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>int a;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>char b;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>double c; </p>
  <p class="FM__BodyCellCode">} s1_t;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 87.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct s2_t {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>float f1;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>float f2;</p>
  <p class="FM__BodyCellCode">} s2_t;</p>
  <p class="FM__BodyCellCode">hid_t &#160;&#160;&#160;&#160;&#160;s1_tid, s2_tid, s3_tid, s4_tid, s5_tid;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 126.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">/* Create a datatype for s1 */</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_COMPOUND_13"></a><a name="IX_H5Tcreate_18"></a>s1_tid = H5Tcreate (H5T_COMPOUND, sizeof(s1_t));</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tinsert_12"></a>H5Tinsert(s1_tid, “a_name”, HOFFSET(s1_t, a), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_INT);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s1_tid, “b_name”, HOFFSET(s1_t, b), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_CHAR);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s1_tid, “c_name”, HOFFSET(s1_t, c), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 100.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">/* Create a datatype for s2. *.</p>
  <p class="FM__BodyCellCode">s2_tid = H5Tcreate (H5T_COMPOUND, sizeof(s2_t));</p>
  <p class="FM__BodyCellCode">H5Tinsert(s2_tid, “f1”, HOFFSET(s2_t, f1), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_FLOAT);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s2_tid, “f2”, HOFFSET(s2_t, f2), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_FLOAT);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 87.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">/* Create a datatype for an Array of integers */</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tarray_create_4"></a>s3_tid = H5Tarray_create(H5T_NATIVE_INT, RANK, dim);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">/* Create a datatype for a String of 25 characters */</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_C_S1_3"></a><a name="IX_H5Tcopy_25"></a>s4_tid = H5Tcopy(H5T_C_S1);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tset_size_5"></a>H5Tset_size(s4_tid, 25);</p>
</td>
</tr>
  <tr style=" height : 126.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">/* </p>
  <p class="FM__BodyCellCode">* Create a compound datatype composed of one of each of </p>
  <p class="FM__BodyCellCode">* these types. The total size is the sum of the size of </p>
  <p class="FM__BodyCellCode">* each.</p>
  <p class="FM__BodyCellCode">*/ </p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">sz = H5Tget_size(s1_tid) + H5Tget_size(s2_tid) + </p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5Tget_size(s3_tid) + H5Tget_size(s4_tid);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 74.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_COMPOUND_14"></a><a name="IX_H5Tcreate_19"></a>s5_tid = H5Tcreate (H5T_COMPOUND, sz);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">/* Insert the component types at the appropriate */</p>
  <p class="FM__BodyCellCode">* offsets. </p>
  <p class="FM__BodyCellCode">*/</p>
</td>
</tr>
  <tr style=" height : 87.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tinsert_13"></a>H5Tinsert(s5_tid, “T1”, 0, s1_tid);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s5_tid, “T2”, sizeof(s1_t), s2_tid);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s5_tid, “T3”, sizeof(s1_t)+sizeof(s2_t), s3_tid);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s5_tid, “T4”, (sizeof(s1_t) +sizeof(s2_t)+ </p>
  <p class="FM__BodyCellCodeIndent">H5Tget_size(s3_tid)), s4_tid);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 74.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">/* </p>
  <p class="FM__BodyCellCode">* Create the dataset with this datatype.</p>
  <p class="FM__BodyCellCode">*/</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dcreate_26"></a>dataset = H5Dcreate(file, DATASETNAME, s5_tid, space, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-19. Logical tree for the compound datatype with four members</caption>
  <tr style=" height : 272.38pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig47.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:1.500pt; width:100%; max-width:504px;" id="image25" src="Dtypes_fig47.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-40. Output from h5dump for the compound datatype</caption>
  <tr style=" height : 139.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">DATATYPE &#160;H5T_COMPOUND {</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_COMPOUND_15"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_COMPOUND {</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_STD_I32LE_2"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_STD_I32LE “a_name”;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_STD_I8LE"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_STD_I8LE “b_name”;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_IEEE_F64LE_1"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_IEEE_F64LE “c_name”;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>} “T1”;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_COMPOUND {</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_IEEE_F32LE_1"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_IEEE_F32LE “f1”;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_IEEE_F32LE “f2”;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>} “T2”;</p>
</td>
</tr>
  <tr style=" height : 113.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_ARRAY_3"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_ARRAY { [10] H5T_STD_I32LE } “T3”;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_STRING_3"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_STRING {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>STRSIZE 25;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>STRPAD H5T_STR_NULLTERM;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_CSET_ASCII_2"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>CSET H5T_CSET_ASCII;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_C_S1_4"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>CTYPE H5T_C_S1;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>} “T4”;</p>
  <p class="FM__BodyCellCode">}</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:450.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-20. The storage layout for the four member datatypes</caption>
  <tr style=" height : 15.00pt;">
  <td style="width : 450.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">a) Compound type ‘s1_t’, size 16 bytes.</p>
</td>
</tr>
  <tr style=" height : 145.51pt;">
  <td style="width : 450.000pt; ">
  <div align="center"><img alt="Dtypes_fig20a.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:1.500pt; width:100%; max-width:549px;" id="image26" src="Dtypes_fig20a.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 15.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">b) Compound type ‘s2_t’, size 8 bytes.</p>
</td>
</tr>
  <tr style=" height : 84.46pt;">
  <td style="width : 450.000pt; ">
  <div align="center"><img alt="Dtypes_fig20b.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:547px;" id="image27" src="Dtypes_fig20b.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 15.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">c) Array type ‘s3_tid’, 40 integers, total size 40 bytes.</p>
</td>
</tr>
  <tr style=" height : 147.53pt;">
  <td style="width : 450.000pt; ">
  <div align="center"><img alt="Dtypes_fig20c.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:547px;" id="image28" src="Dtypes_fig20c.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 15.00pt;">
  <td style="width : 450.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">d) String type ‘s4_tid’, size 25 bytes.</p>
</td>
</tr>
  <tr style=" height : 118.08pt;">
  <td style="width : 450.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig20d.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:548px;" id="image29" src="Dtypes_fig20d.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-21. The storage layout of the combined four members</caption>
  <tr style=" height : 431.42pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig50.JPG" id="image30" src="Dtypes_fig50.JPG" style="width:100%; max-width:539px" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-22. The layout of the dataset</caption>
  <tr style=" height : 15.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">a) A 4 x 3 array of Compound Datatype</p>
</td>
</tr>
  <tr style=" height : 256.54pt;">
  <td style="width : 432.000pt; ">
  <div align="center"><img alt="dtypes_fig51new.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:1.500pt; margin-bottom:1.500pt; width:100%; max-width:489px;" id="image31" src="dtypes_fig51new.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 15.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">b) Element [1,1] expanded</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level3"><a name="TOC_6_8_2_Analyzing_and"></a>6.8.2. Analyzing and Navigating a Compound Datatype</p>
 <p class="FM__Body">A complicated compound datatype can be analyzed piece by piece to discover the exact storage layout. In the example above, the outer datatype is analyzed to discover that it is a compound datatype with four members. Each member is analyzed in turn to construct a complete map of the storage layout.</p>
 <p class="FM__Body">The example below shows an example of code that partially analyzes a nested compound datatype. The name and overall offset and size of the component datatype is discovered, and then its type is analyzed depending on the datatype class. Through this method, the complete storage layout can be discovered.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-41. Analyzing a compound datatype and its members</caption>
  <tr style=" height : 35.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Dget_type_7"></a>s1_tid = H5Dget_type(dataset);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 87.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_COMPOUND_16"></a><a name="IX_H5Tget_class_2"></a>if (H5Tget_class(s1_tid) == H5T_COMPOUND) {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>printf(“COMPOUND DATATYPE {\n”);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_size_3"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>sz = H5Tget_size(s1_tid);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_nmembers_4"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>nmemb = H5Tget_nmembers(s1_tid);</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>printf(“  %d bytes\n”,sz);</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>printf(“  %d members\n”,nmemb);</p>
</td>
</tr>
  <tr style=" height : 74.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>for (i =0; i &lt; nmemb; i++) {</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_member_type_3"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>s2_tid = H5Tget_member_type(s1_tid, i);</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if (H5Tget_class(s2_tid) == H5T_COMPOUND) {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/* recursively analyze the nested type. */</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 139.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_ARRAY_4"></a><a name="IX_H5Tget_class_3"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>} else if (H5Tget_class(s2_tid) == H5T_ARRAY) {</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_size_4"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>sz2 = H5Tget_size(s2_tid);</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>printf(“ &#160;%s: NESTED ARRAY DATATYPE offset %d size %d &#160;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{\n”,</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_member_name_4"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5Tget_member_name(s1_tid, i),</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_member_offset_2"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5Tget_member_offset(s1_tid, i),</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>sz2);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_array_dims_2"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5Tget_array_dims(s2_tid, dim);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tget_super_3"></a><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>s3_tid = H5Tget_super(s2_tid);</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/* Etc., analyze the base type of the array */</p>
</td>
</tr>
  <tr style=" height : 126.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>} else {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/* analyze a simple type */</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>printf(“    %s: type code %d offset %d size %d\n”,</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5Tget_member_name(s1_tid, i),</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5Tget_class(s2_tid),</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5Tget_member_offset(s1_tid, i),</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5Tget_size(s2_tid));</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/* and so on…. */</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level2"><a name="TOC_6_9_Life_Cycle_of_the"></a>6.9. Life Cycle of the Dataty<a name="XREF_LCDtypeObj"></a>pe Object</p>
 <p class="FM__Body"><a name="IX_transient"></a>Application programs access HDF5 datatypes through identifiers. Identifiers are obtained by creating a new datatype or by copying or opening an existing datatype. The identifier can be used until it is closed or until the library shuts down. See items a and b in the figure below. By default, a datatype is <span class="FM_EI_EmphasisItalic">transient</span>, and it disappears when it is closed. </p>
 <p class="FM__Body"><a name="IX_H5Tget_member_type_4"></a><a name="IX_H5Tget_super_4"></a><a name="IX_H5Aget_type_1"></a><a name="IX_H5Dget_type_8"></a><a name="IX_H5Acreate_4"></a><a name="IX_H5Dcreate_27"></a>When a dataset or attribute is created (<span class="FM_Code">H5Dcreate</span>&#160;or <span class="FM_Code">H5Acreate</span>), its datatype is stored in the HDF5 file as part of the dataset or attribute object. See item c in the figure below. Once an object created, its data&#173;type cannot be changed or deleted. The datatype can be accessed by calling <span class="FM_Code">H5Dget_type</span>, <span class="FM_Code">H5Aget_&#173;type</span>, <span class="FM_Code">H5Tget_super</span>, or <span class="FM_Code">H5Tget_member_type</span>. See item d in the figure below. These calls return an identifier to a <span class="FM_EI_EmphasisItalic">transient</span>&#160;copy of the datatype of the dataset or attribute unless the datatype is a committed datatype. </p>
 <p class="FM__Body">Note that when an object is created, the stored datatype is a copy of the transient datatype. If two objects are created with the same datatype, the information is stored in each object with the same effect as if two different datatypes were created and used. </p>
 <p class="FM__Body"><a name="IX_H5Tcopy_26"></a><a name="IX_H5Tget_type"></a><a name="IX_H5Topen_4"></a><a name="IX_H5Tcommit_3"></a>A transient datatype can be stored using <span class="FM_Code">H5Tcommit</span>&#160;in the HDF5 file as an independent, named object, called a committed datatype. Committed datatypes were formerly known as named datatypes. See item e in the figure below. Subsequently, when a committed datatype is opened with <span class="FM_Code">H5Topen</span>&#160;(item f), or is obtained with <span class="FM_Code">H5Tget_type</span>&#160;or similar call (item k), the return is an identifier to a transient copy of the stored datatype. The identifier can be used in the same way as other datatype identifiers except that the committed datatype cannot be modified. When a committed datatype is copied with <span class="FM_Code">H5Tcopy</span>, the return is a new, modifiable, transient datatype object (item f). </p>
 <p class="FM__Body"><a name="IX_H5Acreate_5"></a><a name="IX_H5Dcreate_28"></a>When an object is created using a committed datatype (<span class="FM_Code">H5Dcreate</span>, <span class="FM_Code">H5Acreate</span>), the stored datatype is used without copying it to the object. See item j in the figure below. In this case, if multiple objects are cre&#173;ated using the same committed datatype, they all share the exact same datatype object. This saves space and makes clear that the datatype is shared. Note that a committed datatype can be shared by objects within the same HDF5 file, but not by objects in other files. For more information on copying committed datatypes to other HDF5 files, see the “<span class="FM_LT_LinkText"><a href="http://www.hdfgroup.org/HDF5/doc/Advanced/CommittedDatatypeCopying/CopyingCommittedDatatypesWithH5Ocopy.pdf">Copying Committed Datatypes with H5Ocopy</a></span>” topic in the “Addi&#173;tional Resources” chapter.</p>
 <p class="FM__Body"><a name="IX_H5Tget_type_1"></a><a name="IX_H5Topen_5"></a><a name="IX_H5Gunlink_1"></a><a name="IX_H5Ldelete_9"></a>A committed datatype can be deleted from the file by calling <span class="FM_Code">H5Ldelete</span>&#160;which replaces <span class="FM_Code">H5Gunlink</span>. See item i in the figure below. If one or more objects are still using the datatype, the committed datatype can&#173;not be accessed with <span class="FM_Code">H5Topen</span>, but will not be removed from the file until it is no longer used. <span class="FM_Code">H5Tget_&#173;type</span> and similar calls will return a transient copy of the datatype.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-23. Life cycle of a datatype</caption>
  <tr style=" height : 414.29pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig53.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:539px;" id="image32" src="Dtypes_fig53.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">Transient datatypes are initially modifiable. Note that when a datatype is copied or when it is written to the file (when an object is created) or the datatype is used to create a composite datatype, a copy of the current state of the datatype is used. If the datatype is then modified, the changes have no effect on data&#173;sets, attributes, or datatypes that have already been created. See the figure below.</p>
 <p class="FM__Body"><a name="IX_immutable_transient"></a><a name="IX_H5T_NATIVE_INT_31"></a><a name="IX_immutable"></a><a name="IX_H5Tlock_4"></a>A transient datatype can be made <span class="FM_EI_EmphasisItalic">read-only</span> (<span class="FM_Code">H5Tlock</span>). Note that the datatype is still transient, and oth&#173;erwise does not change. A datatype that is <span class="FM_EI_EmphasisItalic">immutable</span>&#160;is <span class="FM_EI_EmphasisItalic">read-only</span>&#160;but cannot be closed except when the entire library is closed. The predefined types such as <span class="FM_Code">H5T_NATIVE_INT</span>&#160;are <span class="FM_EI_EmphasisItalic">immutable transient</span> types.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-24. Transient datatype states: modifiable, read-only, and immutable</caption>
  <tr style=" height : 247.39pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig54.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:1.500pt; margin-bottom:0.750pt; width:100%; max-width:521px;" id="image33" src="Dtypes_fig54.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">To create two or more datasets that share a common datatype, first commit the datatype, and then use that datatype to create the datasets. See the example below.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-42. Create a shareable datatype</caption>
  <tr style=" height : 113.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">hid_t t1 = ...some transient type...;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tcommit_4"></a>H5Tcommit (file, “shared_type”, t1, H5P_DEFAULT, H5P_DEFAULT, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dcreate_29"></a>hid_t dset1 = H5Dcreate (file, “dset1”, t1, space, H5P_DEFAULT, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, H5P_DEFAULT);</p>
  <p class="FM__BodyCellCode">hid_t dset2 = H5Dcreate (file, “dset2”, t1, space, H5P_DEFAULT, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, H5P_DEFAULT);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 87.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Dopen_22"></a>hid_t dset1 = H5Dopen (file, “dset1”, H5P_DEFAULT);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dget_type_9"></a>hid_t t2 = H5Dget_type (dset1);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dcreate_30"></a>hid_t dset3 = H5Dcreate (file, “dset3”, t2, space, H5P_DEFAULT, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, H5P_DEFAULT);</p>
  <p class="FM__BodyCellCode">hid_t dset4 = H5Dcreate (file, “dset4”, t2, space, H5P_DEFAULT, </p>
  <p class="FM__BodyCellCodeIndent">H5P_DEFAULT, H5P_DEFAULT);</p>
</td>
</tr>
 </table>
</div>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-23. Datatype APIs</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 232.615pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Function</p>
</th>
  <th style="width : 199.385pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Description</p>
</th>
</tr>
  <tr style=" height : 127.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Topen_6"></a>hid_t H5Topen (hid_t location, const char *name)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5Tclose_11"></a>A committed datatype can be opened by calling this function, which returns a data&#173;type identifier. The identifier should even&#173;tually be released by calling <span class="FM_Code">H5Tclose()</span>&#160;to release resources. The committed data&#173;type returned by this function is read-only or a negative value is returned for failure. The location is either a file or group iden&#173;tifier.</p>
</td>
</tr>
  <tr style=" height : 88.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcommit_5"></a>herr_t H5Tcommit (hid_t location, const char *name, hid_t type, H5P_DE&#173;FAULT, H5P_DEFAULT, H5P_DEFAULT)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">A transient datatype (not immutable) can be written to a file and turned into a com&#173;mitted datatype by calling this function. The location is either a file or group iden&#173;tifier and when combined with name refers to a new committed datatype.</p>
</td>
</tr>
  <tr style=" height : 114.00pt;">
  <td style="width : 232.615pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5Tcommitted_2"></a>htri_t H5Tcommitted (hid_t type)</p>
</td>
  <td style="width : 199.385pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell"><a name="IX_H5Dget_type_10"></a>A type can be queried to determine if it is a committed type or a transient type. If this function returns a positive value then the type is committed. Datasets which return committed datatypes with <span class="FM_Code">H5Dget_type()</span>&#160;are able to share the datatype with other datasets in the same file.</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level2"><a name="TOC_6_10_Data_Transfer"></a>6.10. Data Transfer: Datatype Conversio<a name="XREF_Dtransfer"></a>n and Selection</p>
 <p class="FM__Body">When data is transferred (write or read), the storage layout of the data elements may be different. For example, an integer might be stored on disk in big-endian byte order and read into memory with little-endian byte order. In this case, each data element will be transformed by the HDF5 Library during the data transfer.</p>
 <p class="FM__Body">The conversion of data elements is controlled by specifying the datatype of the source and specifying the intended datatype of the destination. The storage format on disk is the datatype specified when the data&#173;set is created. The datatype of memory must be specified in the library call.</p>
 <p class="FM__Body">In order to be convertible, the datatype of the source and destination must have the same datatype class (with the exception of enumeration type). Thus, integers can be converted to other integers, and floats to other floats, but integers cannot (yet) be converted to floats. For each atomic datatype class, the possible conversions are defined. An enumeration datatype can be converted to an integer or a floating-point num&#173;ber datatype.</p>
 <p class="FM__Body"><a name="IX_H5Pset_type_conv_cb_2"></a>Basically, any datatype can be converted to another datatype of the same datatype class. The HDF5 Library automatically converts all properties. If the destination is too small to hold the source value then an over&#173;flow or underflow exception occurs. If a handler is defined with the <span class="FM_Code">H5Pset_type_conv_cb</span>&#160;function, it will be called. Otherwise, a default action will be performed. The table below summarizes the default actions.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionTable">Table 6-24. Default actions for datatype conversion exceptions</caption>
  <tr style=" height : 23.00pt;">
  <th style="width : 115.200pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Datatype Class</p>
</th>
  <th style="width : 129.600pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Possible Exceptions</p>
</th>
  <th style="width : 187.200pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Heading_Cell">Default Action</p>
</th>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 115.200pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Integer</p>
</td>
  <td style="width : 129.600pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Size, offset, pad</p>
</td>
  <td style="width : 187.200pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 115.200pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Float</p>
</td>
  <td style="width : 129.600pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Size, offset, pad, ebits</p>
</td>
  <td style="width : 187.200pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 115.200pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">String</p>
</td>
  <td style="width : 129.600pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Size</p>
</td>
  <td style="width : 187.200pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Truncates, zero terminate if required. &#160;&#160;&#160;</p>
</td>
</tr>
  <tr style=" height : 23.00pt;">
  <td style="width : 115.200pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Enumeration</p>
</td>
  <td style="width : 129.600pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">No field</p>
</td>
  <td style="width : 187.200pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">All bits set</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><a name="IX_H5Dread_28"></a>For example, when reading data from a dataset, the source datatype is the datatype set when the dataset was created, and the destination datatype is the description of the storage layout in memory. The destina&#173;tion datatype must be specified in the <span class="FM_Code">H5Dread</span>&#160;call. The example below shows an example of reading a dataset of 32-bit integers. The figure below the example shows the data transformation that is performed.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-43. Specify the destination datatype with H5Dread</caption>
  <tr style=" height : 74.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_STD_BE32"></a>/* Stored as H5T_STD_BE32 */</p>
  <p class="FM__BodyCellCode">/* Use the native memory order in the destination */</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tcopy_27"></a>mem_type_id = H5Tcopy(H5T_NATIVE_INT);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Dread_29"></a>status = H5Dread(dataset_id, mem_type_id, mem_space_id, </p>
  <p class="FM__BodyCellCodeIndent">file_space_id, &#160;xfer_plist_id, &#160;buf );</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-25. Layout of a datatype conversion</caption>
  <tr style=" height : 15.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Source Datatype: <span class="FM_Code">H5T_STD_BE32</span></p>
</td>
</tr>
  <tr style=" height : 85.18pt;">
  <td style="width : 432.000pt; ">
  <div align="center"><img alt="Dtypes_fig57a.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:548px;" id="image34" src="Dtypes_fig57a.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 15.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">....</p>
</td>
</tr>
  <tr style=" height : 66.60pt;">
  <td style="width : 432.000pt; ">
  <div align="center"><img alt="dtypes_fig57_arrowWithText.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:426px;" id="image35" src="dtypes_fig57_arrowWithText.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 15.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">Destination Datatype: <span class="FM_Code">H5T_STD_LE32</span></p>
</td>
</tr>
  <tr style=" height : 83.74pt;">
  <td style="width : 432.000pt; ">
  <div align="center"><img alt="Dtypes_fig57b.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:549px;" id="image36" src="Dtypes_fig57b.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 15.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCell">....</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><a name="IX_H5T_NATIVE_INT_32"></a>One thing to note in the example above is the use of the predefined native datatype <span class="FM_Code">H5T_NATIVE_INT</span>. Recall that in this example, the data was stored as a 4-bytes in big-endian order. The application wants to read this data into an array of integers in memory. Depending on the system, the storage layout of mem&#173;ory might be either big or little-endian, so the data may need to be transformed on some platforms and not on others. The <span class="FM_Code">H5T_NATIVE_INT</span>&#160;type is set by the HDF5 Library to be the correct type to describe the storage layout of the memory on the system. Thus, the code in the example above will work correctly on any platform, performing a transformation when needed.</p>
 <p class="FM__Body">There are predefined native types for most atomic datatypes, and these can be combined in composite datatypes. In general, the predefined native datatypes should always be used for data stored in memory.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; width:100%; max-width:252.00pt;" cellspacing="0">
  <tr style=" height : 23.00pt;">
  <td style="width : 252.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Body" style="font-weight : bold;"><span class="FM_EH_EmphasisHeavy">Storage Properties</span></p>
</td>
</tr>
  <tr style=" height : 37.00pt;">
  <td style="width : 252.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__Body">Predefined native datatypes describe the storage properties of memory.</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">For composite datatypes, the component atomic datatypes will be converted. For a variable-length data&#173;type, the source and destination must have compatible base datatypes. For a fixed-size string datatype, the length and padding of the strings will be converted. Variable-length strings are converted as variable-length datatypes.</p>
 <p class="FM__Body">For an array datatype, the source and destination must have the same rank and dimensions, and the base datatype must be compatible. For example an array datatype of 4 x 3 32-bit big-endian integers can be transferred to an array datatype of 4 x 3 little-endian integers, but not to a 3 x 4 array.</p>
 <p class="FM__Body">For an enumeration datatype, data elements are converted by matching the symbol names of the source and destination datatype. The figure below shows an example of how two enumerations with the same names and different values would be converted. The value ‘2’ in the source dataset would be converted to ‘0x0004’ in the destination.</p>
 <p class="FM__Body">If the source data stream contains values which are not in the domain of the conversion map then an over&#173;flow exception is raised within the library.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:324.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-26. An enum datatype conversion</caption>
  <tr style=" height : 111.53pt;">
  <td style="width : 324.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig58.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:0.750pt; margin-bottom:0.750pt; width:100%; max-width:322px;" id="image37" src="Dtypes_fig58.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">The library also allows conversion from enumeration to a numeric datatype. A numeric datatype is either an integer or a floating-point number. This conversion can simplify the application program because the base type for an enumeration datatype is an integer datatype. The application program can read the data from a dataset of enumeration datatype in file into a memory buffer of numeric datatype. And it can write enumeration data from memory into a dataset of numeric datatype in file, too. </p>
 <p class="FM__Body">For compound datatypes, each field of the source and destination datatype is converted according to its type. The name of the fields must be the same in the source and the destination in order for the data to be converted. </p>
 <p class="FM__Body">The example below shows the compound datatypes shows sample code to create a compound datatype with the fields aligned on word boundaries (s1_tid) and with the fields packed (s2_tid). The former is suit&#173;able as a description of the storage layout in memory, the latter would give a more compact store on disk. These types can be used for transferring data, with <span class="FM_Code">s2_tid</span>&#160;used to create the dataset, and <span class="FM_Code">s1_tid</span>&#160;used as the memory datatype.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-44. Create an aligned and packed compound datatype</caption>
  <tr style=" height : 230.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct s1_t {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>int a;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>char b;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>double c;</p>
  <p class="FM__BodyCellCode">} s1_t;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_COMPOUND_17"></a><a name="IX_H5Tcreate_20"></a>s1_tid = H5Tcreate (H5T_COMPOUND, sizeof(s1_t));</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tinsert_14"></a>H5Tinsert(s1_tid, “a_name”, HOFFSET(s1_t, a), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_INT);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s1_tid, “b_name”, HOFFSET(s1_t, b), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_CHAR);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s1_tid, “c_name”, HOFFSET(s1_t, c), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tcopy_28"></a>s2_tid = H5Tcopy(s1_tid);</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tpack_3"></a>H5Tpack(s2_tid);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">When the data is transferred, the fields within each data element will be aligned according to the datatype specification. The figure below shows how one data element would be aligned in memory and on disk. Note that the size and byte order of the elements might also be converted during the transfer.</p>
 <p class="FM__Body">It is also possible to transfer some of the fields of compound datatypes. Based on the example above, the example below shows a compound datatype that selects the first and third fields of the <span class="FM_Code">s1_tid</span>. The sec&#173;ond datatype can be used as the memory datatype, in which case data is read from or written to these two fields, while skipping the middle field. The second figure below shows the layout for two data elements.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-27. Alignment of a compound datatype</caption>
  <tr style=" height : 445.46pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig60.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:1.500pt; margin-bottom:0.750pt; width:100%; max-width:600px;" id="image38" src="Dtypes_fig60.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-45. Transfer some fields of a compound datatype</caption>
  <tr style=" height : 152.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">typedef struct s1_t {</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>int a;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>char b;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>double c;</p>
  <p class="FM__BodyCellCode">} s1_t;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">typedef struct s2_t { &#160;&#160;/* two fields from s1_t */</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>int a;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>double c;</p>
  <p class="FM__BodyCellCode">} s2_t;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 204.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_COMPOUND_18"></a><a name="IX_H5Tcreate_21"></a>s1_tid = H5Tcreate (H5T_COMPOUND, sizeof(s1_t));</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5Tinsert_15"></a>H5Tinsert(s1_tid, “a_name”, HOFFSET(s1_t, a), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_INT);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s1_tid, “b_name”, HOFFSET(s1_t, b), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_CHAR);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s1_tid, “c_name”, HOFFSET(s1_t, c), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE);</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">s2_tid = H5Tcreate (H5T_COMPOUND, sizeof(s2_t));</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">H5Tinsert(s1_tid, “a_name”, HOFFSET(s2_t, a), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_INT);</p>
  <p class="FM__BodyCellCode">H5Tinsert(s1_tid, “c_name”, HOFFSET(s2_t, c), </p>
  <p class="FM__BodyCellCodeIndent">H5T_NATIVE_DOUBLE);</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:2.00pt; padding-top:2.00pt; padding-right:2.00pt; padding-bottom:2.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionFigure" align="bottom">Figure 6-28. Layout when an element is skipped</caption>
  <tr style=" height : 380.02pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; ">
  <div align="center"><img alt="Dtypes_fig62.JPG" style=" margin-left:0.750pt; margin-top:0.750pt; margin-right:1.500pt; margin-bottom:0.750pt; width:100%; max-width:600px;" id="image39" src="Dtypes_fig62.JPG" />
  </div>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
  <p class="FM__BodyFigureSmall">&nbsp;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_Level2"><a name="TOC_6_11_Text_Descriptions"></a>6.11. Text Descriptions of Datatype<a name="XREF_TextDescriptions"></a>s: Conversion to and from</p>
 <p class="FM__Body">HDF5 provides a means for generating a portable and human-readable text description of a datatype and for generating a datatype from such a text description. This capability is particularly useful for creating complex datatypes in a single step, for creating a text description of a datatype for debugging purposes, and for creating a portable datatype definition that can then be used to recreate the datatype on many platforms or in other applications.</p>
 <p class="FM__Body">These tasks are handled by two functions provided in the <span class="FM_LT_LinkText"><a href="http://www.hdfgroup.org/HDF5/doc/HL/RM_H5LT.html">HDF5 Lite high-level library</a></span>:</p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_LT_LinkTextCode"><a href="http://www.hdfgroup.org/HDF5/doc/HL/RM_H5LT.html#H5LTtext_to_dtype">H5LTtext_to_dtype</a></span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>Creates an HDF5 datatype in a single step.</p>
 <p class="FM__ListBullets_Level1">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="FM_LT_LinkTextCode"><a href="http://www.hdfgroup.org/HDF5/doc/HL/RM_H5LT.html#H5LTdtype_to_text">H5LTdtype_to_text</a></span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>Translates an HDF5 datatype into a text description. </p>
 <p class="FM__Body">Note that this functionality requires that the HDF5 High-Level Library (H5LT) be installed. </p>
 <p class="FM__Body"><a name="IX_H5LTtext_to_dtype_1"></a>While <span class="FM_Code">H5LTtext_to_dtype</span>&#160;can be used to generate any sort of datatype, it is particularly useful for complex datatypes. </p>
 <p class="FM__Body"><a name="IX_H5LTdtype_to_text_1"></a><span class="FM_Code">H5LTdtype_to_text</span>&#160;is most likely to be used in two sorts of situations: when a datatype must be closely examined for debugging purpose or to create a portable text description of the datatype that can then be used to recreate the datatype on other platforms or in other applications.</p>
 <p class="FM__Body">These two functions work for all valid HDF5 datatypes except time, bitfield, and reference datatypes.</p>
 <p class="FM__Body"><a name="IX_H5LTdtype_to_text_2"></a><a name="IX_H5LTtext_to_dtype_2"></a>The currently supported text format used by <span class="FM_Code">H5LTtext_to_dtype</span>&#160;and <span class="FM_Code">H5LTdtype_to_text</span>&#160;is the data description language (DDL) and conforms to the <span class="FM_LT_LinkText"><a href="http://www.hdfgroup.org/HDF5/doc/ddl.html">HDF5 DDL</a></span>. The portion of the HDF5 DDL that defines HDF5 datatypes appears below.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-46. The definition of HDF5 datatypes from the HDF5 DDL</caption>
  <tr style=" height : 100.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">&lt;datatype&gt; ::= &lt;atomic_type&gt; | &lt;compound_type&gt; |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>&lt;array_type&gt; | &lt;variable_length_type&gt;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">&lt;atomic_type&gt; ::= &lt;integer&gt; | &lt;float&gt; | &lt;time&gt; |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>&lt;string&gt; | &lt;bitfield&gt; | &lt;opaque&gt; |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>&lt;reference&gt; | &lt;enum&gt;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 191.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">&lt;integer&gt; ::= H5T_STD_I8BE | H5T_STD_I8LE |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_STD_I16BE | H5T_STD_I16LE |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_STD_I32BE | H5T_STD_I32LE |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_STD_I64BE | H5T_STD_I64LE |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_STD_U8BE | H5T_STD_U8LE |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_STD_U16BE | H5T_STD_U16LE |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_STD_U32BE | H5T_STD_U32LE |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_STD_U64BE | H5T_STD_U64LE |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_NATIVE_CHAR | H5T_NATIVE_UCHAR |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_NATIVE_SHORT | H5T_NATIVE_USHORT |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_NATIVE_INT | H5T_NATIVE_UINT |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_NATIVE_LONG | H5T_NATIVE_ULONG |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_NATIVE_LLONG | H5T_NATIVE_ULLONG</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 100.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">&lt;float&gt; ::= H5T_IEEE_F32BE | H5T_IEEE_F32LE |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_IEEE_F64BE | H5T_IEEE_F64LE |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_NATIVE_FLOAT | H5T_NATIVE_DOUBLE |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_NATIVE_LDOUBLE</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">&lt;time&gt; ::=&nbsp;TBD</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 152.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">&lt;string&gt; ::= H5T_STRING { STRSIZE &lt;strsize&gt; ;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>STRPAD &lt;strpad&gt; ;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>CSET &lt;cset&gt; ;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>CTYPE &lt;ctype&gt; ;}</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">&lt;strsize&gt; ::= &lt;int_value&gt; | H5T_VARIABLE</p>
  <p class="FM__BodyCellCode">&lt;strpad&gt; ::= H5T_STR_NULLTERM | H5T_STR_NULLPAD |</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_STR_SPACEPAD</p>
  <p class="FM__BodyCellCode">&lt;cset&gt; ::= H5T_CSET_ASCII | H5T_CSET_UTF8</p>
  <p class="FM__BodyCellCode">&lt;ctype&gt; ::= H5T_C_S1 | H5T_FORTRAN_S1</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 126.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">&lt;bitfield&gt; ::= TBD</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">&lt;opaque&gt; ::= H5T_OPAQUE { OPQ_SIZE &lt;opq_size&gt;;</p>
  <p class="FM__BodyCellCodeIndent">OPQ_TAG &lt;opq_tag&gt;; }</p>
  <p class="FM__BodyCellCode">opq_size ::= &lt;int_value&gt;</p>
  <p class="FM__BodyCellCode">opq_tag ::= &quot;&lt;string&gt;&quot;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">&lt;reference&gt; ::= Not supported</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 100.00pt;">
  <td style="width : 432.000pt; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">&lt;compound_type&gt; ::= H5T_COMPOUND { &lt;member_type_def&gt;+ }</p>
  <p class="FM__BodyCellCode">&lt;member_type_def&gt; ::= &lt;datatype&gt; &lt;field_name&gt; &lt;offset&gt;opt;</p>
  <p class="FM__BodyCellCode">&lt;field_name&gt; ::= &quot;&lt;identifier&gt;&quot;</p>
  <p class="FM__BodyCellCode">&lt;offset&gt; ::= : &lt;int_value&gt;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">&lt;variable_length_type&gt; ::= H5T_VLEN { &lt;datatype&gt; }</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
</td>
</tr>
  <tr style=" height : 165.00pt;">
  <td style="width : 432.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">&lt;array_type&gt; ::= H5T_ARRAY { &lt;dim_sizes&gt; &lt;datatype&gt; }</p>
  <p class="FM__BodyCellCode">&lt;dim_sizes&gt; ::= [&lt;dimsize&gt;] | [&lt;dimsize&gt;] &lt;dim_sizes&gt;</p>
  <p class="FM__BodyCellCode">&lt;dimsize&gt; ::= &lt;int_value&gt;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">&lt;enum&gt; ::= H5T_ENUM { &lt;enum_base_type&gt;; &lt;enum_def&gt;+ }</p>
  <p class="FM__BodyCellCode">&lt;enum_base_type&gt; ::= &lt;integer&gt;</p>
  <p class="FM__BodyCellCode">// Currently enums can only hold integer type data, but </p>
  <p class="FM__BodyCellCode">// they may be expanded in the future to hold any </p>
  <p class="FM__BodyCellCode">// datatype</p>
  <p class="FM__BodyCellCode">&lt;enum_def&gt; ::= &lt;enum_symbol&gt; &lt;enum_val&gt;;</p>
  <p class="FM__BodyCellCode">&lt;enum_symbol&gt; ::= &quot;&lt;identifier&gt;&quot;</p>
  <p class="FM__BodyCellCode">&lt;enum_val&gt; ::= &lt;int_value&gt;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">The definitions of opaque and compound datatype above are revised for HDF5 Release 1.8. In Release 1.6.5. and earlier, they were defined as follows:</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-47. Old definitions of the opaque and compound datatypes</caption>
  <tr style=" height : 87.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode"><a name="IX_H5T_OPAQUE_3"></a>&lt;opaque&gt; ::= H5T_OPAQUE { &lt;identifier&gt; }</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">&nbsp;</p>
  <p class="FM__BodyCellCode">&lt;compound_type&gt; ::= H5T_COMPOUND { &lt;member_type_def&gt;+ }</p>
  <p class="FM__BodyCellCode">&lt;member_type_def&gt; ::= &lt;datatype&gt; &lt;field_name&gt; ;</p>
  <p class="FM__BodyCellCode">&lt;field_name&gt; ::= &lt;identifier&gt;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Heading_SubSection">Examples</p>
 <p class="FM__Body"><a name="IX_H5LTtext_to_dtype_3"></a>The code sample below illustrates the use of <span class="FM_Code">H5LTtext_to_dtype</span>&#160;to generate a variable-length string datatype.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-48. Creating a variable-length string datatype from a text description</caption>
  <tr style=" height : 113.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">hid_t &#160;&#160;dtype;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_STRING_4"></a><a name="IX_H5LTtext_to_dtype_4"></a>if((dtype = H5LTtext_to_dtype(“H5T_STRING { </p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>STRSIZE H5T_VARIABLE; </p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>STRPAD H5T_STR_NULLPAD; </p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>CSET H5T_CSET_ASCII; </p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>CTYPE H5T_C_S1; </p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}”, H5LT_DDL))&lt;0)</p>
  <p class="FM__BodyCellCodeIndent">goto out;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"><a name="IX_H5LTtext_to_dtype_5"></a>The code sample below illustrates the use of <span class="FM_Code">H5LTtext_to_dtype</span> to generate a complex array data&#173;type.</p>
<div width="100%" align="center">
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:aligncenter; margin-top:12.00pt; width:100%; max-width:432.00pt;" cellspacing="0">
  <caption class="FM__CaptionCodeExample" align="bottom">Code Example 6-49. Creating a complex array datatype from a text description</caption>
  <tr style=" height : 165.00pt;">
  <td style="width : 432.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #228a22; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #228a22; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM__BodyCellCode">hid_t &#160;&#160;dtype;</p>
  <p class="FM__BodyCellCode"><a name="IX_H5T_ARRAY_5"></a><a name="IX_H5LTtext_to_dtype_6"></a>if((dtype = H5LTtext_to_dtype(“H5T_ARRAY { [5][7][13] H5T_ARRAY </p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{ [17][19] H5T_COMPOUND</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_STD_I8BE </p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>\“arr_compound_1\”; </p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>H5T_STD_I32BE </p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>\“arr_compound_2\”; </p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>} </p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>} </p>
  <p class="FM__BodyCellCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}”, H5LT_DDL))&lt;0)</p>
  <p class="FM__BodyCellCodeIndent">goto out;</p>
</td>
</tr>
 </table>
</div>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
</body>
</html>