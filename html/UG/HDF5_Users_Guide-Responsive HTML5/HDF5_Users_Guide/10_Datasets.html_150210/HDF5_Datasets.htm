
<!DOCTYPE HTML>
<html>
<head>
 <meta http-equiv="X-UA-Compatible" content="IE=edge" />
 <meta name="OriginalFile" content="C:\1 MEE\Working\hdf5_trunk\html\UG\10_Datasets.html_150210.fm" />
 <meta name="Originator" content="ImportMif" />
 <meta content="How to fly your personal spaceship" name="search-keywords" />
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="viewport" content="width=100%, initial-scale=1" />
<meta name="generator" content="Adobe FrameMaker 12" />
<title>HDF5 User's Guide - HDF5 Datasets</title>
<link href="../../template/Theme1_Standard/main.css" type="text/css" rel="stylesheet" />
<link href="../../template/Theme1_Standard/jqueryui-custom.css" type="text/css" rel="stylesheet" />
 <link rel="stylesheet" href="10_Datasets.html_150210.css" type="text/css" /><script type="text/javascript" language="JavaScript">//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]></script><style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadcsh.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/showhidecontrols.js"></script>
<script type="text/javascript" src="../../template/scripts/pageloader.js"></script>
<script type="text/javascript" src="../../template/scripts/toctree.js"></script>
<script type="text/javascript" src="../../template/scripts/toctreeloader.js"></script>
<script type="text/javascript" src="../../template/scripts/indextree.js"></script>
<script type="text/javascript" src="../../template/scripts/indextreeloader.js"></script>
<script type="text/javascript" src="../../template/scripts/glossarylist.js"></script>
<script type="text/javascript" src="../../template/scripts/glossarylistloader.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
<script type="text/javascript" src="../../template/scripts/searchfield.js"></script>
<script type="text/javascript" src="../../template/scripts/tabpanels.js"></script>
<script type="text/javascript" >
gTocPageHtml = "{%ICON%}<span  class=\"wTOCTreePageText\">{%LINK_NAME%}</span>";
gTocBookClosedHtml = "{%ICON%}<span  class=\"wTOCTreeCloseBookText\">{%LINK_NAME%}</span>";
gTocBookOpenHtml = "{%ICON%}<span  class=\"wTOCTreeCloseBookText\">{%LINK_NAME%}</span>";
gTocUrlHtml = "{%ICON%}<span  class=\"wTOCTreeLinkText\">{%LINK_NAME%}</span>";
gTocPageIconSrc = "../../template/Theme1_Standard/TOCTreePage.png";
gTocPageIconHoverSrc = "../../template/Theme1_Standard/TOCTreePageHover.png";
gTocPageIconSelSrc = "../../template/Theme1_Standard/TOCTreePageSelected.png";
gTocPageIconClass = "wTOCTreePageIcon";
gTocPageIconStyle = "";
gTocBookClosedIconSrc = "../../template/Theme1_Standard/TOCTreeCloseBook.png";
gTocBookClosedIconHoverSrc = "../../template/Theme1_Standard/TOCTreeCloseBookHover.png";
gTocBookClosedIconSelSrc = "../../template/Theme1_Standard/TOCTreeCloseBookSelected.png";
gTocBookClosedIconClass = "wTOCTreeCloseBookIcon";
gTocBookClosedIconStyle = "";
gTocBookOpenIconSrc = "../../template/Theme1_Standard/TOCTreeOpenBook.png";
gTocBookOpenIconHoverSrc = "../../template/Theme1_Standard/TOCTreeOpenBookHover.png";
gTocBookOpenIconSelSrc = "../../template/Theme1_Standard/TOCTreeOpenBookSelected.png";
gTocBookOpenIconClass = "wTOCTreeOpenBookIcon";
gTocBookOpenIconStyle = "";
gTocUrlIconSrc = "../../template/Theme1_Standard/TOCTreeLink.png";
gTocUrlIconHoverSrc = "../../template/Theme1_Standard/TOCTreeLinkHover.png";
gTocUrlIconSelSrc = "../../template/Theme1_Standard/TOCTreeLinkSelected.png";
gTocUrlIconClass = "wTOCTreeLinkIcon";
gTocUrlIconStyle = "";
</script>
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
</script>
<script type="text/javascript" >
gIdxKWHtml = "<span  class=\"wIdxKeywordText\">{%LINK_NAME%}</span>";
	gIdxLinkHtml = "<span  class=\"wIdxLinkText\">{%LINK_NAME%}</span>";
	gIdxCategoryHtml = "<span  class=\"wIdxAlphabetText\">{%LINK_NAME%}</span>";
</script>
<script type="text/javascript" >
gTopicId = "1_2";
</script>
<script type="text/javascript" >
gGloTermHtml = "<span  class=\"wGloTermText\">{%LINK_NAME%}</span>";
	gGloDefHtml = "<span  class=\"wGloDefinitionText\">{%LINK_NAME%}</span>";
	gGloCategoryHtml = "<span  class=\"wGloAlphabetText\">{%LINK_NAME%}</span>";
</script>
 <link rel="SHORTCUT ICON" href="../../Responsive HTML5_favicon.ico" />
</head>

<body>
<script type="text/javascript" src="../../ehlpdhtm.js"></script>



<div class="floatholder">
	<div class="phone_scrollarea overthrow">
		<div class="header">
			<table class="headertable">
				<tr>
					<td class="logo"><a href="../HDF5_UG_TitleWithoutSamples/HDF5_UG_TitleWithoutSamples.htm" class="homelink"><img src="../../template/Theme1_Standard/logo.png" alt="Logo" id="wLogoImage" style=" border:none; width:100%; max-width:53px;" border="0" /></a> </td>
					<td class="title"><div>
						<a href="../HDF5_UG_TitleWithoutSamples/HDF5_UG_TitleWithoutSamples.htm" class="homelink"><span>HDF5 User's Guide</span></a> 
						 
					</div></td>
					<td class="brsBack"><a id="browseSeqBack" class="wBSBackButton" href="../09_Groups.html_150210/HDF5_Groups.htm"><img alt="" src="../../template/Theme1_Standard/topic_left.png" class="wBSBackButton" border="0" style="width:100%; max-width:19px" /></a> </td>
					<td class="brsNext"><a id="browseSeqNext" class="wBSNextButton" href="../11_Datatypes.html_150210/HDF5_Datatypes.htm"><img alt="" src="../../template/Theme1_Standard/topic_right.png" class="wBSNextButton" border="0" style="width:100%; max-width:19px" /></a> </td>
				</tr>
			</table>
		</div>
		<div class="sidebar">
			<div data-showin="Always" class="wTabbedPanel" id="tabbedpanel">
				<ul class="wTabGroup" id="tab" data-tabid="tocTabButton" style="margin: 0px;">
					<li class="wTab" id="tocTabButton" data-contentid="tocTabPane" onmouseout="onTabHoverOut(this, 'tab')" data-class="wTab" ontouchend="onTabHoverOut(this, 'tab')" onclick="selectTab(this, 'tab')" ontouchstart="onTabHover(this, 'tab')" data-classhover="wTabHover" style="display: inline;" ontouchmove="onTabHoverOut(this, 'tab')" data-classsel="wTabSelected" onmouseover="onTabHover(this, 'tab')"><img src="../../template/Theme1_Standard/toc.png" class="normal" alt="Table of Contents" title="Table of Contents" id="xmlEditorTOCSidebarButton" style=" border:none; width:100%; max-width:30px;" border="0" /><img src="../../template/Theme1_Standard/toc_hover.png" class="hover" alt="Table of Contents" title="Table of Contents" id="xmlEditorTOCSidebarButtonHover" style=" border:none; width:100%; max-width:30px;" border="0" /></li>
					<li class="wTab" id="idxTabButton" data-contentid="idxTabPane" onmouseout="onTabHoverOut(this, 'tab')" data-class="wTab" ontouchend="onTabHoverOut(this, 'tab')" onclick="selectTab(this, 'tab')" ontouchstart="onTabHover(this, 'tab')" data-classhover="wTabHover" style="display: inline;" ontouchmove="onTabHoverOut(this, 'tab')" data-classsel="wTabSelected" onmouseover="onTabHover(this, 'tab')"><img src="../../template/Theme1_Standard/index.png" class="normal" alt="Index" title="Index" id="xmlEditorIDXSidebarButton" style=" border:none; width:100%; max-width:30px;" border="0" /><img src="../../template/Theme1_Standard/index_hover.png" class="hover" alt="Index" title="Index" id="xmlEditorIDXSidebarButtonHover" style=" border:none; width:100%; max-width:30px;" border="0" /></li>
					<li class="wTab" id="gloTabButton" data-contentid="gloTabPane" onmouseout="onTabHoverOut(this, 'tab')" data-class="wTab" ontouchend="onTabHoverOut(this, 'tab')" onclick="selectTab(this, 'tab')" ontouchstart="onTabHover(this, 'tab')" data-classhover="wTabHover" style="display: inline;" ontouchmove="onTabHoverOut(this, 'tab')" data-classsel="wTabSelected" onmouseover="onTabHover(this, 'tab')"><img src="../../template/Theme1_Standard/glo.png" class="normal" alt="Glossary" title="Glossary" id="xmlEditorGLOSidebarButton" style=" border:none; width:100%; max-width:34px;" border="0" /><img src="../../template/Theme1_Standard/glo_hover.png" class="hover" alt="Glossary" title="Glossary" id="xmlEditorGLOSidebarButtonHover" style=" border:none; width:100%; max-width:34px;" border="0" /></li>
				</ul>
				<div class="wTabContentGroup">
					<div id="tocTabPane" class="wTabContent">
						<div id="toc" class="wTOCTree" tabindex="272">
							
							
							
							
						</div>
					</div>
					<div id="idxTabPane" class="wTabContent">
						<div id="idx" class="wIndex">
							<input class="wIdxFilter" id="idxFilterBox" type="text" data-placeholder="Filter Keyword" onkeyup="filterIdx()"></input>
							
							
							
						</div>
					</div>
					<div id="gloTabPane" class="wTabContent">
						<div id="glo" class="wGlossary">
							<input class="wGloFilter" id="gloFilterBox" type="text" data-placeholder="Filter Term" onkeyup="filterGlo()"></input>
							
							
							
						</div>
					</div>
				</div>
			</div>
			<div class="closebutton buttonOpened">
				&#160; 
			</div>
		</div>
		<div class="content">
			<div class="desktop_functionholder">
				<div class="searchholder">
					<div class="wSearchField">
						<input id="searchBox" class="wSearchField" type="search" data-placeholder="-Search-" onkeydown="searchHelp(event, 'searchBox')" data-search="true" /><a class="wSearchLink" onclick="searchHelp(null, 'searchBox')" href="#"><img src="../../template/Theme1_Standard/Search.png" alt="" id="xmlEditwSearchLink" class="wSearchLink" border="0" style="width:100%; max-width:24px" /></a> 
						 
					</div>
				</div>
				<div class="home">
					<a href="../HDF5_UG_TitleWithoutSamples/HDF5_UG_TitleWithoutSamples.htm"><img src="../../template/Theme1_Standard/home.png" alt="" class="homebutton normal" id="xmlEditorHomeButton" border="0" style="width:100%; max-width:27px" /><img src="../../template/Theme1_Standard/home_hover.png" alt="" class="homebutton hover" id="xmlEditorHomeButtonHover" border="0" style="width:100%; max-width:27px" /></a> 
				</div>
				<div class="print">
					<a href="javascript:window.print()" class="wPrintButton"><img src="../../template/Theme1_Standard/Print.png" alt="" class="wPrintButton normal" id="xmlEditorPrintButton" border="0" style="width:100%; max-width:30px" /><img src="../../template/Theme1_Standard/Print_hover.png" alt="" class="wPrintButton hover" id="xmlEditorPrintButtonHover" border="0" style="width:100%; max-width:30px" /></a> 
				</div>
				<div class="brsBack">
					<a id="browseSeqBack0" class="wBSBackButton" href="../09_Groups.html_150210/HDF5_Groups.htm"><img alt="" src="../../template/Theme1_Standard/BSBack.png" class="wBSBackButton normal" id="xmlEditorBSBackButton" border="0" style="width:100%; max-width:19px" /><img alt="" src="../../template/Theme1_Standard/BSBack_hover.png" class="wBSBackButton hover" id="xmlEditorBSBackButtonHover" border="0" style="width:100%; max-width:19px" /></a> 
					 
				</div>
				<div class="brsNext">
					<a id="browseSeqNext0" class="wBSNextButton" href="../11_Datatypes.html_150210/HDF5_Datatypes.htm"><img alt="" src="../../template/Theme1_Standard/BSNext.png" class="wBSNextButton normal" id="xmlEditorBSNextButton" border="0" style="width:100%; max-width:19px" /><img alt="" src="../../template/Theme1_Standard/BSNext_hover.png" class="wBSNextButton hover" id="xmlEditorBSNextButtonHover" border="0" style="width:100%; max-width:19px" /></a> 
					 
				</div>
			</div>
			<div class="contentholder">
				<a name="content_top_placeholder"></a> 
				<div class="wTopic" id="rh_default_topic_placeholder_id">


 <p class="FM__Heading_Level1">5. <a name="XREF_DatasetsChapter"></a>HDF5 Datasets</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;/div&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body"> &#160;Original title. &#160;Which is proper?</p>
 <p class="FM__Body"> &#160;&lt;h2&gt;10. Datasets I/O&lt;/h2&gt;</p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&lt;a name=&quot;Intro&quot;&gt;</p>
 <p class="FM__Body">&lt;h3&gt;5.1. Introduction&lt;/h3&gt;</p>
 <p class="FM__Body">&lt;/a&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;An HDF5 dataset is an object composed of a collection of data elements, </p>
 <p class="FM__Body">&#160;&#160;or raw data, and metadata that stores a description of the data elements, </p>
 <p class="FM__Body">&#160;&#160;data layout, and all other information necessary to write, read, and interpret </p>
 <p class="FM__Body">&#160;&#160;the stored data. From the viewpoint of the application the raw data is stored </p>
 <p class="FM__Body"> &#160;as a one-dimensional or multi-dimensional array of elements (the &lt;em&gt;raw </p>
 <p class="FM__Body"> &#160;data&lt;/em&gt;), those elements can be any of several numerical or character </p>
 <p class="FM__Body">&#160;&#160;types, small arrays, or even compound types similar to C structs. The </p>
 <p class="FM__Body"> &#160;dataset object may have attribute objects. See the figure below.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/Dsets_fig1.JPG&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 1. Application view of a dataset&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Datatypes are described in  [ [ [ &quot;Datatypes&quot; ] ] ]. and in the [ [ [ &quot;HDF5 </p>
 <p class="FM__Body">&#160;&#160;Datatypes&quot; chapter in this guide ] ] ], Dataspace objects are described in </p>
 <p class="FM__Body"> &#160;[ [ [ Dataspace ] ] ], and Attributes are described in [ [ [ Attributes ] ] ].</p>
 <p class="FM__Body"> &#160;&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;A dataset object is stored in a file in two parts: a header and a data </p>
 <p class="FM__Body">&#160;&#160;array. The header contains information that is needed to interpret the </p>
 <p class="FM__Body">&#160;&#160;array portion of the dataset, as well as metadata (or pointers to metadata) </p>
 <p class="FM__Body">&#160;&#160;that describes or annotates the dataset. Header information includes the </p>
 <p class="FM__Body">&#160;&#160;name of the object, its dimensionality, its number-type, information about </p>
 <p class="FM__Body"> &#160;how the data itself is stored on disk (the &lt;em&gt;storage layout&lt;/em&gt;), and </p>
 <p class="FM__Body">&#160;&#160;other information used by the library to speed up access to the dataset </p>
 <p class="FM__Body"> &#160;or maintain the file&amp;rsquo;s integrity. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The HDF5 dataset interface, comprising the H5D functions, provides a </p>
 <p class="FM__Body">&#160;&#160;mechanism for managing HDF5 datasets including the transfer of data </p>
 <p class="FM__Body"> &#160;between memory and disk and the description of dataset properties. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;A dataset is used by other HDF5 APIs, either by name or by an </p>
 <p class="FM__Body"> &#160;identifier (e.g., returned by &lt;code&gt;H5Dopen&lt;/code&gt;).&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Link/Unlink&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;A dataset can be added to a group with one of the &lt;code&gt;H5Lcreate&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;calls, and deleted from a group with &lt;code&gt;H5Ldelete&lt;/code&gt;. The link and </p>
 <p class="FM__Body">&#160;&#160;unlink operations use the name of an object, which may be a dataset. The </p>
 <p class="FM__Body"> &#160;dataset does not have to open to be linked or unlinked.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Object reference&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;A dataset may be the target of an object reference.  The object </p>
 <p class="FM__Body"> &#160;reference is created by &lt;code&gt;H5Rcreate&lt;/code&gt; with the name of an object </p>
 <p class="FM__Body"> &#160;which may be a dataset and the reference type &lt;code&gt;H5R_OBJECT&lt;/code&gt;. </p>
 <p class="FM__Body"> &#160;The dataset does not have to be open to create a reference to it.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;An object reference may also refer to a region (selection) of a dataset. </p>
 <p class="FM__Body"> &#160;The reference is created with &lt;code&gt;H5Rcreate&lt;/code&gt; and a reference type of </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5R_DATASET_REGION&lt;/code&gt;.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;An object reference can be accessed by a call to &lt;code&gt;H5Rdereference&lt;/code&gt;. When the </p>
 <p class="FM__Body"> &#160;reference is to a dataset or dataset region, the &lt;code&gt;H5Rdeference&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;call returns an identifier to the dataset just as if &lt;code&gt;H5Dopen&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;has been called.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Adding attributes&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;A dataset may have user-defined attributes which are created with </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5Acreate&lt;/code&gt; and accessed through the H5A API. To create an </p>
 <p class="FM__Body">&#160;&#160;attribute for a dataset, the dataset must be open, and the identifier is </p>
 <p class="FM__Body"> &#160;passed to &lt;code&gt;H5Acreate&lt;/code&gt;. The attributes of a dataset are </p>
 <p class="FM__Body"> &#160;discovered and opened using &lt;code&gt;H5Aopen_name&lt;/code&gt;, </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5Aopen_idx&lt;/code&gt;, or &lt;code&gt;H5Aiterate&lt;/code&gt;; these functions </p>
 <p class="FM__Body">&#160;&#160;use the identifier of the dataset. An attribute can be deleted with </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5Adelete&lt;/code&gt; which also uses the identifier of the dataset.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The remaining sections of this chapter discuss... [To be written last.]&lt;/p&gt;</p>
 <p class="FM__Body"> &#160;&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;br&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;SCRIPT language=&quot;JavaScript&quot;&gt;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">document.writeln (&quot;</p>
 <p class="FM__Body">&lt;a name=&quot;FileFunctSums&quot;&gt;</p>
 <p class="FM__Body">&lt;div align=right&gt;</p>
 <p class="FM__Body">&lt;a href=&quot;#TOP&quot;&gt;&lt;font size=&quot;-1&quot;&gt;(Top)&lt;/font&gt;&lt;/a&gt;</p>
 <p class="FM__Body">&lt;/div&gt;</p>
 <p class="FM__Body">&lt;/a&gt;</p>
 <p class="FM__Body">&quot;);</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;/SCRIPT&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;a name=&quot;FileFunctSums&quot;&gt;</p>
 <p class="FM__Body">&lt;h3 class=pagebefore&gt;5.2. Dataset Function Summaries&lt;/h3&gt;</p>
 <p class="FM__Body">&lt;/a&gt;</p>
 <p class="FM__Body">&lt;p&gt;Functions that can be used with datasets (H5D functions) and property </p>
 <p class="FM__Body">list functions that can used with datasets (H5P functions) are listed below.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Function Listing 1. Dataset functions (H5D)</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;C Function&lt;br&gt;Fortran Function&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Purpose&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dcreate&lt;br&gt;h5dcreate_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Creates a dataset at the specified location. The C function is a </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;macro: see &lt;a href=&quot;../RM/APICompatMacros.html&quot;&gt;&amp;ldquo;API </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Compatibility Macros in HDF5.&amp;rdquo;&lt;/a&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dcreate_anon&lt;br&gt;h5dcreate_anon_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Creates a dataset in a file without linking it into the file structure. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dopen&lt;br&gt;h5dopen_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Opens an existing dataset. The C function is a </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;macro: see &lt;a href=&quot;../RM/APICompatMacros.html&quot;&gt;&amp;ldquo;API </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Compatibility Macros in HDF5.&amp;rdquo;&lt;/a&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dclose&lt;br&gt;h5dclose_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Closes the specified dataset.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dget_space&lt;br&gt;h5dget_space_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Returns an identifier for a copy of the dataspace for a dataset.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dget_space_status&lt;br&gt;h5dget_space_status_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Determines whether space has been allocated for a dataset.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dget_type&lt;br&gt;h5dget_type_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Returns an identifier for a copy of the datatype for a dataset.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dget_create_plist&lt;br&gt;h5dget_create_plist_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Returns an identifier for a copy of the dataset creation property </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;list for a dataset.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dget_access_plist&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Returns the dataset access property list associated with a dataset. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dget_offset&lt;br&gt;h5dget_offset_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Returns the dataset address in a file.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dget_storage_size&lt;br&gt;h5dget_storage_size_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Returns the amount of storage required for a dataset.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dvlen_get_buf_size&lt;br&gt;h5dvlen_get_max_len_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Determines the number of bytes required to store variable-length (VL) </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;data.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dvlen_reclaim&lt;br&gt;h5dvlen_reclaim_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Reclaims VL datatype memory buffers.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dread&lt;br&gt;h5dread_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Reads raw data from a dataset into a buffer.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dwrite&lt;br&gt;h5dwrite_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Writes raw data from a buffer to a dataset.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Diterate&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Iterates over all selected elements in a dataspace.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dgather&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Gathers data from a selection within a memory buffer. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dscatter&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scatters data into a selection within a memory buffer. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dfill&lt;br&gt;h5dfill_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Fills dataspace elements with a fill value in a memory buffer.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dset_extent&lt;br&gt;h5dset_extent_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Changes the sizes of a dataset&amp;rsquo;s dimensions. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Function Listing 2. Dataset creation property list functions (H5P)</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;C Function&lt;br&gt;Fortran Function&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Purpose&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_layout&lt;br&gt;h5pset_layout_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets the type of storage used to store the raw data for a dataset.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_layout&lt;br&gt;h5pget_layout_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Returns the layout of the raw data for a dataset.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_chunk&lt;br&gt;h5pset_chunk_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets the size of the chunks used to store a chunked layout dataset.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_chunk&lt;br&gt;h5pget_chunk_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Retrieves the size of chunks for the raw data of a chunked layout </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dataset.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_deflate&lt;br&gt;h5pset_deflate_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets compression method and compression level.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_fill_value&lt;br&gt;h5pset_fill_value_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets the fill value for a dataset.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_fill_value&lt;br&gt;h5pget_fill_value_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Retrieves a dataset fill value.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pfill_value_defined&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Determines whether the fill value is defined.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_fill_time&lt;br&gt;h5pset_fill_time_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets the time when fill values are written to a dataset.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_fill_time&lt;br&gt;h5pget_fill_time_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Retrieves the time when fill value are written to a dataset.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_alloc_time&lt;br&gt;h5pset_alloc_time_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets the timing for storage space allocation.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_alloc_time&lt;br&gt;h5pget_alloc_time_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Retrieves the timing for storage space allocation.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_filter&lt;br&gt;h5pset_filter_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Adds a filter to the filter pipeline.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pall_filters_avail&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Verifies that all required filters are available.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_nfilters&lt;br&gt;h5pget_nfilters_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Returns the number of filters in the pipeline.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_filter&lt;br&gt;h5pget_filter_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Returns information about a filter in a pipeline. The C function is a </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;macro: see &lt;a href=&quot;../RM/APICompatMacros.html&quot;&gt;&amp;ldquo;API </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Compatibility Macros in HDF5.&amp;rdquo;&lt;/a&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_filter_by_id&lt;br&gt;h5pget_filter_by_id_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Returns information about the specified filter. The C function is a </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;macro: see &lt;a href=&quot;../RM/APICompatMacros.html&quot;&gt;&amp;ldquo;API </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Compatibility Macros in HDF5.&amp;rdquo;&lt;/a&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pmodify_filter&lt;br&gt;h5pmodify_filter_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Modifies a filter in the filter pipeline.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Premove_filter&lt;br&gt;h5premove_filter_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Deletes one or more filters in the filter pipeline.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_fletcher32&lt;br&gt;h5pset_fletcher32_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets up use of the Fletcher32 checksum filter.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_nbit&lt;br&gt;h5pset_nbit_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets up use of the n-bit filter.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_scaleoffset&lt;br&gt;h5pset_scaleoffset_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets up use of the scale-offset filter.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_shuffle&lt;br&gt;h5pset_shuffle_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets up use of the shuffle filter.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_szip&lt;br&gt;h5pset_szip_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets up use of the Szip compression filter.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_external&lt;br&gt;h5pset_external_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Adds an external file to the list of external files.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_external_count&lt;br&gt;h5pget_external_count_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Returns the number of external files for a dataset.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_external&lt;br&gt;h5pget_external_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Returns information about an external file.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_char_encoding&lt;br&gt;h5pset_char_encoding_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets the character encoding used to encode a string. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Use to set ASCII or UTF-8 character encoding for object names.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_char_encoding&lt;br&gt;h5pget_char_encoding_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Retrieves the character encoding used to create a string. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&lt;br/&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Function Listing 3. Dataset access property list functions (H5P)</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;C Function&lt;br&gt;Fortran Function&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Purpose&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_buffer&lt;br&gt;h5pset_buffer_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets type conversion and background buffers.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_buffer&lt;br&gt;h5pget_buffer_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Reads buffer settings.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;!-- 8.10.10, MEE: I removed two dataset access property list functions: </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H5Pset_preserve and H5Pget_preserve. --&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_chunk_cache&lt;br&gt;h5pset_chunk_cache_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets the raw data chunk cache parameters.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_chunk_cache&lt;br&gt;h5pget_chunk_cache_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Retrieves the raw data chunk cache parameters. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_edc_check&lt;br&gt;h5pset_edc_check_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets whether to enable error-detection when reading a dataset.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_edc_check&lt;br&gt;h5pget_edc_check_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Determines whether error-detection is enabled for dataset reads.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_filter_callback&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets user-defined filter callback function.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_data_transform&lt;br&gt;h5pset_data_transform_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets a data transform expression.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_data_transform&lt;br&gt;h5pget_data_transform_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Retrieves a data transform expression.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_type_conv_cb&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets user-defined datatype conversion callback function.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_type_conv_cb&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Gets user-defined datatype conversion callback function.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_hyper_vector_size&lt;br&gt;h5pset_hyper_vector_size_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets number of I/O vectors to be read/written in hyperslab I/O.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_hyper_vector_size&lt;br&gt;h5pget_hyper_vector_size_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Retrieves number of I/O vectors to be read/written in hyperslab I/O.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_btree_ratios&lt;br&gt;h5pset_btree_ratios_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets B-tree split ratios for a dataset transfer property list.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_btree_ratios&lt;br&gt;h5pget_btree_ratios_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Gets B-tree split ratios for a dataset transfer property list.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_vlen_mem_manager&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets the memory manager for variable-length datatype allocation in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dread&lt;/code&gt; and &lt;code&gt;H5Dvlen_reclaim&lt;/code&gt;.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_vlen_mem_manager&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Gets the memory manager for variable-length datatype allocation in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dread&lt;/code&gt; and &lt;code&gt;H5Dvlen_reclaim&lt;/code&gt;.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_dxpl_mpio&lt;br&gt;h5pset_dxpl_mpio_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets data transfer mode.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_dxpl_mpio&lt;br&gt;h5pget_dxpl_mpio_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Returns the data transfer mode.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_dxpl_mpio_chunk_opt&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets a flag specifying linked-chunk I/O or multi-chunk I/O.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_dxpl_mpio_chunk_opt_num&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets a numeric threshold for linked-chunk I/O.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_dxpl_mpio_chunk_opt_ratio&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets a ratio threshold for collective I/O.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_dxpl_mpio_collective_opt&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets a flag governing the use of independent versus collective I/O. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_multi_type&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets the type of data property for the MULTI driver.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_multi_type&lt;br&gt;(none)&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Retrieves the type of data property for the MULTI driver.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pset_small_data_block_size&lt;br&gt;h5pset_small_data_block_size_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Sets the size of a contiguous block reserved for small data.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Pget_small_data_block_size&lt;br&gt;h5pget_small_data_block_size_f&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Retrieves the current small data block size setting.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;SCRIPT language=&quot;JavaScript&quot;&gt;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">document.writeln (&quot;</p>
 <p class="FM__Body">&lt;a name=&quot;PModel&quot;&gt;</p>
 <p class="FM__Body">&lt;div align=right&gt;</p>
 <p class="FM__Body">&lt;a href=&quot;#TOP&quot;&gt;&lt;font size=&quot;-1&quot;&gt;(Top)&lt;/font&gt;&lt;/a&gt;</p>
 <p class="FM__Body">&lt;/div&gt;</p>
 <p class="FM__Body">&lt;/a&gt;</p>
 <p class="FM__Body">&quot;);</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;/SCRIPT&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;a name=&quot;PModel&quot;&gt;</p>
 <p class="FM__Body">&lt;h3 class=pagebefore&gt;5.3. Programming Model&lt;/h3&gt;</p>
 <p class="FM__Body">&lt;/a&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;This section explains the programming model for datasets.&lt;/p&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&lt;h4&gt;5.3.1. General Model&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The programming model for using a dataset has three main phases:&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body"> &#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;Obtain access to the dataset &lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;Operate on the dataset using the dataset identifier returned </p>
 <p class="FM__Body"> &#160;&#160;&#160;at access &lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;Release the dataset&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&lt;/ul&gt;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;These three phases or steps are described in more detail below the </p>
 <p class="FM__Body"> &#160;figure.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;A dataset may be opened several times and operations performed </p>
 <p class="FM__Body">&#160;&#160;with several different identifiers to the same dataset. All the </p>
 <p class="FM__Body">&#160;&#160;operations affect the dataset although the calling program must </p>
 <p class="FM__Body"> &#160;synchronize if necessary to serialize accesses.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Note that the dataset remains open until every identifier is closed. </p>
 <p class="FM__Body"> &#160;The figure below shows the basic sequence of operations.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/Dsets_fig2.JPG&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 2. Dataset programming sequence&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Creation and data access operations may have optional parameters </p>
 <p class="FM__Body"> &#160;which are set with property lists. &#160;The general programming model is:&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Create property list of appropriate class (dataset create, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dataset transfer)&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Set properties as needed; each type of property has its own </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;format and datatype&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Pass the property list as a parameter of the API call&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&lt;/ul&gt;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The steps below describe the programming phases or steps for using a </p>
 <p class="FM__Body"> &#160;dataset.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Step 1. Obtain Access&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;A new dataset is created by a call to &lt;code&gt;H5Dcreate&lt;/code&gt;. If </p>
 <p class="FM__Body"> &#160;successful, the call returns an identifier for the newly created dataset.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Access to an existing dataset is obtained by a call to &lt;code&gt;H5Dopen&lt;/code&gt;. This call </p>
 <p class="FM__Body"> &#160;returns an identifier for the existing dataset.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;An object reference </p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body">&#160;&#160;(Chapter ???) </p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&#160;&#160;may be dereferenced to obtain an identifier to </p>
 <p class="FM__Body"> &#160;the dataset it points to.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;In each of these cases, the successful call returns an identifier </p>
 <p class="FM__Body">&#160;&#160;to the dataset. The identifier is used in subsequent operations until </p>
 <p class="FM__Body"> &#160;the dataset is closed.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Step 2. Operate on the Dataset&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The dataset identifier can be used to write and read data to the dataset, </p>
 <p class="FM__Body">&#160;&#160;to query and set properties, and to perform other operations such as </p>
 <p class="FM__Body"> &#160;adding attributes, linking in groups, and creating references.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The dataset identifier can be used for any number of </p>
 <p class="FM__Body"> &#160;operations until the dataset is closed.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Step 3. Close the Dataset&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;When all operations are completed, the dataset identifier should </p>
 <p class="FM__Body"> &#160;be closed. This releases the dataset. &lt;/p&gt;</p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body"> &#160;{ and writes all metadata to the file? }</p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;After the identifier is closed, it cannot be used for further operations.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;5.3.2. Create Dataset&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;A dataset is created and initialized with a call to &lt;code&gt;H5Dcreate&lt;/code&gt;. The dataset </p>
 <p class="FM__Body"> &#160;create operation sets permanent properties of the dataset:&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Name&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Dataspace&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Datatype&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Storage properties&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&lt;/ul&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;These properties cannot be changed for the life of the dataset, </p>
 <p class="FM__Body"> &#160;although the dataspace may be expanded up to its maximum dimensions.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Name&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;A dataset name is a sequence of alphanumeric ASCII characters. The </p>
 <p class="FM__Body">&#160;&#160;full name would include a tracing of the group hierarchy from the root </p>
 <p class="FM__Body">&#160;&#160;group of the file, e.g., /rootGroup/groupA/subgroup23/dataset1. The </p>
 <p class="FM__Body">&#160;&#160;local name or relative name within the lowest-level group containing </p>
 <p class="FM__Body"> &#160;the dataset would include none of the group hierarchy. e.g., Dataset1.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Dataspace&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The dataspace of a dataset defines the number of dimensions and the </p>
 <p class="FM__Body">&#160;&#160;size of each dimension. </p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body">&#160;&#160;[[Dataspace]]. </p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&#160;&#160;The dataspace defines the number of dimensions, </p>
 <p class="FM__Body">&#160;&#160;and the maximum dimension sizes and current size of each dimension. </p>
 <p class="FM__Body">&#160;&#160;The maximum dimension size can be a fixed value or the constant </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5D_UNLIMITED&lt;/code&gt;, in which case the actual dimension size </p>
 <p class="FM__Body"> &#160;can be changed with calls to &lt;code&gt;H5Dset_extent&lt;/code&gt;, up to the </p>
 <p class="FM__Body"> &#160;maximum set with the &lt;code&gt;maxdims&lt;/code&gt; parameter in the </p>
 <p class="FM__Body"> &#160;&lt;a href=&quot;../RM/RM_H5S.html#Dataspace-CreateSimple&quot; target=RMwindow&gt;</p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5Screate_simple&lt;/code&gt;&lt;/a&gt; call that established the </p>
 <p class="FM__Body">&#160;&#160;dataset&amp;rsquo;s original dimensions. The maximum dimension size is set </p>
 <p class="FM__Body"> &#160;when the dataset is created and cannot be changed.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Datatype&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Raw data has a datatype which describes the layout of the raw data </p>
 <p class="FM__Body">&#160;&#160;stored in the file. </p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body">&#160;&#160;(See [[Datatype]]. </p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&#160;&#160;The datatype is set when the dataset is created </p>
 <p class="FM__Body">&#160;&#160;and can never be changed. When data is transferred to and from the dataset, </p>
 <p class="FM__Body">&#160;&#160;the HDF5 Library will assure that the data is transformed to and </p>
 <p class="FM__Body"> &#160;from the stored format.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Storage Properties&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Storage properties of the dataset are set when it is created. The </p>
 <p class="FM__Body">&#160;&#160;required inputs table </p>
 <p class="FM__Body">&#160;&#160;below shows the categories of storage properties. The storage properties </p>
 <p class="FM__Body"> &#160;cannot be changed after the dataset is created. &lt;/p&gt;</p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body"> &#160;in [[storage properties]]</p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Filters&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;When a dataset is created, optional filters are specified. The </p>
 <p class="FM__Body">&#160;&#160;filters are added to the data transfer pipeline when data is read or </p>
 <p class="FM__Body">&#160;&#160;written. The standard library includes filters to implement compression, </p>
 <p class="FM__Body">&#160;&#160;data shuffling, and error detection code. &#160;Additional user-defined </p>
 <p class="FM__Body"> &#160;filters may also be used. &lt;/p&gt;</p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body"> &#160;See [[[filter]]].</p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The required filters are stored as part of the dataset, and the list may </p>
 <p class="FM__Body">&#160;&#160;not be changed after the dataset is created. The HDF5 Library automatically </p>
 <p class="FM__Body"> &#160;applies the filters whenever data is transferred.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Summary&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;A newly created dataset has no attributes and no data values. The </p>
 <p class="FM__Body">&#160;&#160;dimensions, datatype, storage properties, and selected filters are set. </p>
 <p class="FM__Body">&#160;&#160;The table below lists the required inputs, and the second table below lists </p>
 <p class="FM__Body"> &#160;the optional inputs.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;2&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Table 1. Required inputs&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;25%&quot;&gt;&lt;b&gt;Required Inputs&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;75%&quot;&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Dataspace&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;The shape of the array.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Datatype&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;The layout of the stored elements.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Name&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;The name of the dataset in the group.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;2&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Table 2. Optional inputs&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;25%&quot;&gt;&lt;b&gt;Optional Inputs&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;75%&quot;&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Storage Layout&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;How the data is organized in the file including chunking.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; Fill Value&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;The behavior and value for uninitialized data.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; External Storage&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Option to store the raw data in an external file.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; Filters&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Select optional filters to be applied. One of the filters </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;that might be applied is compression.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;To create a new dataset, go through the following general steps:&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;Set dataset characteristics (optional where default settings are </p>
 <p class="FM__Body"> &#160;&#160;&#160;acceptable)&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;ul&gt;               </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Datatype&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Dataspace&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Dataset creation property list&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ul&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;Create the dataset&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;Close the datatype, dataspace, and property list (as necessary)&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;Close the dataset&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ul&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Example 1 below shows example code to create an empty dataset. The </p>
 <p class="FM__Body">&#160;&#160;dataspace is 7 x 8, and the datatype is a big-endian integer. The dataset </p>
 <p class="FM__Body">&#160;&#160;is created with the name &amp;ldquo;dset1&amp;rdquo; and is a member of the root </p>
 <p class="FM__Body"> &#160;group, &amp;ldquo;/&amp;rdquo;.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;pre&gt;</p>
 <p class="FM__Body">&#160;&#160;hid_t &#160;&#160;&#160;dataset, datatype, dataspace; &#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&#160;&#160;/* </p>
 <p class="FM__Body">&#160;&#160;&#160;* Create dataspace: Describe the size of the array and </p>
 <p class="FM__Body">&#160;&#160;&#160;* create the dataspace for fixed-size dataset. </p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;dimsf[0] = 7;</p>
 <p class="FM__Body"> &#160;dimsf[1] = 8;</p>
 <p class="FM__Body">&#160;&#160;dataspace = H5Screate_simple(2, dimsf, NULL); </p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Define datatype for the data in the file.</p>
 <p class="FM__Body"> &#160;&#160;* For this example, store little-endian integer numbers.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;datatype = H5Tcopy(H5T_NATIVE_INT);</p>
 <p class="FM__Body"> &#160;status = H5Tset_order(datatype, H5T_ORDER_LE);</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body">&#160;&#160;&#160;* Create a new dataset within the file using defined </p>
 <p class="FM__Body"> &#160;&#160;* dataspace and datatype. No properties are set.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body">&#160;&#160;dataset = H5Dcreate(file, &quot;/dset&quot;, datatype, dataspace, H5P_DEFAULT, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H5P_DEFAULT, H5P_DEFAULT);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;H5Dclose(dataset);</p>
 <p class="FM__Body"> &#160;H5Sclose(dataspace);</p>
 <p class="FM__Body"> &#160;H5Tclose(datatype);&lt;/pre&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Example 1. Create an empty dataset&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Example 2 below shows example code to create a similar dataset with a </p>
 <p class="FM__Body">&#160;&#160;fill value of &amp;lsquo;-1&amp;rsquo;. </p>
 <p class="FM__Body">&#160;&#160;This code has the same steps as in the example above, but uses a non-default </p>
 <p class="FM__Body">&#160;&#160;property list. A file creation property list is created, and then the </p>
 <p class="FM__Body">&#160;&#160;fill value is set to the desired value. Then the property list is passed </p>
 <p class="FM__Body"> &#160;to the &lt;code&gt;H5Dcreate&lt;/code&gt; call.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;pre&gt;</p>
 <p class="FM__Body"> &#160;hid_t &#160;&#160;&#160;dataset, datatype, dataspace;</p>
 <p class="FM__Body"> &#160;hid_t plist; &#160;/* property list */</p>
 <p class="FM__Body"> &#160;int fillval = -1;</p>
 <p class="FM__Body"> &#160;dimsf[0] = 7;</p>
 <p class="FM__Body"> &#160;dimsf[1] = 8;</p>
 <p class="FM__Body">&#160;&#160;dataspace = H5Screate_simple(2, dimsf, NULL); </p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body"> &#160;datatype = H5Tcopy(H5T_NATIVE_INT);</p>
 <p class="FM__Body"> &#160;status = H5Tset_order(datatype, H5T_ORDER_LE);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body">&#160;&#160;&#160;* Example of Dataset Creation property list: set fill value to '-1'</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;plist = H5Pcreate(H5P_DATASET_CREATE);</p>
 <p class="FM__Body"> &#160;status = H5Pset_fill_value(plist, datatype, &amp;amp;fillval);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/* Same as above, but use the property list */</p>
 <p class="FM__Body">&#160;&#160;dataset = H5Dcreate(file, &quot;/dset&quot;, datatype, dataspace, H5P_DEFAULT, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;plist, H5P_DEFAULT);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;H5Dclose(dataset);</p>
 <p class="FM__Body"> &#160;H5Sclose(dataspace);</p>
 <p class="FM__Body"> &#160;H5Tclose(datatype);</p>
 <p class="FM__Body"> &#160;H5Pclose(plist);&lt;/pre&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Example 2. Create a dataset with fill value set&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;After this code is executed, the dataset has been created and written to </p>
 <p class="FM__Body">&#160;&#160;the file. The data array is uninitialized. &#160;Depending on the storage </p>
 <p class="FM__Body">&#160;&#160;strategy and fill value options that have been selected, some or all of the </p>
 <p class="FM__Body">&#160;&#160;space may be allocated in the file, and fill values may be written in the </p>
 <p class="FM__Body"> &#160;file.&lt;/p&gt;</p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body"> &#160;See &amp;lt;&amp;lt;below&amp;gt;&amp;gt;.</p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;5.3.3. Data Transfer Operations on a Dataset&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Data is transferred between memory and the raw data array of the dataset </p>
 <p class="FM__Body"> &#160;through &lt;code&gt;H5Dwrite&lt;/code&gt; and &lt;code&gt;H5Dread&lt;/code&gt; operations. A data </p>
 <p class="FM__Body"> &#160;transfer has the following basic steps:&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body"> &#160;&lt;ol&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Allocate and initialize memory space as needed&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Define the datatype of the memory elements&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Define the elements to be transferred (a selection, or all the </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;elements)&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Set data transfer properties (including parameters for filters or </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;file drivers) as needed&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Call the H5D API&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&lt;/ol&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Note that the location of the data in the file, the datatype of the data in </p>
 <p class="FM__Body">&#160;&#160;the file, the storage properties, and the filters do not need to be specified </p>
 <p class="FM__Body">&#160;&#160;because these are stored as a permanent part of the dataset. A selection of </p>
 <p class="FM__Body">&#160;&#160;elements from the dataspace is specified; the selected elements may be the </p>
 <p class="FM__Body"> &#160;whole dataspace.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The figure below shows a diagram of a write operation which transfers a </p>
 <p class="FM__Body">&#160;&#160;data array from memory to a dataset in the file (usually on disk). A read </p>
 <p class="FM__Body"> &#160;operation has similar parameters with the data flowing the other direction.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/Dsets_fig5.JPG&quot; width=&quot;670&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 3. A write operation&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Memory Space&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The calling program must allocate sufficient memory to store the data </p>
 <p class="FM__Body">&#160;&#160;elements to be transferred. For a write (from memory to the file), the </p>
 <p class="FM__Body">&#160;&#160;memory must be initialized with the data to be written to the file. For </p>
 <p class="FM__Body">&#160;&#160;a read, the memory must be large enough to store the elements that </p>
 <p class="FM__Body">&#160;&#160;will be read. The amount of storage needed can be computed from the </p>
 <p class="FM__Body">&#160;&#160;memory datatype (which defines the size of each data element) and the </p>
 <p class="FM__Body"> &#160;number of elements in the selection.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Memory Datatype&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The memory layout of a single data element is specified by the memory </p>
 <p class="FM__Body">&#160;&#160;datatype. This specifies the size, alignment, and byte order of the </p>
 <p class="FM__Body">&#160;&#160;element as well as the datatype class. Note that the memory datatype </p>
 <p class="FM__Body">&#160;&#160;must be the same datatype class as the file, but may have different byte </p>
 <p class="FM__Body">&#160;&#160;order and other properties. &#160;The HDF5 Library automatically transforms </p>
 <p class="FM__Body">&#160;&#160;data elements between the source and destination layouts. See the chapter </p>
 <p class="FM__Body"> &#160;&amp;ldquo;&lt;a href=&quot;11_Datatypes.html&quot;&gt;HDF5 Datatypes&lt;/a&gt;&amp;rdquo; </p>
 <p class="FM__Body"> &#160;for more details.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;For a write, the memory datatype defines the layout of the data to be </p>
 <p class="FM__Body">&#160;&#160;written; an example is IEEE floating-point numbers in native byte order. </p>
 <p class="FM__Body">&#160;&#160;If the file datatype (defined when the dataset is created) is different </p>
 <p class="FM__Body">&#160;&#160;but compatible, the HDF5 Library will transform each data element when </p>
 <p class="FM__Body">&#160;&#160;it is written. For example, if the file byte order is different than </p>
 <p class="FM__Body"> &#160;the native byte order, the HDF5 Library will swap the bytes.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;For a read, the memory datatype defines the desired layout of the </p>
 <p class="FM__Body">&#160;&#160;data to be read. This must be compatible with the file datatype, but </p>
 <p class="FM__Body">&#160;&#160;should generally use native formats, e.g., byte orders. The HDF5 Library </p>
 <p class="FM__Body"> &#160;will transform each data element as it is read.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Selection&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The data transfer will transfer some or all of the elements of the </p>
 <p class="FM__Body">&#160;&#160;dataset depending on the dataspace selection. The selection has two </p>
 <p class="FM__Body">&#160;&#160;dataspace objects: one for the source, and one for the destination. </p>
 <p class="FM__Body">&#160;&#160;These objects describe which elements of the dataspace to be transferred. </p>
 <p class="FM__Body">&#160;&#160;Some (partial I/O) or all of the data may be transferred. Partial I/O </p>
 <p class="FM__Body">&#160;&#160;is defined by defining hyperslabs or lists of elements in a dataspace </p>
 <p class="FM__Body"> &#160;object.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The dataspace selection for the source defines the indices of the elements </p>
 <p class="FM__Body">&#160;&#160;to be read or written. The two selections must define the same number of </p>
 <p class="FM__Body">&#160;&#160;points, but the order and layout may be different. &#160;The HDF5 Library </p>
 <p class="FM__Body">&#160;&#160;automatically selects and distributes the elements according to the </p>
 <p class="FM__Body">&#160;&#160;selections. It might, for example, perform a scatter-gather or </p>
 <p class="FM__Body"> &#160;sub-set of the data. &lt;/p&gt;</p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body"> &#160;See [[Selections]].</p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Data Transfer Properties&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;For some data transfers, additional parameters should be set using the </p>
 <p class="FM__Body">&#160;&#160;transfer property list. The table below lists the categories of transfer </p>
 <p class="FM__Body">&#160;&#160;properties. These properties set parameters for the HDF5 Library and may </p>
 <p class="FM__Body">&#160;&#160;be used to pass parameters for optional filters and file drivers. For </p>
 <p class="FM__Body">&#160;&#160;example, transfer properties are used to select independent or collective </p>
 <p class="FM__Body"> &#160;operation when using MPI-I/O.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;2&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Table 3. Categories of transfer properties&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;b&gt;Properties&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Library parameters&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Internal caches, buffers, B-Trees, etc.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Memory management&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Variable-length memory management, data overwrite&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;File driver management&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Parameters for file drivers&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Filter management&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Parameters for filters&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Data Transfer Operation (Read or Write)&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The data transfer is done by calling &lt;code&gt;H5Dread&lt;/code&gt; or </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5Dwrite&lt;/code&gt; with the parameters described above. The HDF5 </p>
 <p class="FM__Body">&#160;&#160;Library constructs the required pipeline, which will scatter-gather, </p>
 <p class="FM__Body">&#160;&#160;transform datatypes, apply the requested filters, and use the correct </p>
 <p class="FM__Body"> &#160;file driver.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;During the data transfer, the transformations and filters are applied to </p>
 <p class="FM__Body">&#160;&#160;each element of the data in the required order until all the </p>
 <p class="FM__Body"> &#160;data is transferred.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body"> &#160;&lt;p&gt;[[See Data Transfer Below]]</p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Summary&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;To perform a data transfer, it is necessary to allocate and initialize </p>
 <p class="FM__Body">&#160;&#160;memory, describe the source and destination, set required and optional </p>
 <p class="FM__Body"> &#160;transfer properties, and call the H5D API. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Examples&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The basic procedure to &lt;b&gt;write&lt;/b&gt; to a dataset is the following:&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dir&gt;</p>
 <p class="FM__Body"> &#160;Open the dataset.&lt;br&gt;</p>
 <p class="FM__Body">&#160;&#160;Set the dataset dataspace for the write (optional if dataspace is </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5S_SELECT_ALL&lt;/code&gt;).&lt;br&gt;</p>
 <p class="FM__Body"> &#160;Write data.&lt;br&gt;</p>
 <p class="FM__Body"> &#160;Close the datatype, dataspace, and property list (as necessary).&lt;br&gt;</p>
 <p class="FM__Body"> &#160;Close the dataset.&lt;br&gt;</p>
 <p class="FM__Body">&lt;/dir&gt; </p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Example 3 below shows example code to write a 4 x 6 array of integers. </p>
 <p class="FM__Body">&#160;&#160;In the example, the data is initialized in the memory array dset_data. &#160;</p>
 <p class="FM__Body">&#160;&#160;The dataset has already been created in the file, so it is opened </p>
 <p class="FM__Body"> &#160;with &lt;code&gt;H5Dopen&lt;/code&gt;.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The data is written with &lt;code&gt;H5Dwrite&lt;/code&gt;. The arguments are the </p>
 <p class="FM__Body"> &#160;dataset identifier, the memory datatype (&lt;code&gt;H5T_NATIVE_INT&lt;/code&gt;), the </p>
 <p class="FM__Body"> &#160;memory and file selections (&lt;code&gt;H5S_ALL&lt;/code&gt; in this case: </p>
 <p class="FM__Body">&#160;&#160;the whole array), and the default (empty) property list. The last argument </p>
 <p class="FM__Body"> &#160;is the data to be transferred.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;pre&gt;</p>
 <p class="FM__Body"> &#160;hid_t &#160;&#160;&#160;&#160;&#160;&#160;file_id, dataset_id; &#160;/* identifiers */</p>
 <p class="FM__Body"> &#160;herr_t &#160;&#160;&#160;&#160;&#160;status;</p>
 <p class="FM__Body"> &#160;int &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i, j, dset_data[4][6];</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/* Initialize the dataset. */</p>
 <p class="FM__Body"> &#160;for (i = 0; i &amp;lt; 4; i++)</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;for (j = 0; j &amp;lt; 6; j++)</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dset_data[i][j] = i * 6 + j + 1;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/* Open an existing file. */</p>
 <p class="FM__Body"> &#160;file_id = H5Fopen(&quot;dset.h5&quot;, H5F_ACC_RDWR, H5P_DEFAULT);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/* Open an existing dataset. */</p>
 <p class="FM__Body"> &#160;dataset_id = H5Dopen(file_id, &quot;/dset&quot;, H5P_DEFAULT);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&#160;&#160;/* Write the entire dataset, using 'dset_data': </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;memory type is 'native int'</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;write the entire dataspace to the entire dataspace,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;no transfer properties,</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body">&#160;&#160;status = H5Dwrite(dataset_id, H5T_NATIVE_INT, H5S_ALL, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H5S_ALL, H5P_DEFAULT, dset_data);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;status = H5Dclose(dataset_id);&lt;/pre&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Example 3. Write an array of integers&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Example 4 below shows a similar write except for setting a non-default </p>
 <p class="FM__Body">&#160;&#160;value for the transfer buffer. </p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body">&#160;&#160;&amp;lt;&amp;lt;explain what this does&amp;gt;&amp;gt;. &#160;</p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&#160;&#160;The code is the same as Example 3, but a transfer </p>
 <p class="FM__Body">&#160;&#160;property list is created, and the desired buffer size is set. The </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5Dwrite&lt;/code&gt; function has the same arguments, but uses the </p>
 <p class="FM__Body"> &#160;property list to set the buffer.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;pre&gt;</p>
 <p class="FM__Body">&#160;&#160;hid_t &#160;&#160;&#160;&#160;&#160;&#160;file_id, dataset_id; &#160;</p>
 <p class="FM__Body"> &#160;hid_t &#160;&#160;&#160;&#160;&#160;&#160;xferplist;</p>
 <p class="FM__Body"> &#160;herr_t &#160;&#160;&#160;&#160;&#160;status;</p>
 <p class="FM__Body"> &#160;int &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i, j, dset_data[4][6];</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;file_id = H5Fopen(&quot;dset.h5&quot;, H5F_ACC_RDWR, H5P_DEFAULT);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;dataset_id = H5Dopen(file_id, &quot;/dset&quot;, H5P_DEFAULT);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Example: set type conversion buffer to 64MB</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;xferplist = H5Pcreate(H5P_DATASET_XFER);</p>
 <p class="FM__Body"> &#160;status = H5Pset_buffer( xferplist, 64 * 1024 *1024, NULL, NULL);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&#160;&#160;/* Write the entire dataset, using 'dset_data': </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;memory type is 'native int'</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;write the entire dataspace to the entire dataspace,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;set the buffer size with the property list,</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body">&#160;&#160;status = H5Dwrite(dataset_id, H5T_NATIVE_INT, H5S_ALL, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;H5S_ALL, xferplist, dset_data);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;status = H5Dclose(dataset_id);&lt;/pre&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Example 4. Write an array using a property list&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Partial writes (i.e., of selected data elements, such as a hyperslab) </p>
 <p class="FM__Body"> &#160;are explained below [[partial I/O]]</p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The basic procedure to &lt;b&gt;read&lt;/b&gt; from a dataset is the </p>
 <p class="FM__Body"> &#160;following:&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dir&gt;</p>
 <p class="FM__Body">&#160;&#160;Define the memory dataspace of the read (optional if dataspace is </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5S_SELECT_ALL&lt;/code&gt;).&lt;br&gt; </p>
 <p class="FM__Body"> &#160;Open the dataset.&lt;br&gt; </p>
 <p class="FM__Body"> &#160;Get the dataset dataspace (if using &lt;code&gt;H5S_SELECT_ALL&lt;/code&gt; above).&lt;br&gt; </p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dir&gt;Else define dataset dataspace of read.&lt;/dir&gt; </p>
 <p class="FM__Body"> &#160;Define the memory datatype (optional).&lt;br&gt; </p>
 <p class="FM__Body"> &#160;Define the memory buffer.&lt;br&gt; </p>
 <p class="FM__Body"> &#160;Open the dataset.&lt;br&gt; </p>
 <p class="FM__Body"> &#160;Read data.&lt;br&gt; </p>
 <p class="FM__Body"> &#160;Close the datatype, dataspace, and property list (as necessary).&lt;br&gt; </p>
 <p class="FM__Body"> &#160;Close the dataset.</p>
 <p class="FM__Body">&lt;/dir&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The example below shows code that reads a 4 x 6 array of integers from </p>
 <p class="FM__Body">&#160;&#160;a dataset called &amp;ldquo;dset1&amp;rdquo;. First, the dataset is opened. </p>
 <p class="FM__Body"> &#160;The &lt;code&gt;H5Dread&lt;/code&gt; call has parameters:&lt;/p&gt;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;The dataset identifier (from &lt;code&gt;H5Dopen&lt;/code&gt;)&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;The memory datatype (&lt;code&gt;H5T_NATVE_INT&lt;/code&gt;)&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;The memory and file dataspace (&lt;code&gt;H5S_ALL&lt;/code&gt;, the whole array)&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;A default (empty) property list&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;The memory to be filled&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&lt;/ul&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;pre&gt;</p>
 <p class="FM__Body">&#160;&#160;hid_t &#160;&#160;&#160;&#160;&#160;&#160;file_id, dataset_id; &#160;</p>
 <p class="FM__Body"> &#160;herr_t &#160;&#160;&#160;&#160;&#160;status;</p>
 <p class="FM__Body"> &#160;int &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i, j, dset_data[4][6];</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/* Open an existing file. */</p>
 <p class="FM__Body"> &#160;file_id = H5Fopen(&quot;dset.h5&quot;, H5F_ACC_RDWR, H5P_DEFAULT);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/* Open an existing dataset. */</p>
 <p class="FM__Body"> &#160;dataset_id = H5Dopen(file_id, &quot;/dset&quot;, H5P_DEFAULT);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&#160;&#160;/* read the entire dataset, into 'dset_data': </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;memory type is 'native int'</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;read the entire dataspace to the entire dataspace,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;no transfer properties,</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body">&#160;&#160;status = H5Dread(dataset_id, H5T_NATIVE_INT, H5S_ALL, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;H5S_ALL, H5P_DEFAULT, dset_data);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;status = H5Dclose(dataset_id);&lt;/pre&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Example 5. Read an array from a dataset&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;5.3.4. Retrieve the Properties of a Dataset&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;</p>
 <p class="FM__Body">&#160;&#160;The functions listed below allow the user to retrieve </p>
 <p class="FM__Body">&#160;&#160;information regarding a dataset including the datatype, </p>
 <p class="FM__Body">&#160;&#160;the dataspace, the dataset creation property list, </p>
 <p class="FM__Body"> &#160;and the total stored size of the data.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Function Listing 4. Retrieve dataset information</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Query Function&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; &lt;code&gt;H5Dget_space&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; Retrieve the dataspace of the dataset </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;as stored in the file.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; &lt;code&gt;H5Dget_type&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; Retrieve the datatype of the dataset </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;as stored in the file.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; &lt;code&gt;H5Dget_create_plist&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; Retrieve the </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dataset creation properties.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; &lt;code&gt;H5Dget_storage_size&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Retrieve the total bytes for all the data of the dataset.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; &lt;code&gt;H5Dvlen_get_buf_size&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Retrieve the total bytes for all the variable-length </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;data of the dataset.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The example below illustrates how to retrieve dataset information.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;pre&gt;</p>
 <p class="FM__Body"> &#160;hid_t &#160;&#160;&#160;&#160;&#160;&#160;file_id, dataset_id;</p>
 <p class="FM__Body">&#160;&#160;hid_t &#160;&#160;&#160;&#160;&#160;&#160;dspace_id, dtype_id, plist_id; </p>
 <p class="FM__Body"> &#160;herr_t &#160;&#160;&#160;&#160;&#160;status;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/* Open an existing file. */</p>
 <p class="FM__Body"> &#160;file_id = H5Fopen(&quot;dset.h5&quot;, H5F_ACC_RDWR, H5P_DEFAULT);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/* Open an existing dataset. */</p>
 <p class="FM__Body"> &#160;dataset_id = H5Dopen(file_id, &quot;/dset&quot;, H5P_DEFAULT);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;dspace_id = H5Dget_space(dataset_id);</p>
 <p class="FM__Body"> &#160;dtype_id = H5Dget_type(dataset_id);</p>
 <p class="FM__Body"> &#160;plist_id = H5Dget_create_plist(dataset_id);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/* use the objects to discover the properties of the dataset */</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;status = H5Dclose(dataset_id);&lt;/pre&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Example 6. Retrieve dataset&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;SCRIPT language=&quot;JavaScript&quot;&gt;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">document.writeln (&quot;</p>
 <p class="FM__Body">&lt;a name=&quot;DTransfer&quot;&gt;</p>
 <p class="FM__Body">&lt;div align=right&gt;</p>
 <p class="FM__Body">&lt;a href=&quot;#TOP&quot;&gt;&lt;font size=&quot;-1&quot;&gt;(Top)&lt;/font&gt;&lt;/a&gt;</p>
 <p class="FM__Body">&lt;/div&gt;</p>
 <p class="FM__Body">&lt;/a&gt;</p>
 <p class="FM__Body">&quot;);</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;/SCRIPT&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;a name=&quot;DTransfer&quot;&gt;</p>
 <p class="FM__Body">&lt;h3 class=pagebefore&gt;5.4. Data Transfer&lt;/h3&gt;</p>
 <p class="FM__Body">&lt;/a&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The HDF5 Library implements data transfers through a pipeline which </p>
 <p class="FM__Body">&#160;&#160;implements data transformations (according to the datatype and selections), </p>
 <p class="FM__Body">&#160;&#160;chunking (as requested), and I/O operations using different mechanisms </p>
 <p class="FM__Body">&#160;&#160;(file drivers). The pipeline is automatically configured by the HDF5 </p>
 <p class="FM__Body">&#160;&#160;Library. Metadata is stored in the file so that the correct pipeline </p>
 <p class="FM__Body">&#160;&#160;can be constructed to retrieve the data. In addition, optional filters </p>
 <p class="FM__Body"> &#160;such as compression may be added to the standard pipeline. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The figure below illustrates data layouts for different layers of an </p>
 <p class="FM__Body">&#160;&#160;application using HDF5. The application data is organized as a </p>
 <p class="FM__Body"> &#160;multidimensional array of elements. The HDF5 format specification</p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body">&#160;&#160;&#160;[[cite it]] </p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&#160;&#160;defines the stored layout of the data and metadata. &#160;The storage layout </p>
 <p class="FM__Body">&#160;&#160;properties define the organization of the abstract data. This data is </p>
 <p class="FM__Body"> &#160;written and read to and from some storage medium.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/Dsets_fig9.JPG&quot; width=&quot;95%&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 4. Data layouts in an application &lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The last stage of a write (and first stage of a read) is managed by </p>
 <p class="FM__Body">&#160;&#160;an HDF5 file driver module. &#160;The virtual file layer of the HDF5 Library </p>
 <p class="FM__Body">&#160;&#160;implements a standard interface to alternative I/O methods, including </p>
 <p class="FM__Body">&#160;&#160;memory (AKA &amp;ldquo;core&amp;rdquo;) files, single serial file I/O, multiple </p>
 <p class="FM__Body">&#160;&#160;file I/O, and parallel I/O. The file driver maps a simple abstract HDF5 </p>
 <p class="FM__Body"> &#160;file to the specific access methods.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The raw data of an HDF5 dataset is conceived to be a multidimensional </p>
 <p class="FM__Body">&#160;&#160;array of data elements. This array may be stored in the file according to </p>
 <p class="FM__Body"> &#160;several storage strategies:&lt;/p&gt; </p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Contiguous&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Chunked&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Compact&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&lt;/ul&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The storage strategy does not affect data access methods except that </p>
 <p class="FM__Body">&#160;&#160;certain operations may be more or less efficient depending on the storage </p>
 <p class="FM__Body"> &#160;strategy and the access patterns.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Overall, the data transfer operations (&lt;code&gt;H5Dread&lt;/code&gt; and </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5Dwrite&lt;/code&gt;) work identically for any storage method, for any </p>
 <p class="FM__Body">&#160;&#160;file driver, and for any filters and transformations. The HDF5 Library </p>
 <p class="FM__Body">&#160;&#160;automatically manages the data transfer process. In some cases, transfer </p>
 <p class="FM__Body">&#160;&#160;properties should or must be used to pass additional parameters such as </p>
 <p class="FM__Body"> &#160;MPI/IO directives when used the parallel file driver.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;5.4.1. The Data Pipeline&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;When data is written or read to or from an HDF5 file, the HDF5 </p>
 <p class="FM__Body">&#160;&#160;Library passes the data through a sequence of processing steps which </p>
 <p class="FM__Body">&#160;&#160;are known as the HDF5 data pipeline. This data pipeline performs </p>
 <p class="FM__Body">&#160;&#160;operations on the data in memory such as byte swapping, alignment, </p>
 <p class="FM__Body">&#160;&#160;scatter-gather, and hyperslab selections. The HDF5 Library automatically </p>
 <p class="FM__Body">&#160;&#160;determines which operations are needed and manages the organization </p>
 <p class="FM__Body">&#160;&#160;of memory operations such as extracting selected elements from a </p>
 <p class="FM__Body">&#160;&#160;data block. The data pipeline modules operate on data buffers: each </p>
 <p class="FM__Body">&#160;&#160;module processes a buffer and passes the transformed buffer to the </p>
 <p class="FM__Body"> &#160;next stage.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The table below lists the stages of the data pipeline. The figure below </p>
 <p class="FM__Body">&#160;&#160;the table shows the order of processing </p>
 <p class="FM__Body"> &#160;during a read or write.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;2&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Table 4. Stages of the data pipeline&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;35%&quot;&gt;&lt;b&gt;Layers&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;65%&quot;&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;I/O initiation&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Initiation of HDF5 I/O activities (&lt;code&gt;H5Dwrite&lt;/code&gt; and </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Dread&lt;/code&gt;) in a user&amp;rsquo;s application program. &lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Memory hyperslab operation&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Data is scattered to (for read), or gathered from (for write) </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;the application&amp;rsquo;s memory buffer (bypassed if no datatype </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;conversion is needed).&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Datatype conversion&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Datatype is converted if it is different between memory and </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;storage (bypassed if no datatype conversion is needed).&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;File hyperslab operation&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Data is gathered from (for read), or scattered to (for write) to </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;file space in memory (bypassed if no datatype conversion is needed).&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Filter pipeline&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Data is processed by filters when it passes.  Data can be </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modified and restored here (bypassed if no datatype conversion </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;is needed, no filter is enabled, or dataset is not chunked).&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Virtual File Layer&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Facilitate easy plug-in file drivers such as MPIO or </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;POSIX I/O.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Actual I/O&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Actual file driver used by the library such as MPIO or STDIO.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/Dsets_fig10.JPG&quot;&gt;&lt;br&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 5. The processing order in the data pipeline&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The HDF5 Library automatically applies the stages as needed. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;When the memory dataspace selection is other than the whole dataspace, </p>
 <p class="FM__Body">&#160;&#160;the memory hyperslab stage scatters/gathers the data elements between </p>
 <p class="FM__Body">&#160;&#160;the application memory (described by the selection) and a contiguous </p>
 <p class="FM__Body">&#160;&#160;memory buffer for the pipeline. On a write, this is a gather operation; </p>
 <p class="FM__Body"> &#160;on a read, this is a scatter operation.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;When the memory datatype is different from the file datatype, the </p>
 <p class="FM__Body">&#160;&#160;datatype conversion stage transforms each data element. For example, if </p>
 <p class="FM__Body">&#160;&#160;data is written from 32-bit big-endian memory, and the file datatype is </p>
 <p class="FM__Body">&#160;&#160;32-bit little-endian, the datatype conversion stage will swap the bytes </p>
 <p class="FM__Body">&#160;&#160;of every elements. &#160;Similarly, when data is read from the file to </p>
 <p class="FM__Body"> &#160;native memory, byte swapping will be applied automatically when needed.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The file hyperslab stage is similar to the memory hyperslab stage, </p>
 <p class="FM__Body">&#160;&#160;but is managing the arrangement of the elements according to the </p>
 <p class="FM__Body">&#160;&#160;dataspace selection. When data is read, data elements are gathered from </p>
 <p class="FM__Body">&#160;&#160;the data blocks from the file to fill the contiguous buffers which are then </p>
 <p class="FM__Body">&#160;&#160;processed by the pipeline. When data is read, the elements from a buffer </p>
 <p class="FM__Body"> &#160;are scattered to the data blocks of the file.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;5.4.2. Data Pipeline Filters&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;In addition to the standard pipeline, optional stages, called filters, </p>
 <p class="FM__Body">&#160;&#160;can be inserted in the pipeline. </p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body">&#160;&#160;see [[chunked]]) </p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&#160;&#160;The standard distribution includes optional filters to </p>
 <p class="FM__Body">&#160;&#160;implement compression and error checking. User applications may </p>
 <p class="FM__Body"> &#160;add custom filters as well.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The HDF5 Library distribution includes or employs </p>
 <p class="FM__Body">&#160;&#160;several optional filters. These are listed in the table below. </p>
 <p class="FM__Body">&#160;&#160;The filters are applied in the pipeline between the virtual file layer and </p>
 <p class="FM__Body">&#160;&#160;the file hyperslab operation. See the figure above. The application can </p>
 <p class="FM__Body"> &#160;use any number of filters in any order.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;2&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Table 5. Data pipeline filters&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;35%&quot;&gt;&lt;b&gt;Filter&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;65%&quot;&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;gzip compression&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Data compression using &lt;code&gt;zlib&lt;/code&gt;.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Szip compression&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Data compression using the Szip library. See The HDF Group </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;website for more information regarding the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;a href=&quot;http://www.hdfgroup.org/doc_resource/SZIP/&quot; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;target=&quot;Ext1&quot;&gt;Szip&lt;/a&gt; filter.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;N-bit compression&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Data compression using an algorithm specialized for </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n-bit datatypes.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Scale-offset compression&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Data compression using using a &amp;ldquo;scale and </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;offset&amp;rdquo; algorithm.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Shuffling&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;To improve compression performance, data is regrouped by </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;its byte position in the data unit. In other words, the </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;1&lt;sup&gt;&lt;font size=&quot;-1&quot;&gt;st&lt;/font&gt;&lt;/sup&gt;, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;2&lt;sup&gt;&lt;font size=&quot;-1&quot;&gt;nd&lt;/font&gt;&lt;/sup&gt;, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;3&lt;sup&gt;&lt;font size=&quot;-1&quot;&gt;rd&lt;/font&gt;&lt;/sup&gt;, and </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;4&lt;sup&gt;&lt;font size=&quot;-1&quot;&gt;th&lt;/font&gt;&lt;/sup&gt; bytes of integers are </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;stored together respectively.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Fletcher32&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Fletcher32 checksum for error-detection.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Filters may be used only for chunked data and are applied to chunks of </p>
 <p class="FM__Body">&#160;&#160;data between the file hyperslab stage and the virtual file layer. At this </p>
 <p class="FM__Body">&#160;&#160;stage in the pipeline, the data is organized as fixed-size blocks of </p>
 <p class="FM__Body"> &#160;elements, and the filter stage processes each chunk separately.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Filters are selected by dataset creation properties, and some behavior may </p>
 <p class="FM__Body">&#160;&#160;be controlled by data transfer properties. The library determines what </p>
 <p class="FM__Body"> &#160;filters must be applied and applies them in the order in which they were</p>
 <p class="FM__Body"> &#160;set by the application. That is, if an application calls</p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5Pset_shuffle&lt;/code&gt; and then &lt;code&gt;H5Pset_deflate&lt;/code&gt; when </p>
 <p class="FM__Body"> &#160;creating</p>
 <p class="FM__Body">&#160;&#160;a dataset&amp;rsquo;s creation property list, the library will apply the </p>
 <p class="FM__Body"> &#160;shuffle filter first and then the deflate filter.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Information regarding the n-bit and scale-offset filters </p>
 <p class="FM__Body"> &#160;can be found in the &amp;ldquo;&lt;a href=&quot;#N-Bit&quot;&gt;Using the N-bit Filter&lt;/a&gt;&amp;rdquo;</p>
 <p class="FM__Body"> &#160;and &amp;ldquo;&lt;a href=&quot;#ScaleOffset&quot;&gt;Using the Scale-offset Filter&lt;/a&gt;&amp;rdquo; </p>
 <p class="FM__Body"> &#160;sections, respectively.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;5.4.3. File Drivers&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;I/O is performed by the HDF5 virtual file layer. The file driver </p>
 <p class="FM__Body">&#160;&#160;interface writes and reads blocks of data; each driver module implements </p>
 <p class="FM__Body">&#160;&#160;the interface using different I/O mechanisms. The table below lists the </p>
 <p class="FM__Body">&#160;&#160;file drivers currently supported. Note that the I/O mechanisms are </p>
 <p class="FM__Body">&#160;&#160;separated from the pipeline processing: the pipeline and filter </p>
 <p class="FM__Body"> &#160;operations are identical no matter what data access mechanism is used.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;2&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Table 6. I/O file drivers&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;b&gt;File Driver&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;code&gt;H5FD_CORE&lt;/code&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Store in memory (optional backing store to disk file).&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;code&gt;H5FD_FAMILY&lt;/code&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Store in a set of files.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;code&gt;H5FD_LOG&lt;/code&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Store in logging file.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;code&gt;H5FD_MPIO&lt;/code&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Store using MPI/IO.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;code&gt;H5FD_MULTI&lt;/code&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Store in multiple files. There are several options to control </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;layout.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;code&gt;H5FD_SEC2&lt;/code&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Serial I/O to file using Unix &amp;ldquo;section 2&amp;rdquo; functions.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;code&gt;H5FD_STDIO&lt;/code&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Serial I/O to file using Unix &amp;ldquo;stdio&amp;rdquo; functions.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Each file driver writes/reads contiguous blocks of bytes from a logically </p>
 <p class="FM__Body">&#160;&#160;contiguous address space. The file driver is responsible for managing the </p>
 <p class="FM__Body"> &#160;details of the different physical storage methods.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;In serial environments, everything above the virtual file layer tends </p>
 <p class="FM__Body"> &#160;to work identically no matter what storage method is used. &lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Some options may have substantially different performance depending </p>
 <p class="FM__Body">&#160;&#160;on the file driver that is used. In particular, multi-file and parallel </p>
 <p class="FM__Body">&#160;&#160;I/O may perform considerably differently from serial drivers depending </p>
 <p class="FM__Body"> &#160;on chunking and other settings.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;5.4.4. Data Transfer Properties to Manage the Pipeline&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Data transfer properties set optional parameters that control parts of the </p>
 <p class="FM__Body">&#160;&#160;data pipeline. The function listing below shows transfer properties </p>
 <p class="FM__Body"> &#160;that control the behavior of the library.&lt;/p&gt;</p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body"> &#160;&amp;lt;&amp;lt;Developers: explain what these do!&amp;gt;&amp;gt;&lt;/p&gt;</p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Function Listing 5. Data transfer property list functions</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Property&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; &lt;code&gt;H5Pset_buffer&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Maximum size for the type conversion buffer and the background </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;buffer. May also &#160;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;supply pointers to application-allocated buffers.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; &lt;code&gt;H5Pset_hyper_cache&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;Whether to cache hyperslab blocks during I/O.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; &lt;code&gt;H5Pset_btree_ratios&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Set the B-tree split ratios for a dataset transfer property list. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;The split ratios determine what percent of children go in the </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;first node when a node splits.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Some filters and file drivers require or use additional parameters </p>
 <p class="FM__Body">&#160;&#160;from the application program. These can be passed in the data transfer </p>
 <p class="FM__Body"> &#160;property list. The table below shows file driver property list functions.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Function Listing 6. File driver property list functions</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Property&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; &lt;code&gt;H5Pset_dxpl_mpio&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Control the MPI I/O transfer mode (independent or collective) </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;during data I/O operations.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; &lt;code&gt;H5Pset_small_data_block_size&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Reserves blocks of size bytes for the contiguous storage of the raw </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data portion of small datasets. The HDF5 Library then writes the raw data </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;from small datasets to this reserved space which reduces unnecessary </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;discontinuities within blocks of metadata and </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;improves I/O performance.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; &lt;code&gt;H5Pset_edc_check&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt; </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Disable/enable EDC checking for read. When selected, EDC </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;is always written.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The transfer properties are set in a property list which is passed as a </p>
 <p class="FM__Body"> &#160;parameter of the &lt;code&gt;H5Dread&lt;/code&gt; or &lt;code&gt;H5Dwrite&lt;/code&gt; call.  The </p>
 <p class="FM__Body">&#160;&#160;transfer properties are passed to each pipeline stage. Each stage may use </p>
 <p class="FM__Body">&#160;&#160;or ignore any property in the list. In short, there is one property list </p>
 <p class="FM__Body"> &#160;that contains all the properties.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;5.4.5. Storage Strategies&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The raw data is conceptually a multi-dimensional array of elements that </p>
 <p class="FM__Body">&#160;&#160;is stored as a contiguous array of bytes. The data may be physically stored </p>
 <p class="FM__Body">&#160;&#160;in the file in several ways. The table below lists the storage strategies </p>
 <p class="FM__Body"> &#160;for a dataset.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;2&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Table 7. Dataset storage strategies&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;b&gt;Storage Strategy&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Contiguous&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;The dataset is stored as one continuous array of bytes.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Chunked&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;The dataset is stored as fixed-size chunks.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Compact&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;A small dataset is stored in the metadata header.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The different storage strategies do not affect the data transfer </p>
 <p class="FM__Body">&#160;&#160;operations of the dataset: reads and writes work the same for any </p>
 <p class="FM__Body"> &#160;storage strategy.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body"> &#160;&lt;p&gt;&amp;lt;&amp;lt;Relationship between storage strategies, and pipeline, filters, </p>
 <p class="FM__Body"> &#160;and file drivers.??&amp;gt;&amp;gt;</p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;These strategies are described in the following sections.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Contiguous&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;A contiguous dataset is stored in the file as a header and a single </p>
 <p class="FM__Body">&#160;&#160;continuous array of bytes. See the figure below. In the case of a </p>
 <p class="FM__Body">&#160;&#160;multi-dimensional array, the data is serialized in row major order. </p>
 <p class="FM__Body"> &#160;By default, data is stored contiguously.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;400&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/Dsets_fig12.JPG&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 6. Contiguous data storage&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Contiguous storage is the simplest model. It has several limitations. </p>
 <p class="FM__Body">&#160;&#160;First, the dataset must be a fixed-size: it is not possible to extend </p>
 <p class="FM__Body">&#160;&#160;the limit of the dataset or to have unlimited dimensions. In other </p>
 <p class="FM__Body">&#160;&#160;words, if the number of dimensions of the array might change over </p>
 <p class="FM__Body">&#160;&#160;time, then chunking storage must be used instead of contiguous. </p>
 <p class="FM__Body">&#160;&#160;Second, because data is passed through the pipeline as fixed-size </p>
 <p class="FM__Body">&#160;&#160;blocks, compression and other filters cannot be used with contiguous </p>
 <p class="FM__Body"> &#160;data.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Chunked&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The data of a dataset may be stored as fixed-size chunks. See the </p>
 <p class="FM__Body">&#160;&#160;figure below. </p>
 <p class="FM__Body">&#160;&#160;A chunk is a hyper-rectangle of any shape. </p>
 <p class="FM__Body">&#160;&#160;When a dataset is chunked, each chunk is read or written as a single I/O </p>
 <p class="FM__Body">&#160;&#160;operation, and individually passed from stage to stage of the data pipeline. </p>
 <p class="FM__Body"> &#160;&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;400&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/Dsets_fig13.JPG&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 7. Chunked data storage&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Chunks may be any size and shape that fits in the dataspace of the dataset.</p>
 <p class="FM__Body">&#160;&#160;For example, a three dimensional dataspace can be chunked as 3-D cubes, </p>
 <p class="FM__Body">&#160;&#160;2-D planes, or 1-D lines. The chunks may extend beyond the size of the </p>
 <p class="FM__Body">&#160;&#160;dataspace. For example, a 3 x 3 dataset might by chunked in 2 x 2 chunks. </p>
 <p class="FM__Body">&#160;&#160;Sufficient chunks will be allocated to store the array, and any extra space </p>
 <p class="FM__Body">&#160;&#160;will not be accessible. So, to store the 3 x 3 array, four 2 x 2 chunks would </p>
 <p class="FM__Body"> &#160;be allocated with 5 unused elements stored.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Chunked datasets can be unlimited in any direction </p>
 <p class="FM__Body"> &#160;and can be compressed or filtered.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Since the data is read or written by chunks, chunking can have a dramatic </p>
 <p class="FM__Body">&#160;&#160;effect on performance by optimizing what is read and written. &#160;Note, too, </p>
 <p class="FM__Body">&#160;&#160;that for specific access patterns such as parallel I/O, decomposition into </p>
 <p class="FM__Body"> &#160;chunks can have a large impact on performance.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Two restrictions have been placed on chunk shape and size:&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;The rank of a chunk must be less than or equal to </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;the rank of the dataset&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;Chunk size cannot exceed the size of a fixed-size dataset; </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for example, a dataset consisting of a 5 x 4 fixed-size array </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;cannot be defined with 10 x 10 chunks&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ul&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Compact&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;For contiguous and chunked storage, the dataset header information and data </p>
 <p class="FM__Body">&#160;&#160;are stored in two (or more) blocks. Therefore, at least two I/O operations </p>
 <p class="FM__Body">&#160;&#160;are required to access the data: one to access the header, and one (or more) </p>
 <p class="FM__Body"> &#160;to access data. For a small dataset, this is considerable overhead.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;A small dataset may be stored in a continuous array of bytes in the </p>
 <p class="FM__Body">&#160;&#160;header block using the compact storage option. This dataset can be read </p>
 <p class="FM__Body">&#160;&#160;entirely in one operation which retrieves the header and data. &#160;</p>
 <p class="FM__Body">&#160;&#160;The dataset must fit in the header. This may vary depending on the </p>
 <p class="FM__Body">&#160;&#160;metadata that is stored. In general, a compact dataset should be </p>
 <p class="FM__Body"> &#160;approximately 30 KB or less total size.</p>
 <p class="FM__Body"> &#160;See the figure below.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;400&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/Dsets_fig14.JPG&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 8. Compact data storage&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;5.4.6. Partial I/O Sub-setting and Hyperslabs&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Data transfers can write or read some of the data elements of the dataset. </p>
 <p class="FM__Body">&#160;&#160;This is controlled by specifying two selections: one for the source and </p>
 <p class="FM__Body">&#160;&#160;one for the destination. Selections are specified by creating a dataspace </p>
 <p class="FM__Body"> &#160;with selections. &lt;/p&gt;</p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body"> &#160;(see [[dataspace chapter]])</p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Selections may be a union of hyperslabs or a list of points.</p>
 <p class="FM__Body">&#160;&#160;A hyperslab is a contiguous hyper-rectangle from the dataspace. </p>
 <p class="FM__Body">&#160;&#160;Selected fields of a compound datatype may be read or written. </p>
 <p class="FM__Body">&#160;&#160;In this case, the selection is controlled by the memory and file </p>
 <p class="FM__Body"> &#160;datatypes.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Summary of procedure:&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body"> &#160;&lt;ol&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Open the dataset&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Define the memory datatype&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Define the memory dataspace selection and file dataspace </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;selection&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Transfer data (&lt;code&gt;H5Dread&lt;/code&gt; or &lt;code&gt;H5Dwrite&lt;/code&gt;)&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&lt;/ol&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;For a detailed explanation of selections, see the chapter</p>
 <p class="FM__Body"> &#160;&amp;ldquo;&lt;a href=&quot;12_Dataspaces.html&quot;&gt;HDF5 Dataspaces and Partial I/O&lt;/a&gt;.</p>
 <p class="FM__Body"> &#160;&amp;rdquo;&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;SCRIPT language=&quot;JavaScript&quot;&gt;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">document.writeln (&quot;</p>
 <p class="FM__Body">&lt;a name=&quot;Allocation&quot;&gt;</p>
 <p class="FM__Body">&lt;div align=right&gt;</p>
 <p class="FM__Body">&lt;a href=&quot;#TOP&quot;&gt;&lt;font size=&quot;-1&quot;&gt;(Top)&lt;/font&gt;&lt;/a&gt;</p>
 <p class="FM__Body">&lt;/div&gt;</p>
 <p class="FM__Body">&lt;/a&gt;</p>
 <p class="FM__Body">&quot;);</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;/SCRIPT&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;a name=&quot;Allocation&quot;&gt;</p>
 <p class="FM__Body">&lt;h3 class=pagebefore&gt;5.5. Allocation of Space in the File&lt;/h3&gt;</p>
 <p class="FM__Body">&lt;/a&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;When a dataset is created, space is allocated in the file for its </p>
 <p class="FM__Body">&#160;&#160;header and initial data. The amount of space allocated when the dataset </p>
 <p class="FM__Body">&#160;&#160;is created depends on the storage properties. When the dataset is </p>
 <p class="FM__Body">&#160;&#160;modified (data is written, attributes added, or other changes), </p>
 <p class="FM__Body"> &#160;additional storage may be allocated if necessary.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;2&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Table 8. Initial dataset size&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;15%&quot;&gt;&lt;b&gt;Object&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;85%&quot;&gt;&lt;b&gt;Size&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Header&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Variable, but typically around 256 bytes at the creation of </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;a simple dataset with a simple datatype.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Data&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Size of the data array (number of elements x size of element). </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Space allocated in the file depends on the storage strategy </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;and the allocation strategy.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Header&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;A dataset header consists of one or more header messages containing </p>
 <p class="FM__Body">&#160;&#160;persistent metadata describing various aspects of the dataset. </p>
 <p class="FM__Body"> &#160;These records are defined in the &lt;a href=&quot;../H5.format.html&quot;&gt;&lt;i&gt;HDF5 File </p>
 <p class="FM__Body"> &#160;Format Specification&lt;/i&gt;&lt;/a&gt;. The amount of storage required for the </p>
 <p class="FM__Body">&#160;&#160;metadata depends on the metadata to be stored. The table below </p>
 <p class="FM__Body"> &#160;summarizes the metadata.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;2&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Table 9. Metadata storage sizes&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;25%&quot;&gt;&lt;b&gt;Header Information&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;70%&quot;&gt;&lt;b&gt;Approximate Storage Size&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Datatype (required)&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Bytes &#160;or more. Depends on type.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Dataspace (required)&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Bytes or more. Depends on number of dimensions and hsize_t.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Layout (required)&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Points to the stored data. Bytes or more. Depends on hsize_t and </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;number of dimensions.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Filters&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Depends on the number of filters. The size of the filter message </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;depends on the name and data that will be passed.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The header blocks also store the name and values of attributes, so </p>
 <p class="FM__Body"> &#160;the total storage depends on the number and size of the attributes.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;In addition, the dataset must have at least one link, including a name, </p>
 <p class="FM__Body"> &#160;which is stored in the file and in the group it is linked from.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The different storage strategies determine when and how much space is </p>
 <p class="FM__Body"> &#160;allocated for the data array. See the discussion of fill values below</p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body"> &#160;&lt;span class=&quot;editingComment&quot;&gt;[ [ [</p>
 <p class="FM__Body"> &#160;Link</p>
 <p class="FM__Body"> &#160;] ] ]&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body"> &#160;for a detailed explanation of the storage allocation.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Contiguous Storage&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;For a continuous storage option, the data is stored in a single, </p>
 <p class="FM__Body">&#160;&#160;contiguous block in the file. &#160;The data is nominally a fixed-size, </p>
 <p class="FM__Body">&#160;&#160;(number of elements x size of element). The figure below shows an example </p>
 <p class="FM__Body"> &#160;of a two dimensional array stored as a contiguous dataset.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Depending on the fill value properties, the space may be allocated </p>
 <p class="FM__Body">&#160;&#160;when the dataset is created or when first written (default), and filled </p>
 <p class="FM__Body">&#160;&#160;with fill values if specified. For parallel I/O, by default the space </p>
 <p class="FM__Body"> &#160;is allocated when the dataset is created.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;400&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/Dsets_fig15.JPG&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 9. A two dimensional array stored as a contiguous dataset&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Chunked&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;For chunked storage, the data is stored in one or more chunks.  Each chunk </p>
 <p class="FM__Body">&#160;&#160;is a continuous block in the file, but chunks are not necessarily stored </p>
 <p class="FM__Body">&#160;&#160;contiguously. Each chunk has the same size. &#160;The data array has the same </p>
 <p class="FM__Body">&#160;&#160;nominal size as a contiguous array (number of elements x size of element), </p>
 <p class="FM__Body">&#160;&#160;but the storage is allocated in chunks, so the total size in the file can </p>
 <p class="FM__Body"> &#160;be larger that the nominal size of the array. See the figure below.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;If a fill value is defined, each chunk will be filled with the fill value. </p>
 <p class="FM__Body">&#160;&#160;Chunks must be allocated when data is written, but they may be allocated when </p>
 <p class="FM__Body"> &#160;the file is created, as the file expands, or when data is written. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;For serial I/O, by default chunks are allocated incrementally, as data is </p>
 <p class="FM__Body">&#160;&#160;written to the chunk. For a sparse dataset, chunks are allocated only for the </p>
 <p class="FM__Body">&#160;&#160;parts of the dataset that are written. In this case, if the dataset is </p>
 <p class="FM__Body"> &#160;extended, no storage is allocated.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;For parallel I/O, by default chunks are allocated when the dataset is </p>
 <p class="FM__Body"> &#160;created or extended with fill values written to the chunk.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;In either case, the default can be changed using fill value properties.  </p>
 <p class="FM__Body">&#160;&#160;For example, using serial I/O, the properties can select to allocate </p>
 <p class="FM__Body"> &#160;chunks when the dataset is created.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;400&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/Dsets_fig16.JPG&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 10. A two dimensional array stored in chunks&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Changing Dataset Dimensions&lt;/em&gt;&lt;/h4&gt;  </p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;&lt;code&gt;H5Dset_extent&lt;/code&gt; is used to change the current dimensions </p>
 <p class="FM__Body">&#160;&#160;of the dataset within the limits of the dataspace. &#160;Each dimension can </p>
 <p class="FM__Body">&#160;&#160;be extended up to its maximum or unlimited. Extending the dataspace may </p>
 <p class="FM__Body">&#160;&#160;or may not allocate space in the file and may or may not write fill </p>
 <p class="FM__Body"> &#160;values, if they are defined. See the example code below.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The dimensions of the dataset can also reduced. If the sizes specified </p>
 <p class="FM__Body">&#160;&#160;are smaller than the dataset’s current dimension sizes, </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5Dset_extent&lt;/code&gt; will reduce the dataset’s dimension sizes to </p>
 <p class="FM__Body">&#160;&#160;the specified values. It is the user’s responsibility to ensure that </p>
 <p class="FM__Body"> &#160;valuable data is not lost; &lt;code&gt;H5Dset_extent&lt;/code&gt; does not check.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;pre&gt;</p>
 <p class="FM__Body">&#160;&#160;hid_t &#160;&#160;&#160;&#160;&#160;&#160;file_id, dataset_id; &#160;</p>
 <p class="FM__Body"> &#160;Herr_t &#160;&#160;&#160;&#160;&#160;status;</p>
 <p class="FM__Body"> &#160;size_t &#160;&#160;&#160;&#160;&#160;newdims[2];</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/* Open an existing file. */</p>
 <p class="FM__Body"> &#160;file_id = H5Fopen(&quot;dset.h5&quot;, H5F_ACC_RDWR, H5P_DEFAULT);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/* Open an existing dataset. */</p>
 <p class="FM__Body"> &#160;dataset_id = H5Dopen(file_id, &quot;/dset&quot;, H5P_DEFAULT);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/* Example: &#160;dataset is 2 x 3, each dimension is UNLIMITED */</p>
 <p class="FM__Body"> &#160;/* extend to 2 x 7 */</p>
 <p class="FM__Body"> &#160;newdims[0] = 2;</p>
 <p class="FM__Body"> &#160;newdims[1] = 7;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;status = H5Dset_extent(dataset_id, newdims);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/* dataset is now 2 x 7 */</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;status = H5Dclose(dataset_id);&lt;/pre&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Example 7. Using &lt;code&gt;H5Dset_extent&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;to increase the size of a dataset&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;5.5.1. Storage Allocation in the File: Early, Incremental, Late&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The HDF5 Library implements several strategies for when storage is </p>
 <p class="FM__Body">&#160;&#160;allocated if and when it is filled with fill values for elements not </p>
 <p class="FM__Body">&#160;&#160;yet written by the user. Different strategies are recommended for </p>
 <p class="FM__Body">&#160;&#160;different storage layouts and file drivers. In particular, a parallel </p>
 <p class="FM__Body">&#160;&#160;program needs storage allocated during a collective call (for example, </p>
 <p class="FM__Body">&#160;&#160;create or extend) while serial programs may benefit from delaying the </p>
 <p class="FM__Body"> &#160;allocation until the data is written.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Two file creation properties control when to allocate space, when to </p>
 <p class="FM__Body"> &#160;write the fill value, and the actual fill value to write. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&#160;</p>
 <p class="FM__Body"> &#160;&lt;h4&gt;&lt;em&gt;When to Allocate Space&lt;/em&gt;&lt;/h4&gt;  </p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The table below shows the options for when data is allocated in the </p>
 <p class="FM__Body">&#160;&#160;file. &amp;ldquo;Early&amp;rdquo; allocation is done during the dataset create </p>
 <p class="FM__Body">&#160;&#160;call. Certain file drivers (especially MPI-I/O and MPI-POSIX) require </p>
 <p class="FM__Body">&#160;&#160;space to be allocated when a dataset is created, so all processors will </p>
 <p class="FM__Body"> &#160;have the correct view of the data.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;2&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Table 10. File storage allocation options&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;20%&quot;&gt;&lt;b&gt;Strategy&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;80%&quot;&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Early&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Allocate storage for the dataset immediately when the dataset </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;is created. &lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Late&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Defer allocating space for storing the dataset until the </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dataset is written.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Incremental&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Defer allocating space for storing each chunk until </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;the chunk is written.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Default&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Use the strategy (Early, Late, or Incremental) for the storage method </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;and access method. This is the recommended strategy.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;&amp;ldquo;Late&amp;rdquo; allocation is done at the time of the first write to </p>
 <p class="FM__Body"> &#160;dataset. Space for the whole dataset is allocated at the first write.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;&amp;ldquo;Incremental&amp;rdquo; allocation (chunks only) is done at the time </p>
 <p class="FM__Body">&#160;&#160;of the first write to the chunk. Chunks that have never been written are </p>
 <p class="FM__Body">&#160;&#160;not allocated in the file. In a sparsely populated dataset, this option </p>
 <p class="FM__Body"> &#160;allocates chunks only where data is actually written.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The &amp;ldquo;Default&amp;rdquo; property selects the option recommended as </p>
 <p class="FM__Body">&#160;&#160;appropriate for the storage method and access method. The defaults are </p>
 <p class="FM__Body">&#160;&#160;shown in the table below. Note that &amp;ldquo;Early&amp;rdquo; allocation is </p>
 <p class="FM__Body">&#160;&#160;recommended for all Parallel I/O, while other options are recommended </p>
 <p class="FM__Body"> &#160;as the default for serial I/O cases.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Table 11. Default storage options&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;33%&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;&amp;nbsp;&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;34%&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Serial I/O&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;33%&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Parallel I/O&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Contiguous Storage&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Late&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Early&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Chunked Storage&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Incremental&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Early&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Compact Storage&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Early&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Early&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&#160;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;When to Write the Fill Value&lt;/em&gt;&lt;/h4&gt;  </p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The second property is when to write the fill value. The possible values </p>
 <p class="FM__Body">&#160;&#160;are &amp;ldquo;Never&amp;rdquo; and &amp;ldquo;Allocation&amp;rdquo;. </p>
 <p class="FM__Body"> &#160;The table below shows these options.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;2&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Table 12. When to write fill values&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;15%&quot;&gt;&lt;b&gt;When&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;85%&quot;&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Never&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Fill value will never be written.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Allocation&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Fill value is written when space is allocated. (Default for </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;chunked and contiguous data storage.)&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Fill Values&lt;/em&gt;&lt;/h4&gt;  </p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The third property is the fill value to write. The table below shows the </p>
 <p class="FM__Body">&#160;&#160;values. By default, the data is filled with zeroes. The application may </p>
 <p class="FM__Body">&#160;&#160;choose no fill value (Undefined). In this case, uninitialized data may have </p>
 <p class="FM__Body">&#160;&#160;random values. The application may define a fill value of an </p>
 <p class="FM__Body"> &#160;appropriate type. See the chapter &amp;ldquo;&lt;a href=&quot;11_Datatypes.html&quot;&gt;HDF5 </p>
 <p class="FM__Body"> &#160;Datatypes&lt;/a&gt;&amp;rdquo; for more information regarding fill values.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;2&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Table 13. Fill values&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;b&gt;What to Write&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Default&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;By default, the library fills allocated space with zeroes.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Undefined&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Allocated space is filled with random values.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;User-defined&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;The application specifies the fill value.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Together these three properties control the library&amp;rsquo;s behavior. </p>
 <p class="FM__Body">&#160;&#160;The table below summarizes the possibilities during the dataset </p>
 <p class="FM__Body"> &#160;create-write-close cycle.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;4&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Table 14. Storage allocation and fill summary&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;17%&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;When to&lt;br /&gt;allocate&lt;br /&gt;space&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;17%&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;When to&lt;br /&gt;write fill&lt;br /&gt;value&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;17%&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;What fill&lt;br /&gt;value to&lt;br /&gt;write&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;49%&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Library create-write-close behavior&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Early&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Never&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;-&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Library allocates space when dataset is created, but never </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;writes a fill value to dataset. A read of unwritten data returns </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;undefined values.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Late&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Never&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;-&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Library allocates space when dataset is written to, but never </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;writes a fill value to the dataset. A read of unwritten data </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;returns undefined values.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Incremental&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Never&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;-&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Library allocates space when a dataset or chunk (whichever </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;is the smallest unit of space) is written to, but it never writes </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a fill value to a dataset or a chunk. A read of unwritten data </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;returns undefined values.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;-&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Allocation&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Undefined&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;b&gt;Error&lt;/b&gt; on creating the dataset. The dataset is not </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;created.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Early&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Allocation&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Default or User-defined&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Allocate space for the dataset when the dataset is created. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Write the fill value (default or user-defined) to the entire </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dataset when the dataset is created.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Late&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Allocation&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Default or User-defined&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Allocate space for the dataset when the application first </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;writes data values to the dataset. Write the fill value to the </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;entire dataset before writing application data values.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Incremental&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Allocation&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Default or User-defined&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Allocate space for the dataset when the application first </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;writes data values to the dataset or chunk (whichever is the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;smallest unit of space). Write the fill value to the entire dataset </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;or chunk before writing application data values. &lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;During the &lt;code&gt;H5Dread&lt;/code&gt; function call, the library behavior </p>
 <p class="FM__Body">&#160;&#160;depends on whether space has been allocated, whether the fill value has </p>
 <p class="FM__Body">&#160;&#160;been written to storage, how the fill value is defined, and when to </p>
 <p class="FM__Body"> &#160;write the fill value. The table below summarizes the different behaviors.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;4&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Table 15. &lt;code&gt;H5Dread&lt;/code&gt; summary&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;17%&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Is space&lt;br /&gt;allocated&lt;br /&gt;in the file?&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;17%&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;What is the&lt;br /&gt;fill value?&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;17%&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;When to&lt;br /&gt;write the&lt;br /&gt;fill value?&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;49%&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Library read behavior&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;No&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Undefined&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;lt;&amp;lt;any&amp;gt;&amp;gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;b&gt;Error&lt;/b&gt;. Cannot create this dataset.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;No&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Default or User-defined&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;lt;&amp;lt;any&amp;gt;&amp;gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Fill the memory buffer with the fill value.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Yes&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Undefined&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;lt;&amp;lt;any&amp;gt;&amp;gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Return data from storage (dataset). Trash is possible if </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;the application has not written data to the portion of the </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dataset being read.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Yes&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Default or User-defined&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Never&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Return data from storage (dataset). Trash is possible if the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;application has not written data to the portion of the dataset being </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;read.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Yes&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Default or User-defined&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Allocation&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Return data from storage (dataset).&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;There are two cases to consider depending on whether the space in the </p>
 <p class="FM__Body">&#160;&#160;file has been allocated before the read or not. When space has not yet </p>
 <p class="FM__Body">&#160;&#160;been allocated and if a fill value is defined, the memory buffer will </p>
 <p class="FM__Body">&#160;&#160;be filled with the fill values and returned. In other words, no data </p>
 <p class="FM__Body">&#160;&#160;has been read from the disk. If space has been allocated, the values </p>
 <p class="FM__Body">&#160;&#160;are returned from the stored data. The unwritten elements will be </p>
 <p class="FM__Body"> &#160;filled according to the fill value.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;5.5.2. &#160;Deleting a Dataset from a File and Reclaiming Space&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;HDF5 does not at this time provide an easy mechanism to remove a dataset </p>
 <p class="FM__Body"> &#160;from a file or to reclaim the storage space occupied by a deleted object. &lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Removing a dataset and reclaiming the space it used can be done with </p>
 <p class="FM__Body"> &#160;the &lt;code&gt;H5Ldelete&lt;/code&gt; function and the </p>
 <p class="FM__Body"> &#160;&lt;a href=&quot;../RM/Tools.html#Tools-Repack&quot;&gt;h5repack&lt;/a&gt; utility program.</p>
 <p class="FM__Body"> &#160;With the &lt;code&gt;H5Ldelete&lt;/code&gt; function, links to a dataset can be </p>
 <p class="FM__Body">&#160;&#160;removed from the file structure. After all the links have been removed, </p>
 <p class="FM__Body">&#160;&#160;the dataset becomes inaccessible to any application and is effectively </p>
 <p class="FM__Body">&#160;&#160;removed from the file. The way to recover the space occupied by an </p>
 <p class="FM__Body">&#160;&#160;unlinked dataset is to write all of the objects of the file into a </p>
 <p class="FM__Body">&#160;&#160;new file. Any unlinked object is inaccessible to the application and </p>
 <p class="FM__Body">&#160;&#160;will not be included in the new file. Writing objects to a new file </p>
 <p class="FM__Body"> &#160;can be done with a custom program or with the h5repack utility program.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;!-- 8.11.10, MEE: in the paragraph below, the link should be changed.</p>
 <p class="FM__Body">&#160;&#160;Links are now done separately from groups, but there is no HDF5 Links </p>
 <p class="FM__Body"> &#160;chapter yet. --&gt;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;See the chapter &amp;ldquo;&lt;a href=&quot;09_Groups.html&quot;&gt;HDF5 Groups&lt;/a&gt;&amp;rdquo; for </p>
 <p class="FM__Body"> &#160;further discussion of HDF5 file structures and the use of links. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;5.5.3. Releasing Memory Resources&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The system resources required for HDF5 objects such as datasets, </p>
 <p class="FM__Body">&#160;&#160;datatypes, and dataspaces should be released once access to the object is </p>
 <p class="FM__Body">&#160;&#160;no longer needed. This is accomplished via the appropriate close function. </p>
 <p class="FM__Body">&#160;&#160;This is not unique to datasets but a general requirement when working </p>
 <p class="FM__Body"> &#160;with the HDF5 Library; failure to close objects will result in resource leaks. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;In the case where a dataset is created or data has been transferred, </p>
 <p class="FM__Body">&#160;&#160;there are several objects that must be closed. These objects </p>
 <p class="FM__Body">&lt;!-- editingComment</p>
 <p class="FM__Body">&lt;span class=&quot;editingComment&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;[ [ [ </p>
 <p class="FM__Body">&#160;&#160;&#160;(T? above) </p>
 <p class="FM__Body">&#160;&#160;&#160;originally appeared here. &#160;On the full editorial pass, </p>
 <p class="FM__Body"> &#160;&#160;see if there is any apparent reason for the question.</p>
 <p class="FM__Body"> &#160;&#160;] ] ]</p>
 <p class="FM__Body"> &#160;&lt;/span&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&#160;&#160;include datasets, </p>
 <p class="FM__Body"> &#160;datatypes, dataspaces, and property lists. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The application program must free any memory variables and buffers it </p>
 <p class="FM__Body">&#160;&#160;allocates. When accessing data from the file, the amount of memory required </p>
 <p class="FM__Body">&#160;&#160;can be determined by calculating the size of the memory datatype and the </p>
 <p class="FM__Body"> &#160;number of elements in the memory selection.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Variable-length data are organized in two or more areas of memory. </p>
 <p class="FM__Body"> &#160;See &amp;ldquo;&lt;a href=&quot;11_Datatypes.html&quot;&gt;HDF5 Datatypes&lt;/a&gt;&amp;rdquo; for </p>
 <p class="FM__Body">&#160;&#160;more information. When writing data, the application creates an array </p>
 <p class="FM__Body"> &#160;of &lt;code&gt;vl_info_t&lt;/code&gt; which contains pointers to the elements. </p>
 <p class="FM__Body">&#160;&#160;The elements might be, for example, strings. In the file, the </p>
 <p class="FM__Body">&#160;&#160;variable-length data is stored in two parts: a heap with the </p>
 <p class="FM__Body">&#160;&#160;variable-length values of the data elements and an array of </p>
 <p class="FM__Body"> &#160;&lt;code&gt;vlinfo_t&lt;/code&gt; elements. When the data is read, the amount of </p>
 <p class="FM__Body">&#160;&#160;memory required for the heap can be determined with the </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5Dget_vlen_buf_size&lt;/code&gt; call.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The data transfer property may be used to set a custom memory manager </p>
 <p class="FM__Body"> &#160;for allocating variable-length data for a &lt;code&gt;H5Dread&lt;/code&gt;. This is </p>
 <p class="FM__Body"> &#160;set with the &lt;code&gt;H5Pset_vlen_mem_manager&lt;/code&gt; call.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;To free the memory for variable-length data, it is necessary to visit </p>
 <p class="FM__Body">&#160;&#160;each element, free the variable-length data, and reset the element. The </p>
 <p class="FM__Body">&#160;&#160;application must free the memory it has allocated. For memory allocated </p>
 <p class="FM__Body"> &#160;by the HDF5 Library during a read, the &lt;code&gt;H5Dvlen_reclaim&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;function can be used to perform this operation.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;5.5.4. External Storage Properties&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The external storage format allows data to be stored across a set of </p>
 <p class="FM__Body">&#160;&#160;non-HDF5 files. A set of segments (offsets and sizes) in one or more files </p>
 <p class="FM__Body">&#160;&#160;is defined as an external file list, or EFL, and the contiguous logical </p>
 <p class="FM__Body">&#160;&#160;addresses of the data storage are mapped onto these segments. Currently, </p>
 <p class="FM__Body"> &#160;only the &lt;code&gt;H5D_CONTIGUOUS&lt;/code&gt; storage format allows external storage. </p>
 <p class="FM__Body">&#160;&#160;External storage is enabled by a dataset creation property. The table </p>
 <p class="FM__Body"> &#160;below shows the API.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;0&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;2&quot; align=&quot;left&quot; valign=&quot;bottom&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Table 16. External storage API&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;50%&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;herr_t H5Pset_external (hid_t plist, const char *name, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;off_t offset, hsize_t size)&lt;/code&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;50%&quot;&gt;This function adds a new segment to the end of </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;the external file list of the specified dataset creation property </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;list. The segment begins a byte offset of file name and continues </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for size bytes. The space represented by this segment is adjacent </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;to the space already represented by the external file list. The </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;last segment in a file list may have the size </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5F_UNLIMITED&lt;/code&gt;, in which case the external file may </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;be of unlimited size and no more files can be added to the </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;external files list.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;code&gt;int H5Pget_external_count (hid_t plist)&lt;/code&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;Calling this function returns the number of segments in an </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;external file list. If the dataset creation property list has no </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;external data, then zero is returned.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;&lt;code&gt;herr_t H5Pget_external (hid_t plist, int idx, size_t </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;name_size,&lt;br /&gt;char *name, off_t *offset,&lt;br /&gt;hsize_t *size)&lt;/code&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td&gt;This is the counterpart for the &lt;code&gt;H5Pset_external()&lt;/code&gt; </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;function. Given a dataset creation property list and a zero-based </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;index into that list, the file name, byte offset, and segment </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size are returned through non-null arguments. At most name_size </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;characters are copied into the name argument which is not null </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;terminated if the file name is longer than the supplied name </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;buffer (this is similar to &lt;code&gt;strncpy()&lt;/code&gt;). &lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;hr color=&quot;green&quot; size=&quot;3&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The figure below shows an example of how a contiguous, one-dimensional </p>
 <p class="FM__Body">&#160;&#160;dataset is partitioned into three parts and each of those parts is stored </p>
 <p class="FM__Body">&#160;&#160;in a segment of an external file. The top rectangle represents the logical </p>
 <p class="FM__Body">&#160;&#160;address space of the dataset while the bottom rectangle represents an </p>
 <p class="FM__Body"> &#160;external file.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;500&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/Dsets_fig19.JPG&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 11. External file storage&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The example below shows code that defines the external storage for the </p>
 <p class="FM__Body">&#160;&#160;example. Note that the segments are defined in order of the logical </p>
 <p class="FM__Body">&#160;&#160;addresses they represent, not their order within the external file. It </p>
 <p class="FM__Body">&#160;&#160;would also have been possible to put the segments in separate files. </p>
 <p class="FM__Body">&#160;&#160;Care should be taken when setting up segments in a single file since </p>
 <p class="FM__Body"> &#160;the library does not automatically check for segments that overlap.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;pre&gt;</p>
 <p class="FM__Body"> &#160;Plist = H5Pcreate (H5P_DATASET_CREATE);</p>
 <p class="FM__Body"> &#160;H5Pset_external (plist, &quot;velocity.data&quot;, 3000, 1000);</p>
 <p class="FM__Body"> &#160;H5Pset_external (plist, &quot;velocity.data&quot;, 0, 2500);</p>
 <p class="FM__Body"> &#160;H5Pset_external (plist, &quot;velocity.data&quot;, 4500, 1500);&lt;/pre&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Example 8. External storage&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The figure below shows an example of how a contiguous, two-dimensional </p>
 <p class="FM__Body">&#160;&#160;dataset is partitioned into three parts and each of those parts is </p>
 <p class="FM__Body">&#160;&#160;stored in a separate external file. The top rectangle represents the </p>
 <p class="FM__Body">&#160;&#160;logical address space of the dataset while the bottom rectangles </p>
 <p class="FM__Body"> &#160;represent external files.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;table width=&quot;500&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/Dsets_fig20.jpg&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 12. Partitioning a 2-D dataset for external storage&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The example below shows code for the partitioning described above.</p>
 <p class="FM__Body">&#160;&#160;In this example, the library maps the multi-dimensional array onto a linear </p>
 <p class="FM__Body">&#160;&#160;address space as defined by the HDF5 format specification, and then maps that </p>
 <p class="FM__Body"> &#160;address space into the segments defined in the external file list. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;pre&gt;</p>
 <p class="FM__Body"> &#160;Plist = H5Pcreate (H5P_DATASET_CREATE);</p>
 <p class="FM__Body"> &#160;H5Pset_external (plist, &quot;scan1.data&quot;, 0, 24);</p>
 <p class="FM__Body"> &#160;H5Pset_external (plist, &quot;scan2.data&quot;, 0, 24);</p>
 <p class="FM__Body"> &#160;H5Pset_external (plist, &quot;scan3.data&quot;, 0, 16);&lt;/pre&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Example 9. Partitioning a 2-D dataset for external storage&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The segments of an external file can exist beyond the end of the </p>
 <p class="FM__Body">&#160;&#160;(external) file. The library reads that part of a segment as zeros. When </p>
 <p class="FM__Body">&#160;&#160;writing to a segment that exists beyond the end of a file, the external </p>
 <p class="FM__Body">&#160;&#160;file is automatically extended. Using this feature, one can create a </p>
 <p class="FM__Body">&#160;&#160;segment (or set of segments) which is larger than the current size of </p>
 <p class="FM__Body">&#160;&#160;the dataset. This allows the dataset to be extended at a future time </p>
 <p class="FM__Body"> &#160;(provided the dataspace also allows the extension).&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;All referenced external data files must exist before performing raw </p>
 <p class="FM__Body">&#160;&#160;data I/O on the dataset. This is normally not a problem since those files </p>
 <p class="FM__Body">&#160;&#160;are being managed directly by the application or indirectly through some </p>
 <p class="FM__Body">&#160;&#160;other library. However, if the file is transferred from its original </p>
 <p class="FM__Body">&#160;&#160;context, care must be taken to assure that all the external files are </p>
 <p class="FM__Body"> &#160;accessible in the new location.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;a name=&quot;UseFilters&quot;&gt;</p>
 <p class="FM__Body">&lt;h3 class=pagebefore&gt;5.6. Using HDF5 Filters&lt;/h3&gt;</p>
 <p class="FM__Body">&lt;/a&gt;</p>
 <p class="FM__Body">&lt;p&gt;This section describes in detail how to use the n-bit and </p>
 <p class="FM__Body">scale-offset filters. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;a name=&quot;N-Bit&quot;&gt;</p>
 <p class="FM__Body">&lt;h3&gt;5.6.1. Using the N-bit Filter&lt;/h3&gt;</p>
 <p class="FM__Body">&lt;/a&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;N-bit data has &lt;i&gt;n&lt;/i&gt; significant bits,  </p>
 <p class="FM__Body"> &#160;where &lt;i&gt;n&lt;/i&gt; may not correspond to a precise number of bytes.</p>
 <p class="FM__Body">&#160;&#160;On the other hand, computing systems and applications universally, </p>
 <p class="FM__Body">&#160;&#160;or nearly so, run most efficiently when manipulating data as </p>
 <p class="FM__Body"> &#160;whole bytes or multiple bytes.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;Consider the case of 12-bit integer data.  </p>
 <p class="FM__Body">&#160;&#160;In memory, that data will be handled in at least 2 bytes, or 16 bits, </p>
 <p class="FM__Body"> &#160;and on some platforms in 4 or even 8 bytes.</p>
 <p class="FM__Body">&#160;&#160;The size of such a dataset can be significantly reduced when written </p>
 <p class="FM__Body"> &#160;to disk if the unused bits are stripped out.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt;The &lt;i&gt;n-bit filter&lt;/i&gt; is provided for this purpose,  </p>
 <p class="FM__Body"> &#160;&lt;i&gt;packing&lt;/i&gt; n-bit data on output by stripping off all unused bits </p>
 <p class="FM__Body"> &#160;and &lt;i&gt;unpacking&lt;/i&gt; on input, restoring the extra bits required</p>
 <p class="FM__Body"> &#160;by the computational processor.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;N-bit Datatype&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;An &lt;i&gt;n-bit datatype&lt;/i&gt; is a datatype of &lt;i&gt;n&lt;/i&gt; significant bits.</p>
 <p class="FM__Body"> &#160;Unless it is packed, an &lt;i&gt;n&lt;/i&gt;-bit datatype is presented as an </p>
 <p class="FM__Body"> &#160;&lt;i&gt;n&lt;/i&gt;-bit bitfield within a larger-sized value.  </p>
 <p class="FM__Body">&#160;&#160;For example, a 12-bit datatype might be presented as a 12-bit field </p>
 <p class="FM__Body"> &#160;in a 16-bit, or 2-byte, value.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;Currently, the datatype classes of n-bit datatype or n-bit field of a </p>
 <p class="FM__Body">&#160;&#160;compound datatype or an array datatype are limited to integer or </p>
 <p class="FM__Body"> &#160;floating-point.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt;The HDF5 user can create an n-bit datatype through a series of</p>
 <p class="FM__Body"> &#160;of function calls.</p>
 <p class="FM__Body">&#160;&#160;For example, the following calls create a 16-bit datatype </p>
 <p class="FM__Body"> &#160;that is stored in a 32-bit value with a 4-bit offset:&lt;/p&gt;</p>
 <p class="FM__Body">&lt;dir&gt;&lt;pre&gt;</p>
 <p class="FM__Body">hid_t nbit_datatype = H5Tcopy(H5T_STD_I32LE);</p>
 <p class="FM__Body">H5Tset_precision(nbit_datatype, 16);</p>
 <p class="FM__Body">H5Tset_offset(nbit_datatype, 4);</p>
 <p class="FM__Body">&lt;/pre&gt;&lt;/dir&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt;In memory, one value of the above example n-bit datatype would be stored on </p>
 <p class="FM__Body"> &#160;a little-endian machine as follows:&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;dl&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;dt&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;table border=&quot;1&quot; width=&quot;80%&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;25%&quot; align=&quot;center&quot;&gt;byte 3&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;25%&quot; align=&quot;center&quot;&gt;byte 2&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;25%&quot; align=&quot;center&quot;&gt;byte 1&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;25%&quot; align=&quot;center&quot;&gt;byte 0&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;25%&quot; align=&quot;center&quot;&gt;&lt;code&gt;????????&lt;/code&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;25%&quot; align=&quot;center&quot;&gt;&lt;code&gt;????SPPP&lt;/code&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;25%&quot; align=&quot;center&quot;&gt;&lt;code&gt;PPPPPPPP&lt;/code&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;25%&quot; align=&quot;center&quot;&gt;&lt;code&gt;PPPP????&lt;/code&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/table&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;table width=&quot;80%&quot; border=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;4&quot;&gt;&lt;font size=&quot;-1&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Key: </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;S&lt;/code&gt; - sign bit, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;P&lt;/code&gt; - significant bit, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;?&lt;/code&gt; - padding bit </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Sign bit is included in signed integer datatype precision.</p>
 <p class="FM__Body"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span> &#160;&#160;&#160;&lt;/font&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/table&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;/dl&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;N-bit Filter&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;When data of an n-bit datatype is stored on disk using the </p>
 <p class="FM__Body"> &#160;n-bit filter, the filter &lt;i&gt;packs&lt;/i&gt; the data by stripping off the </p>
 <p class="FM__Body">&#160;&#160;padding bits; only the significant bits are retained and stored. &#160;</p>
 <p class="FM__Body"> &#160;The values on disk will appear as follows:&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;dl&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;dt&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;table border=&quot;1&quot; width=&quot;80%&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;45%&quot; align=&quot;center&quot;&gt;1st value&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;45%&quot; align=&quot;center&quot;&gt;2nd value&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;10%&quot; align=&quot;center&quot;&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;45%&quot; align=&quot;center&quot;&gt;&lt;code&gt;SPPPPPPP&amp;nbsp;PPPPPPPP&lt;/code&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;45%&quot; align=&quot;center&quot;&gt;&lt;code&gt;SPPPPPPP&amp;nbsp;PPPPPPPP&lt;/code&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td width=&quot;10%&quot; align=&quot;center&quot;&gt;...&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/table&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;table width=&quot;80%&quot; border=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td colspan=&quot;4&quot;&gt;&lt;font size=&quot;-1&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Key: </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;S&lt;/code&gt; - sign bit, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;P&lt;/code&gt; - significant bit, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;?&lt;/code&gt; - padding bit </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Sign bit is included in signed integer datatype precision.</p>
 <p class="FM__Body"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span> &#160;&#160;&#160;&lt;/font&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/table&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;/dl&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The n-bit filter can be used effectively for compressing data of an n-bit</p>
 <p class="FM__Body">&#160;&#160;datatype, including arrays and the n-bit fields of compound datatypes. </p>
 <p class="FM__Body">&#160;&#160;The filter supports complex situations where a compound datatype </p>
 <p class="FM__Body"> &#160;contains member(s) of a compound datatype or an array datatype has</p>
 <p class="FM__Body"> &#160;a compound datatype as the base type.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;At present, the n-bit filter supports all datatypes. </p>
 <p class="FM__Body"> &#160;For datatypes of class time, string,</p>
 <p class="FM__Body"> &#160;opaque, reference, &lt;small&gt;ENUM&lt;/small&gt;, and </p>
 <p class="FM__Body">&#160;&#160;variable-length, the n-bit filter acts as a no-op which is short for no </p>
 <p class="FM__Body">&#160;&#160;operation. </p>
 <p class="FM__Body">&#160;&#160;For convenience, the rest of this section refers to such datatypes </p>
 <p class="FM__Body"> &#160;as &lt;i&gt;no-op datatypes&lt;/i&gt;.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;As is the case with all HDF5 filters, an application using </p>
 <p class="FM__Body"> &#160;the n-bit filter must store data with chunked storage.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;How Does the N-bit Filter Work?&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The n-bit filter always compresses and decompresses according to</p>
 <p class="FM__Body">&#160;&#160;dataset properties supplied by the HDF5 Library in the </p>
 <p class="FM__Body"> &#160;datatype, dataspace, or dataset creation property list.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The dataset datatype refers to how data is stored in an HDF5 file while </p>
 <p class="FM__Body"> &#160;the memory datatype refers to how data is stored in memory.</p>
 <p class="FM__Body">&#160;&#160;The HDF5 Library will do datatype conversion when writing data </p>
 <p class="FM__Body">&#160;&#160;in memory to the dataset or reading data from the dataset to memory if </p>
 <p class="FM__Body">&#160;&#160;the memory datatype differs from the dataset datatype. </p>
 <p class="FM__Body">&#160;&#160;Datatype conversion is performed by HDF5 Library before n-bit compression </p>
 <p class="FM__Body"> &#160;and after n-bit decompression.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt;The following sub-sections examine the common cases:&lt;/p&gt;</p>
 <p class="FM__Body"> &#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;N-bit integer conversions&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;N-bit floating-point conversions&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&lt;/ul&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h5&gt;&lt;em&gt;N-bit Integer Conversions&lt;/em&gt;&lt;/h5&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;Integer data with a dataset of integer datatype of less than </p>
 <p class="FM__Body"> &#160;full precision and a memory datatype of &lt;code&gt;H5T_NATIVE_INT&lt;/code&gt;,</p>
 <p class="FM__Body"> &#160;provides the simplest application of the n-bit filter.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The precision of &lt;code&gt;H5T_NATIVE_INT&lt;/code&gt; is 8 muliplied by </p>
 <p class="FM__Body"> &#160;&lt;code&gt;sizeof(int)&lt;/code&gt;. </p>
 <p class="FM__Body"> &#160;This value, the size of an &lt;code&gt;int&lt;/code&gt; in bytes, differs from </p>
 <p class="FM__Body"> &#160;platform to platform; we assume a value of &lt;code&gt;4&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;for the following illustration.</p>
 <p class="FM__Body"> &#160;We further assume the memory byte order to be little-endian.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;p&gt;In memory, therefore, the precision of &lt;code&gt;H5T_NATIVE_INT&lt;/code&gt; </p>
 <p class="FM__Body">&#160;&#160;is 32 and the offset is 0. </p>
 <p class="FM__Body"> &#160;One value of &lt;code&gt;H5T_NATIVE_INT&lt;/code&gt; is laid out in memory </p>
 <p class="FM__Body"> &#160;as follows:&lt;/p&gt;</p>
 <p class="FM__Body">&#160;</p>
 <p class="FM__Body">&lt;table border=&quot;0&quot; width=&quot;80%&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&lt;pre&gt;</p>
 <p class="FM__Body">| byte 3 | byte 2 | byte 1 | byte 0 |</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body">|SPPPPPPP|PPPPPPPP|PPPPPPPP|PPPPPPPP|</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;/pre&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;td colspan=&quot;4&quot;&gt;&lt;font size=&quot;-1&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;Key: </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;S&lt;/code&gt; - sign bit, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;P&lt;/code&gt; - significant bit, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;?&lt;/code&gt; - padding bit </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;br&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;Sign bit is included in signed integer datatype precision.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/font&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt;Suppose the dataset datatype has a precision of 16 and an offset of 4. </p>
 <p class="FM__Body">&#160;&#160;After HDF5 converts values from the memory datatype to the dataset datatype, </p>
 <p class="FM__Body">&#160;&#160;it passes something like the following to the n-bit filter for </p>
 <p class="FM__Body"> &#160;compression:&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table border=&quot;0&quot; width=&quot;80%&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&lt;pre&gt;</p>
 <p class="FM__Body">| byte 3 | &#160;byte 2 | byte 1 | &#160;byte 0 |</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|</p>
 <p class="FM__Body">|????????|????S|PPP|PPPPPPPP|PPPP|????|</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|_________________|</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;truncated bits</p>
 <p class="FM__Body">&lt;/pre&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;td colspan=&quot;4&quot;&gt;&lt;font size=&quot;-1&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;Key: </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;S&lt;/code&gt; - sign bit, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;P&lt;/code&gt; - significant bit, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;?&lt;/code&gt; - padding bit </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;br&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;Sign bit is included in signed integer datatype precision.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/font&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt;Notice that only the specified 16 bits (15 significant bits and the </p>
 <p class="FM__Body">&#160;&#160;sign bit) are retained in the conversion. &#160;All other significant bits </p>
 <p class="FM__Body">&#160;&#160;of the memory datatype are discarded because the dataset datatype </p>
 <p class="FM__Body">&#160;&#160;calls for only 16 bits of precision. </p>
 <p class="FM__Body">&#160;&#160;After n-bit compression, none of these discarded bits, known as </p>
 <p class="FM__Body"> &#160;&lt;i&gt;padding bits&lt;/i&gt; will be stored on disk.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;h5&gt;&lt;em&gt;N-bit Floating-point Conversions&lt;/em&gt;&lt;/h5&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;Things get more complicated in the case of a floating-point dataset </p>
 <p class="FM__Body">&#160;&#160;datatype class. &#160;This sub-section provides an example that </p>
 <p class="FM__Body">&#160;&#160;illustrates the conversion from a memory datatype of </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5T_NATIVE_FLOAT&lt;/code&gt; to a dataset datatype of class </p>
 <p class="FM__Body"> &#160;floating-point.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;As before, let the &lt;code&gt;H5T_NATIVE_FLOAT&lt;/code&gt; be 4 bytes long, </p>
 <p class="FM__Body">&#160;&#160;and let the memory byte order be little-endian. </p>
 <p class="FM__Body"> &#160;Per the IEEE standard, one value of &lt;code&gt;H5T_NATIVE_FLOAT&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;is laid out in memory as follows:&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;table border=&quot;0&quot; width=&quot;80%&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&lt;pre&gt;</p>
 <p class="FM__Body">| byte 3 | byte 2 | byte 1 | byte 0 |</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body">|SEEEEEEE|EMMMMMMM|MMMMMMMM|MMMMMMMM|</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;/pre&gt;</p>
 <p class="FM__Body"> &#160;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;td colspan=&quot;4&quot;&gt;&lt;font size=&quot;-1&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;Key: </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;S&lt;/code&gt; - sign bit, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;E&lt;/code&gt; - exponent bit, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;M&lt;/code&gt; - mantissa bit, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;?&lt;/code&gt; - padding bit </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;br&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;Sign bit is included in floating-point datatype precision.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/font&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&#160;</p>
 <p class="FM__Body"> &#160;&lt;br&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt;Suppose the dataset datatype has a precision of 20, offset of 7, </p>
 <p class="FM__Body">&#160;&#160;mantissa size of 13, mantissa position of 7, </p>
 <p class="FM__Body">&#160;&#160;exponent size of 6, exponent position of 20, </p>
 <p class="FM__Body">&#160;&#160;and sign position of 26. </p>
 <p class="FM__Body">&#160;&#160;(See &amp;ldquo;Definition of Datatypes,&amp;rdquo; section 4.3 of the </p>
 <p class="FM__Body"> &#160;&amp;ldquo;&lt;a href=&quot;UG_frame11Datatypes.html&quot;&gt;Datatypes&lt;/a&gt;&amp;rdquo; chapter in </p>
 <p class="FM__Body"> &#160;the &lt;a href=&quot;index.html&quot;&gt;&lt;cite&gt;HDF5 User&amp;rsquo;s Guide&lt;/cite&gt;&lt;/a&gt; </p>
 <p class="FM__Body"> &#160;for a discussion of creating and modifying datatypes.)&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt;After HDF5 converts values from the memory datatype to the dataset datatype, </p>
 <p class="FM__Body">&#160;&#160;it passes something like the following to the n-bit filter for </p>
 <p class="FM__Body"> &#160;compression:&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;table border=&quot;0&quot; width=&quot;80%&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;td&gt;</p>
 <p class="FM__Body">&lt;pre&gt;</p>
 <p class="FM__Body">| byte 3 | byte 2 &#160;| byte 1 | byte 0 &#160;|</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|</p>
 <p class="FM__Body">|?????SEE|EEEE|MMMM|MMMMMMMM|M|???????|</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|_______________|</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;truncated mantissa</p>
 <p class="FM__Body">&lt;/pre&gt;</p>
 <p class="FM__Body"> &#160;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;td colspan=&quot;4&quot;&gt;&lt;font size=&quot;-1&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;Key: </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;S&lt;/code&gt; - sign bit, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;E&lt;/code&gt; - exponent bit, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;M&lt;/code&gt; - mantissa bit, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;?&lt;/code&gt; - padding bit </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;br&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;Sign bit is included in floating-point datatype precision.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/font&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt;The sign bit and truncated mantissa bits are not changed during </p>
 <p class="FM__Body"> &#160;datatype conversion by the HDF5 Library. On the other hand,</p>
 <p class="FM__Body"> &#160;the conversion of the 8-bit exponent to a 6-bit exponent</p>
 <p class="FM__Body"> &#160;is a little tricky:&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;dir&gt;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The bias for the new exponent in the n-bit datatype is: &lt;/p&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;2&lt;sup&gt;(n-1)&lt;/sup&gt;-1&lt;/code&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;br&gt;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The following formula is used for this exponent conversion:&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;code&gt;exp8 - (2&lt;sup&gt;(8-1)&lt;/sup&gt;-1)&lt;/code&gt; = </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;code&gt;exp6 - (2&lt;sup&gt;(6-1)&lt;/sup&gt;-1)&lt;/code&gt; = </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;i&gt;actual exponent value&lt;/i&gt; </p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;br /&gt;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;where &lt;code&gt;exp8&lt;/code&gt; is the stored decimal value </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;as represented by the 8-bit exponent,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;br&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;and &lt;code&gt;exp6&lt;/code&gt; is the stored decimal value </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;as represented by the 6-bit exponent</p>
 <p class="FM__Body">&lt;/dir&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;In this example, caution must be taken to ensure that, </p>
 <p class="FM__Body">&#160;&#160;after conversion, the actual exponent value is </p>
 <p class="FM__Body">&#160;&#160;within the range that can be represented by a 6-bit exponent. </p>
 <p class="FM__Body">&#160;&#160;For example, </p>
 <p class="FM__Body">&#160;&#160;an 8-bit exponent can represent values &#160;from -127 to 128 while </p>
 <p class="FM__Body"> &#160;a 6-bit exponent can represent values only from -31 to 32.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;a name=&quot;Design&quot;&gt;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;N-bit Filter Behavior&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&lt;/a&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The n-bit filter was designed to treat the incoming data byte by byte at </p>
 <p class="FM__Body">&#160;&#160;the lowest level. The purpose was to make the n-bit filter as generic as </p>
 <p class="FM__Body"> &#160;possible so that no pointer cast related to the datatype is needed.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Bitwise operations are employed for packing and unpacking at the byte </p>
 <p class="FM__Body"> &#160;level.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Recursive function calls are used to treat compound and array datatypes.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h5&gt;&lt;em&gt;N-bit Compression&lt;/em&gt;&lt;/h5&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The main idea of n-bit compression is to use a loop to compress each  </p>
 <p class="FM__Body">&#160;&#160;data element in a chunk. Depending on the datatype of each element, </p>
 <p class="FM__Body"> &#160;the n-bit filter will call one of four functions. &#160;Each of these functions</p>
 <p class="FM__Body"> &#160;performs one of the following tasks: &#160;&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Compress a data element of a no-op datatype&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Compress a data element of an atomic datatype&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Compress a data element of a compound datatype&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Compress a data element of an array datatype&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ul&gt; </p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;&lt;b&gt;No-op datatypes:&lt;/b&gt;</p>
 <p class="FM__Body">&#160;&#160;The n-bit filter does not actually compress no-op datatypes. &#160;</p>
 <p class="FM__Body">&#160;&#160;Rather, it copies the data buffer of the no-op datatype from the </p>
 <p class="FM__Body">&#160;&#160;noncompressed buffer to the proper location in the compressed buffer; </p>
 <p class="FM__Body">&#160;&#160;the compressed buffer has no holes. The term &amp;ldquo;compress&amp;rdquo; </p>
 <p class="FM__Body">&#160;&#160;is used here simply to distinguish this function &#160;from the function </p>
 <p class="FM__Body"> &#160;that performs the reverse operation during decompression.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;&lt;b&gt;Atomic datatypes:&lt;/b&gt;</p>
 <p class="FM__Body">&#160;&#160;The n-bit filter will find the bytes where significant bits are </p>
 <p class="FM__Body">&#160;&#160;located and try to compress these bytes, one byte at a time, using a loop. </p>
 <p class="FM__Body"> &#160;At this level, the filter needs the following information:&lt;/p&gt;</p>
 <p class="FM__Body"> &#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;The byte offset of the beginning of the current data element with </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;respect to the beginning of the input data buffer&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;Datatype size, precision, offset, and byte order &#160;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&lt;/ul&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The n-bit filter compresses from the most significant byte containing </p>
 <p class="FM__Body">&#160;&#160;significant bits to the least significant byte. &#160;</p>
 <p class="FM__Body"> &#160;For big-endian data, therefore, the loop index progresses from smaller</p>
 <p class="FM__Body"> &#160;to larger while for little-endian, the loop index progresses from larger</p>
 <p class="FM__Body"> &#160;to smaller.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;In the extreme case of when the n-bit datatype has full precision,</p>
 <p class="FM__Body">&#160;&#160;this function copies the content of the entire noncompressed datatype </p>
 <p class="FM__Body"> &#160;to the compressed output buffer.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;&lt;b&gt;Compound datatypes:&lt;/b&gt;</p>
 <p class="FM__Body">&#160;&#160;The n-bit filter will compress each data member of the compound datatype. </p>
 <p class="FM__Body">&#160;&#160;If the member datatype is of an integer or floating-point datatype, </p>
 <p class="FM__Body"> &#160;the n-bit filter will call the function described above&lt;!-- in section 2.1.2--&gt;. </p>
 <p class="FM__Body">&#160;&#160;If the member datatype is of a no-op datatype, </p>
 <p class="FM__Body"> &#160;the filter will call the function described above&lt;!-- in section 2.1.1--&gt;. </p>
 <p class="FM__Body">&#160;&#160;If the member datatype is of a compound datatype, the filter will make a </p>
 <p class="FM__Body">&#160;&#160;recursive call to itself. </p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">&#160;&#160;(i.e., to the function described in this section, 2.1.3). </p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&#160;&#160;If the member datatype is of an array datatype, the filter will call the </p>
 <p class="FM__Body"> &#160;function described below&lt;!-- in section 2.1.4.--&gt;&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;&lt;b&gt;Array datatypes:&lt;/b&gt;</p>
 <p class="FM__Body">&#160;&#160;The n-bit filter will use a loop to compress each array element in </p>
 <p class="FM__Body">&#160;&#160;the array. If the base datatype of array element is of an integer or </p>
 <p class="FM__Body">&#160;&#160;floating-point datatype, the n-bit filter will call the function described </p>
 <p class="FM__Body"> &#160;above&lt;!-- in section 2.1.2.--&gt; </p>
 <p class="FM__Body"> &#160;If the base datatype is of a no-op datatype, the filter will call the</p>
 <p class="FM__Body"> &#160;function described above&lt;!-- in section 2.1.1.--&gt; </p>
 <p class="FM__Body"> &#160;If the base datatype is of a compound datatype, the filter will call the</p>
 <p class="FM__Body"> &#160;function described above&lt;!-- in section 2.1.3--&gt;. </p>
 <p class="FM__Body">&#160;&#160;If the member datatype is of an array datatype, the filter will make a </p>
 <p class="FM__Body"> &#160;recursive call of itself.&lt;/p&gt;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body"> &#160;(i.e., to the function described in this section, 2.1.4).</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;h5&gt;&lt;em&gt;N-bit Decompression&lt;/em&gt;&lt;/h5&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The n-bit decompression algorithm is very similar to n-bit compression. </p>
 <p class="FM__Body">&#160;&#160;The only difference is that at the byte level, compression packs out all </p>
 <p class="FM__Body">&#160;&#160;padding bits and stores only significant bits into a continous buffer </p>
 <p class="FM__Body">&#160;&#160;(unsigned char) while decompression unpacks significant bits and inserts </p>
 <p class="FM__Body">&#160;&#160;padding bits (zeros) at the proper positions to recover the data bytes </p>
 <p class="FM__Body"> &#160;as they existed before compression.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;h5&gt;&lt;em&gt;Storing N-bit Parameters to Array&lt;/em&gt; &lt;code&gt;cd_value[]&lt;/code&gt;&lt;/h5&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;All of the information, or parameters, required by the n-bit filter </p>
 <p class="FM__Body"> &#160;are gathered and stored in the array &lt;code&gt;cd_values[]&lt;/code&gt; by the </p>
 <p class="FM__Body"> &#160;private function &lt;code&gt;H5Z_set_local_nbit&lt;/code&gt; and are passed </p>
 <p class="FM__Body">&#160;&#160;to another private function, </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5Z_filter_nbit&lt;/code&gt;, by the HDF5 Library. &lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt;These parameters are as follows:&lt;/p&gt;</p>
 <p class="FM__Body"> &#160;&lt;ol&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;Parameters related to the datatype&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;The number of elements within the chunk&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;A flag indicating whether compression is needed&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&lt;/ol&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The first and second parameters can be obtained using the HDF5 dataspace</p>
 <p class="FM__Body"> &#160;and datatype interface calls. &lt;/p&gt;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">&#160;&#160;The third parameter is set during the storing process as described </p>
 <p class="FM__Body"> &#160;in section 3.2.</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;A compound datatype can have members of array or compound datatype. </p>
 <p class="FM__Body">&#160;&#160;An array datatype&amp;rsquo;s base datatype can be a complex compound datatype. </p>
 <p class="FM__Body"> &#160;Recursive calls are required to set parameters for these complex situations.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Before setting the parameters, the number of parameters should be </p>
 <p class="FM__Body"> &#160;calculated to dynamically allocate the array &lt;code&gt;cd_values[]&lt;/code&gt;,</p>
 <p class="FM__Body">&#160;&#160;which will be passed to the HDF5 Library. </p>
 <p class="FM__Body"> &#160;This also requires recursive calls.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt;For an atomic datatype (integer or floating-point), parameters that will </p>
 <p class="FM__Body">&#160;&#160;be stored include the datatype&amp;rsquo;s size, endianness, precision, and </p>
 <p class="FM__Body"> &#160;offset. &lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt;For a no-op datatype, only the size is required.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;For a compound datatype, parameters that will be stored include the </p>
 <p class="FM__Body">&#160;&#160;datatype&amp;rsquo;s total size and number of members. For each member, </p>
 <p class="FM__Body">&#160;&#160;its member offset needs to be stored. Other parameters for members </p>
 <p class="FM__Body"> &#160;will depends on the respective datatype class.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;For an array datatype, the total size parameter should be stored. </p>
 <p class="FM__Body">&#160;&#160;Other parameters for the array&amp;rsquo;s base type depend on the base </p>
 <p class="FM__Body"> &#160;type&amp;rsquo;s datatype class. &lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt;Further, to correctly retrieve the parameter for use of n-bit </p>
 <p class="FM__Body">&#160;&#160;compression or decompression later, parameters for distinguishing &#160;</p>
 <p class="FM__Body"> &#160;between datatype classes should be stored.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;a name=&quot;implementation&quot;&gt;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Implementation&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&lt;/a&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;Three filter callback functions were written for the n-bit filter:&lt;/p&gt;</p>
 <p class="FM__Body"> &#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;&lt;code&gt;H5Z_can_apply_nbit&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;&lt;code&gt;H5Z_set_local_nbit&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;&lt;code&gt;H5Z_filter_nbit&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&lt;/ul&gt;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;These functions are called internally by the HDF5 Library. </p>
 <p class="FM__Body">&#160;&#160;A number of utility functions were written for the function </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5Z_set_local_nbit&lt;/code&gt;. Compression and decompression functions </p>
 <p class="FM__Body"> &#160;were written and are called by function &lt;code&gt;H5Z_filter_nbit&lt;/code&gt;. </p>
 <p class="FM__Body"> &#160;All these functions are included in the file &lt;code&gt;H5Znbit.c&lt;/code&gt;.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The public function &lt;code&gt;H5Pset_nbit&lt;/code&gt; is called by </p>
 <p class="FM__Body">&#160;&#160;the application to set up the use of the n-bit filter. </p>
 <p class="FM__Body"> &#160;This function is included in the file &lt;code&gt;H5Pdcpl.c&lt;/code&gt;. </p>
 <p class="FM__Body"> &#160;The application does not need to supply any parameters.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;h5&gt;&lt;em&gt;How N-bit Parameters are Stored&lt;/em&gt;&lt;/h5&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;A scheme of storing parameters required by the n-bit filter in the </p>
 <p class="FM__Body"> &#160;array &lt;code&gt;cd_values[]&lt;/code&gt; was developed utilizing recursive </p>
 <p class="FM__Body"> &#160;function calls.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;Four private utility functions were written for storing the parameters </p>
 <p class="FM__Body">&#160;&#160;associated with atomic (integer or floating-point), no-op, array, and </p>
 <p class="FM__Body"> &#160;compound datatypes:&lt;/p&gt;</p>
 <p class="FM__Body"> &#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&lt;li&gt;&lt;code&gt;H5Z_set_parms_atomic&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&lt;li&gt;&lt;code&gt;H5Z_set_parms_array&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&lt;li&gt;&lt;code&gt;H5Z_set_parms_nooptype&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&lt;li&gt;&lt;code&gt;H5Z_set_parms_compound&lt;/code&gt; &lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&lt;/ul&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;p&gt;The scheme is briefly described below.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dir&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&#160;&#160;First, assign a numeric code for datatype class atomic (integer or float), </p>
 <p class="FM__Body">&#160;&#160;no-op, array, and compound datatype. The code is stored before other </p>
 <p class="FM__Body"> &#160;datatype related parameters are stored.</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;dl&gt;</p>
 <p class="FM__Body"> &#160;&lt;dd&gt;</p>
 <p class="FM__Body"> &#160;&lt;dt&gt;The first three parameters of &lt;code&gt;cd_values[]&lt;/code&gt; are reserved for:</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;ol&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;The number of valid entries in the array &lt;code&gt;cd_values[]&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;A flag indicating whether compression is needed&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;The number of elements in the chunk&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ol&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body"> &#160;&lt;dt&gt;Throughout the balance of this explanation, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;code&gt;i&lt;/code&gt; represents the index of &lt;code&gt;cd_values[]&lt;/code&gt;.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;br&gt;&amp;nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;dt&gt;In the function &lt;code&gt;H5Z_set_local_nbit&lt;/code&gt;:</p>
 <p class="FM__Body"> &#160;&lt;dd&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;ol&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;code&gt;i&lt;/code&gt; = 2&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Get the number of elements in the chunk and store in</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;cd_value[i]&lt;/code&gt;; increment &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Get the class of the datatype:</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;&amp;nbsp;&amp;nbsp;For an integer or floating-point datatype, call </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Z_set_parms_atomic&lt;/code&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;&amp;nbsp;&amp;nbsp;For an array datatype, call </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Z_set_parms_array&lt;/code&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;&amp;nbsp;&amp;nbsp;For a compound datatype, call </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Z_set_parms_compound&lt;/code&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;&amp;nbsp;&amp;nbsp;For none of the above, call </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Z_set_parms_noopdatatype&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Store &lt;code&gt;i&lt;/code&gt; in &lt;code&gt;cd_value[0]&lt;/code&gt; and </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;flag in &lt;code&gt;cd_values[1]&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/ol&gt;</p>
 <p class="FM__Body"> &#160;&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;/dl&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dl&gt;</p>
 <p class="FM__Body"> &#160;&lt;dt&gt;In the function &lt;code&gt;H5Z_set_parms_atomic&lt;/code&gt;:&lt;/dt&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;dd&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;ol&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Store the assigned numeric code for the atomic datatype in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;cd_value[i]&lt;/code&gt;; increment &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Get the size of the atomic datatype and store in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;cd_value[i]&lt;/code&gt;; increment &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Get the order of the atomic datatype and store in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;cd_value[i]&lt;/code&gt;; increment &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Get the precision of the atomic datatype and store in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;cd_value[i]&lt;/code&gt;; increment &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Get the offset of the atomic datatype and store in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;cd_value[i]&lt;/code&gt;; increment &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Determine the need to do compression at this point&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/ol&gt;</p>
 <p class="FM__Body"> &#160;&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;/dl&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dl&gt;</p>
 <p class="FM__Body"> &#160;&lt;dt&gt;In the function &lt;code&gt;H5Z_set_parms_nooptype&lt;/code&gt;:</p>
 <p class="FM__Body"> &#160;&lt;dd&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;ol&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Store the assigned numeric code for the no-op datatype in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;cd_value[i]&lt;/code&gt;; increment &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Get the size of the no-op datatype and store in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;cd_value[i]&lt;/code&gt;; increment &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/ol&gt;</p>
 <p class="FM__Body"> &#160;&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;/dl&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dl&gt;</p>
 <p class="FM__Body"> &#160;&lt;dt&gt;In the function &lt;code&gt;H5Z_set_parms_array&lt;/code&gt;:</p>
 <p class="FM__Body"> &#160;&lt;dd&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;ol&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Store the assigned numeric code for the array datatype in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;cd_value[i]&lt;/code&gt;; increment &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Get the size of the array datatype and store in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;cd_value[i]&lt;/code&gt;; increment &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Get the class of the array'&amp;rsquo;s base datatype.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;&amp;nbsp;&amp;nbsp;For an integer or floating-point datatype, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call &lt;code&gt;H5Z_set_parms_atomic&lt;/code&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;&amp;nbsp;&amp;nbsp;For an array datatype, call </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Z_set_parms_array&lt;/code&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;&amp;nbsp;&amp;nbsp;For a compound datatype, call </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;H5Z_set_parms_compound&lt;/code&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;&amp;nbsp;&amp;nbsp;If none of the above, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call &lt;code&gt;H5Z_set_parms_noopdatatype&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/ol&gt;</p>
 <p class="FM__Body"> &#160;&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;/dl&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dl&gt;</p>
 <p class="FM__Body"> &#160;&lt;dt&gt;In the function &lt;code&gt;H5Z_set_parms_compound&lt;/code&gt;:</p>
 <p class="FM__Body"> &#160;&lt;dd&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;ol&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Store the assigned numeric code for the compound datatype in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;cd_value[i]&lt;/code&gt;; increment &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Get the size of the compound datatype and store in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;cd_value[i]&lt;/code&gt;; increment &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;Get the number of members and store in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;cd_values[i]&lt;/code&gt;; increment &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;For each member</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;&amp;nbsp;&amp;nbsp;Get the member offset and store in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;code&gt;cd_values[i]&lt;/code&gt;; increment &lt;code&gt;i&lt;/code&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;&amp;nbsp;&amp;nbsp;Get the class of the member datatype</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;&amp;nbsp;&amp;nbsp;For an integer or floating-point datatype, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call &lt;code&gt;H5Z_set_parms_atomic&lt;/code&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;&amp;nbsp;&amp;nbsp;For an array datatype, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call &lt;code&gt;H5Z_set_parms_array&lt;/code&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;&amp;nbsp;&amp;nbsp;For a compound datatype, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call &lt;code&gt;H5Z_set_parms_compound&lt;/code&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br&gt;&amp;nbsp;&amp;nbsp;If none of the above, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call &lt;code&gt;H5Z_set_parms_noopdatatype&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/ol&gt;</p>
 <p class="FM__Body"> &#160;&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;/dl&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;/dir&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h5&gt;&lt;em&gt;N-bit Compression and Decompression Functions&lt;/em&gt;&lt;/h5&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The n-bit compression and decompression functions above are called </p>
 <p class="FM__Body"> &#160;by the private HDF5 function &lt;code&gt;H5Z_filter_nbit&lt;/code&gt;. </p>
 <p class="FM__Body"> &#160;The compress and decompress functions retrieve the n-bit parameters</p>
 <p class="FM__Body"> &#160;from &lt;code&gt;cd_values[]&lt;/code&gt; as it was passed by</p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5Z_filter_nbit&lt;/code&gt;. Parameters are retrieved in exactly the </p>
 <p class="FM__Body">&#160;&#160;same order in which they are stored and lower-level compression and </p>
 <p class="FM__Body"> &#160;decompression functions for different datatype classes are called. &lt;/p&gt;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">&#160;&#160;These functions are implementated according to the descriptions </p>
 <p class="FM__Body"> &#160;in sections 2.1 and 2.2.</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt;N-bit compression is not implemented in place. Due to the </p>
 <p class="FM__Body">&#160;&#160;difficulty of calculating actual output buffer size after compression, </p>
 <p class="FM__Body">&#160;&#160;the same space as that of the input buffer is allocated for the output </p>
 <p class="FM__Body">&#160;&#160;buffer as passed to the compression function. However, the size of the </p>
 <p class="FM__Body">&#160;&#160;output buffer passed by reference to the compression function will </p>
 <p class="FM__Body"> &#160;be changed (smaller) after the compression is complete.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;a name=&quot;examples&quot;&gt;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Usage Examples&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&lt;/a&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The following code example illustrates the use of the n-bit filter </p>
 <p class="FM__Body"> &#160;for writing and reading n-bit integer data.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body">&lt;pre&gt;</p>
 <p class="FM__Body">#include &quot;hdf5.h&quot;</p>
 <p class="FM__Body">#include &quot;stdlib.h&quot;</p>
 <p class="FM__Body">#include &quot;math.h&quot;</p>
 <p class="FM__Body">#define H5FILE_NAME &#160;&quot;nbit_test_int.h5&quot;</p>
 <p class="FM__Body">#define DATASET_NAME &quot;nbit_int&quot;</p>
 <p class="FM__Body">#define NX 200</p>
 <p class="FM__Body">#define NY 300</p>
 <p class="FM__Body">#define CH_NX 10</p>
 <p class="FM__Body">#define CH_NY 15</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">int main(void)</p>
 <p class="FM__Body">{</p>
 <p class="FM__Body"> &#160;&#160;hid_t &#160;&#160;file, dataspace, dataset, datatype, mem_datatype, dset_create_props;</p>
 <p class="FM__Body"> &#160;&#160;hsize_t dims[2], chunk_size[2];</p>
 <p class="FM__Body"> &#160;&#160;int &#160;&#160;&#160;&#160;orig_data[NX][NY];</p>
 <p class="FM__Body"> &#160;&#160;int &#160;&#160;&#160;&#160;new_data[NX][NY];</p>
 <p class="FM__Body"> &#160;&#160;int &#160;&#160;&#160;&#160;i, j;</p>
 <p class="FM__Body"> &#160;&#160;size_t &#160;precision, offset;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;/* Define dataset datatype (integer), and set precision, offset */</p>
 <p class="FM__Body"> &#160;&#160;datatype = H5Tcopy(H5T_NATIVE_INT);</p>
 <p class="FM__Body"> &#160;&#160;precision = 17; /* precision includes sign bit */</p>
 <p class="FM__Body"> &#160;&#160;if(H5Tset_precision(datatype,precision)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to set precision\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body"> &#160;&#160;offset = 4;</p>
 <p class="FM__Body"> &#160;&#160;if(H5Tset_offset(datatype,offset)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to set offset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;/* Copy to memory datatype */</p>
 <p class="FM__Body"> &#160;&#160;mem_datatype = H5Tcopy(datatype);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;/* Set order of dataset datatype */</p>
 <p class="FM__Body"> &#160;&#160;if(H5Tset_order(datatype, H5T_ORDER_BE)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to set endianness\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/* Initiliaze data buffer with random data within correct range</p>
 <p class="FM__Body"> &#160;&#160;* corresponding to the memory datatype's precision and offset.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;for (i=0; i &amp;lt; NX; i++)</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;for (j=0; j &amp;lt; NY; j++)</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;orig_data[i][j] = rand() % (int)pow(2, precision-1) &amp;lt;&amp;lt;offset;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;/* Describe the size of the array. */</p>
 <p class="FM__Body"> &#160;&#160;dims[0] = NX;</p>
 <p class="FM__Body"> &#160;&#160;dims[1] = NY;</p>
 <p class="FM__Body"> &#160;&#160;if((dataspace = H5Screate_simple (2, dims, NULL))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to create dataspace\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Create a new file using read/write access, default file</p>
 <p class="FM__Body"> &#160;&#160;* creation properties, and default file access properties.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if((file = H5Fcreate (H5FILE_NAME, H5F_ACC_TRUNC,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H5P_DEFAULT, H5P_DEFAULT))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to create file\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Set the dataset creation property list to specify that</p>
 <p class="FM__Body"> &#160;&#160;* the raw data is to be partitioned into 10 x 15 element</p>
 <p class="FM__Body"> &#160;&#160;* chunks and that each chunk is to be compressed.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;chunk_size[0] = CH_NX;</p>
 <p class="FM__Body"> &#160;&#160;chunk_size[1] = CH_NY;</p>
 <p class="FM__Body"> &#160;&#160;if((dset_create_props = H5Pcreate (H5P_DATASET_CREATE))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to create dataset property\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body"> &#160;&#160;if(H5Pset_chunk (dset_create_props, 2, chunk_size)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to set chunk\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;/pre&gt;&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;pre&gt;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Set parameters for n-bit compression; check the description of</p>
 <p class="FM__Body"> &#160;&#160;* the H5Pset_nbit function in the HDF5 Reference Manual for more</p>
 <p class="FM__Body"> &#160;&#160;* information.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if(H5Pset_nbit (dset_create_props)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to set nbit filter\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Create a new dataset within the file. &#160;The datatype</p>
 <p class="FM__Body"> &#160;&#160;* and dataspace describe the data on disk, which may</p>
 <p class="FM__Body"> &#160;&#160;* be different from the format used in the application's</p>
 <p class="FM__Body"> &#160;&#160;* memory.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if((dataset = H5Dcreate(file, DATASET_NAME, datatype,</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dataspace, H5P_DEFAULT, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dset_create_props, H5P_DEFAULT))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to create dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Write the array to the file. The datatype and dataspace</p>
 <p class="FM__Body">&#160;&#160;&#160;* describe the format of the data in the 'orig_data' buffer.</p>
 <p class="FM__Body"> &#160;&#160;* The raw data is translated to the format required on disk,</p>
 <p class="FM__Body"> &#160;&#160;* as defined above. We use default raw data transfer properties.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if(H5Dwrite (dataset, mem_datatype, H5S_ALL, H5S_ALL,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H5P_DEFAULT, orig_data)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to write to dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;H5Dclose (dataset);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;if((dataset = H5Dopen(file, DATASET_NAME, H5P_DEFAULT))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to open dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Read the array. This is similar to writing data,</p>
 <p class="FM__Body"> &#160;&#160;* except the data flows in the opposite direction.</p>
 <p class="FM__Body"> &#160;&#160;* Note: Decompression is automatic.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if(H5Dread (dataset, mem_datatype, H5S_ALL, H5S_ALL,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H5P_DEFAULT, new_data)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to read from dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;/pre&gt;&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;pre&gt;</p>
 <p class="FM__Body"> &#160;&#160;H5Tclose (datatype);</p>
 <p class="FM__Body"> &#160;&#160;H5Tclose (mem_datatype);</p>
 <p class="FM__Body"> &#160;&#160;H5Dclose (dataset);</p>
 <p class="FM__Body"> &#160;&#160;H5Sclose (dataspace);</p>
 <p class="FM__Body"> &#160;&#160;H5Pclose (dset_create_props);</p>
 <p class="FM__Body"> &#160;&#160;H5Fclose (file);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;return 0;</p>
 <p class="FM__Body">}&lt;/pre&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Example 10. N-bit compression for integer data&lt;/b&gt;&lt;br /&gt; </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Illustrates the use of the n-bit filter for writing and reading </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n-bit integer data.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The following code example illustrates the use of the n-bit filter </p>
 <p class="FM__Body"> &#160;for writing and reading n-bit floating-point data.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body">&lt;pre&gt;</p>
 <p class="FM__Body">#include &quot;hdf5.h&quot;</p>
 <p class="FM__Body">#define H5FILE_NAME &#160;&quot;nbit_test_float.h5&quot;</p>
 <p class="FM__Body">#define DATASET_NAME &quot;nbit_float&quot;</p>
 <p class="FM__Body">#define NX 2</p>
 <p class="FM__Body">#define NY 5</p>
 <p class="FM__Body">#define CH_NX 2</p>
 <p class="FM__Body">#define CH_NY 5</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">int main(void)</p>
 <p class="FM__Body">{</p>
 <p class="FM__Body"> &#160;&#160;hid_t &#160;&#160;file, dataspace, dataset, datatype, dset_create_props;</p>
 <p class="FM__Body"> &#160;&#160;hsize_t dims[2], chunk_size[2];</p>
 <p class="FM__Body"> &#160;/* orig_data[] are initialized to be within the range that can be</p>
 <p class="FM__Body"> &#160;&#160;* represented by dataset datatype (no precision loss during</p>
 <p class="FM__Body"> &#160;&#160;* datatype conversion)</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;float &#160;&#160;orig_data[NX][NY] = {{188384.00, 19.103516, -1.0831790e9,</p>
 <p class="FM__Body"> &#160;&#160;-84.242188, 5.2045898}, {-49140.000, 2350.2500, -3.2110596e-1,</p>
 <p class="FM__Body"> &#160;&#160;6.4998865e-5, -0.0000000}};</p>
 <p class="FM__Body"> &#160;&#160;float &#160;&#160;new_data[NX][NY];</p>
 <p class="FM__Body"> &#160;&#160;size_t &#160;precision, offset;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/* Define single-precision floating-point type for dataset</p>
 <p class="FM__Body"> &#160;&#160;*-------------------------------------------------------------------</p>
 <p class="FM__Body"> &#160;&#160;* size=4 byte, precision=20 bits, offset=7 bits,</p>
 <p class="FM__Body"> &#160;&#160;* mantissa size=13 bits, mantissa position=7,</p>
 <p class="FM__Body"> &#160;&#160;* exponent size=6 bits, exponent position=20,</p>
 <p class="FM__Body"> &#160;&#160;* exponent bias=31.</p>
 <p class="FM__Body"> &#160;&#160;* It can be illustrated in little-endian order as:</p>
 <p class="FM__Body"> &#160;&#160;* (S - sign bit, E - exponent bit, M - mantissa bit,</p>
 <p class="FM__Body"> &#160;&#160;* &#160;? - padding bit)</p>
 <p class="FM__Body"> &#160;&#160;*</p>
 <p class="FM__Body"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3 &#160;&#160;&#160;&#160;&#160;&#160;&#160;2 &#160;&#160;&#160;&#160;&#160;&#160;&#160;1 &#160;&#160;&#160;&#160;&#160;&#160;&#160;0</p>
 <p class="FM__Body"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;?????SEE EEEEMMMM MMMMMMMM M???????</p>
 <p class="FM__Body"> &#160;&#160;*</p>
 <p class="FM__Body"> &#160;&#160;* To create a new floating-point type, the following</p>
 <p class="FM__Body"> &#160;&#160;* properties must be set in the order of</p>
 <p class="FM__Body"> &#160;&#160;* &#160;&#160;&#160;&#160;set fields -&gt; set offset -&gt; set precision -&gt; set size.</p>
 <p class="FM__Body"> &#160;&#160;* All these properties must be set before the type can function.</p>
 <p class="FM__Body"> &#160;&#160;* Other properties can be set anytime. Derived type size cannot</p>
 <p class="FM__Body"> &#160;&#160;* be expanded bigger than original size but can be decreased.</p>
 <p class="FM__Body"> &#160;&#160;* There should be no holes among the significant bits. Exponent</p>
 <p class="FM__Body"> &#160;&#160;* bias usually is set 2^(n-1)-1, where n is the exponent size.</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">*-------------------------------------------------------------------*/</p>
 <p class="FM__Body"> &#160;&#160;datatype = H5Tcopy(H5T_IEEE_F32BE);</p>
 <p class="FM__Body"> &#160;&#160;if(H5Tset_fields(datatype, 26, 20, 6, 7, 13)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to set fields\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body"> &#160;&#160;offset = 7;</p>
 <p class="FM__Body"> &#160;&#160;if(H5Tset_offset(datatype,offset)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to set offset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body"> &#160;&#160;precision = 20;</p>
 <p class="FM__Body"> &#160;&#160;if(H5Tset_precision(datatype,precision)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to set precision\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body"> &#160;&#160;if(H5Tset_size(datatype, 4)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to set size\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body"> &#160;&#160;if(H5Tset_ebias(datatype, 31)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to set exponent bias\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;/* Describe the size of the array. */</p>
 <p class="FM__Body"> &#160;&#160;dims[0] = NX;</p>
 <p class="FM__Body"> &#160;&#160;dims[1] = NY;</p>
 <p class="FM__Body"> &#160;&#160;if((dataspace = H5Screate_simple (2, dims, NULL))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to create dataspace\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Create a new file using read/write access, default file</p>
 <p class="FM__Body"> &#160;&#160;* creation properties, and default file access properties.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if((file = H5Fcreate (H5FILE_NAME, H5F_ACC_TRUNC,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H5P_DEFAULT, H5P_DEFAULT))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to create file\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Set the dataset creation property list to specify that</p>
 <p class="FM__Body"> &#160;&#160;* the raw data is to be partitioned into 2 x 5 element</p>
 <p class="FM__Body"> &#160;&#160;* chunks and that each chunk is to be compressed.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;chunk_size[0] = CH_NX;</p>
 <p class="FM__Body"> &#160;&#160;chunk_size[1] = CH_NY;</p>
 <p class="FM__Body"> &#160;&#160;if((dset_create_props = H5Pcreate (H5P_DATASET_CREATE))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to create dataset property\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body"> &#160;&#160;if(H5Pset_chunk (dset_create_props, 2, chunk_size)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to set chunk\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Set parameters for n-bit compression; check the description</p>
 <p class="FM__Body"> &#160;&#160;* of the H5Pset_nbit function in the HDF5 Reference Manual</p>
 <p class="FM__Body"> &#160;&#160;* for more information.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if(H5Pset_nbit (dset_create_props)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to set nbit filter\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Create a new dataset within the file. &#160;The datatype</p>
 <p class="FM__Body"> &#160;&#160;* and dataspace describe the data on disk, which may</p>
 <p class="FM__Body"> &#160;&#160;* be different from the format used in the application's</p>
 <p class="FM__Body"> &#160;&#160;* memory.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if((dataset = H5Dcreate(file, DATASET_NAME, datatype,</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dataspace, H5P_DEFAULT, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dset_creat_plists, H5P_DEFAULT))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to create dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Write the array to the file. The datatype and dataspace</p>
 <p class="FM__Body">&#160;&#160;&#160;* describe the format of the data in the 'orig_data' buffer.</p>
 <p class="FM__Body"> &#160;&#160;* The raw data is translated to the format required on disk,</p>
 <p class="FM__Body"> &#160;&#160;* as defined above. We use default raw data transfer properties.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if(H5Dwrite (dataset, H5T_NATIVE_FLOAT, H5S_ALL, H5S_ALL,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H5P_DEFAULT, orig_data)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to write to dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;H5Dclose (dataset);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;if((dataset = H5Dopen(file, DATASET_NAME, H5P_DEFAULT))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to open dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Read the array. This is similar to writing data,</p>
 <p class="FM__Body"> &#160;&#160;* except the data flows in the opposite direction.</p>
 <p class="FM__Body"> &#160;&#160;* Note: Decompression is automatic.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if(H5Dread (dataset, H5T_NATIVE_FLOAT, H5S_ALL, H5S_ALL,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H5P_DEFAULT, new_data)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to read from dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;H5Tclose (datatype);</p>
 <p class="FM__Body"> &#160;&#160;H5Dclose (dataset);</p>
 <p class="FM__Body"> &#160;&#160;H5Sclose (dataspace);</p>
 <p class="FM__Body"> &#160;&#160;H5Pclose (dset_create_props);</p>
 <p class="FM__Body"> &#160;&#160;H5Fclose (file);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;return 0;</p>
 <p class="FM__Body">}&lt;/pre&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Example 11. N-bit compression for floating-point data&lt;/b&gt;&lt;br /&gt; </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Illustrates the use of the n-bit filter for writing and reading </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n-bit floating-point data.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;a name=&quot;limitations&quot;&gt;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Limitations&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&lt;/a&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;Because the array &lt;code&gt;cd_values[]&lt;/code&gt; has to fit into an object </p>
 <p class="FM__Body">&#160;&#160;header message of 64K, the n-bit filter has an upper limit on the number </p>
 <p class="FM__Body">&#160;&#160;of n-bit parameters that can be stored in it. To be conservative, a maximum </p>
 <p class="FM__Body"> &#160;of 4K is allowed for the number of parameters.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The n-bit filter currently only compresses n-bit datatypes or fields derived </p>
 <p class="FM__Body">&#160;&#160;from integer or floating-point datatypes. The n-bit filter assumes padding </p>
 <p class="FM__Body">&#160;&#160;bits of zero. This may not be true since the HDF5 user can set padding bit </p>
 <p class="FM__Body">&#160;&#160;to be zero, one, or leave the background alone. However, it is expected </p>
 <p class="FM__Body"> &#160;the n-bit filter will be modified to adjust to such situations.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The n-bit filter does not have a way to handle the situation where the  </p>
 <p class="FM__Body">&#160;&#160;fill value of a dataset is defined and the fill value is not of an n-bit </p>
 <p class="FM__Body"> &#160;datatype although the dataset datatype is.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;a name=&quot;ScaleOffset&quot;&gt;</p>
 <p class="FM__Body">&lt;h3&gt;5.6.2. Using the Scale-offset Filter&lt;/h3&gt;</p>
 <p class="FM__Body">&lt;/a&gt; </p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;Generally speaking, scale-offset compression performs a scale and/or </p>
 <p class="FM__Body">&#160;&#160;offset operation on each data value and truncates the resulting value </p>
 <p class="FM__Body"> &#160;to a minimum number of bits (minimum-bits) before storing it. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The current scale-offset filter supports integer and floating-point </p>
 <p class="FM__Body">&#160;&#160;datatypes only. For the floating-point datatype, float and double are </p>
 <p class="FM__Body"> &#160;supported, but long double is not supported.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;Integer data compression uses a straight-forward algorithm. Floating-point </p>
 <p class="FM__Body">&#160;&#160;data compression adopts the GRiB data packing mechanism which offers </p>
 <p class="FM__Body">&#160;&#160;two alternate methods: a fixed minimum-bits method, and a variable </p>
 <p class="FM__Body">&#160;&#160;minimum-bits method. Currently, only the variable minimum-bits method </p>
 <p class="FM__Body">&#160;&#160;is implemented. &lt;!-- 9.3.10, MEE: according to Kent, the fixed minimum-bits </p>
 <p class="FM__Body">&#160;&#160;method has not yet been implemented, and they do not have any plans to </p>
 <p class="FM__Body"> &#160;implement it. --&gt;&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Like other I/O filters supported by the HDF5 Library, applications </p>
 <p class="FM__Body"> &#160;using the scale-offset filter must store data with chunked storage.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;&lt;b&gt;&lt;i&gt;Integer type:&lt;/i&gt;&lt;/b&gt;</p>
 <p class="FM__Body">&#160;&#160;The minimum-bits of integer data can be determined by the filter. </p>
 <p class="FM__Body">&#160;&#160;For example, if the maximum value of data to be compressed is 7065 </p>
 <p class="FM__Body">&#160;&#160;and the minimum value is 2970. Then the &amp;ldquo;span&amp;rdquo; of dataset </p>
 <p class="FM__Body">&#160;&#160;values is equal to (max-min+1), which is 4676. If no fill value is </p>
 <p class="FM__Body">&#160;&#160;defined for the dataset, the minimum-bits is: </p>
 <p class="FM__Body"> &#160;&lt;code&gt;ceiling(log2(span)) = 12&lt;/code&gt;. With fill value set, the </p>
 <p class="FM__Body"> &#160;minimum-bits is: &lt;code&gt;ceiling(log2(span+1)) = 13&lt;/code&gt;.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;HDF5 users can also set the minimum-bits. However, if the user gives </p>
 <p class="FM__Body">&#160;&#160;a minimum-bits that is less than that calculated by the filter, </p>
 <p class="FM__Body"> &#160;the compression will be lossy.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;&lt;b&gt;&lt;i&gt;Floating-point type:&lt;/i&gt;&lt;/b&gt;</p>
 <p class="FM__Body">&#160;&#160;The basic idea of the scale-offset filter for the floating-point type is </p>
 <p class="FM__Body">&#160;&#160;to transform the data by some kind of scaling to integer data, and </p>
 <p class="FM__Body">&#160;&#160;then to follow the procedure of the scale-offset filter for the integer </p>
 <p class="FM__Body">&#160;&#160;type to do the data compression. Due to the data transformation from </p>
 <p class="FM__Body">&#160;&#160;floating-point to integer, the scale-offset filter is </p>
 <p class="FM__Body"> &#160;lossy in nature. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Two methods of scaling the floating-point data are used: the so-called </p>
 <p class="FM__Body">&#160;&#160;D-scaling and E-scaling. D-scaling is more straightforward and easy to </p>
 <p class="FM__Body">&#160;&#160;understand. For HDF5 1.8 release, only the D-scaling method has been </p>
 <p class="FM__Body">&#160;&#160;implemented. &lt;!-- 9.3.10, MEE: According to Kent, E-scaling has not yet </p>
 <p class="FM__Body"> &#160;been implemented, and they have no plans to implement it in the future. --&gt;&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Design&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Before the filter does any real work, it needs to gather some information </p>
 <p class="FM__Body">&#160;&#160;from the HDF5 Library through API calls. The parameters the filter needs </p>
 <p class="FM__Body"> &#160;are: &lt;/p&gt;</p>
 <p class="FM__Body"> &#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;The minimum-bits of the data value&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;The number of data elements in the chunk&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;The datatype class, size, sign (only for integer type), byte order, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;and fill value </p>
 <p class="FM__Body"> &#160;&#160;&#160;if defined&lt;/li&gt; </p>
 <p class="FM__Body"> &#160;&lt;/ul&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Size and sign are needed to determine what kind of pointer </p>
 <p class="FM__Body"> &#160;cast to use when retrieving values from the data buffer.&lt;/p&gt;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The pipeline of the filter can be divided into four parts: </p>
 <p class="FM__Body">&#160;&#160;(1)pre-compression; (2)compression; (3)decompression; </p>
 <p class="FM__Body"> &#160;(4)post-decompression.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Depending on whether a fill value is defined or not, the filter will </p>
 <p class="FM__Body"> &#160;handle pre-compression and post-decompression differently. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The scale-offset filter only needs the memory byte order, size of </p>
 <p class="FM__Body"> &#160;datatype, and minimum-bits for compression and decompression.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Since decompression has no access to the original data, the minimum-bits </p>
 <p class="FM__Body">&#160;&#160;and the minimum value need to be stored with the compressed data for </p>
 <p class="FM__Body"> &#160;decompression and post-decompression.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h5&gt;&lt;em&gt;Integer Type&lt;/em&gt;&lt;/h5&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;&lt;i&gt;Pre-compression: &lt;/i&gt;</p>
 <p class="FM__Body">&#160;&#160;During pre-compression minimum-bits is calculated if it is not </p>
 <p class="FM__Body">&#160;&#160;set by the user. For more information on how minimum-bits are calculated, </p>
 <p class="FM__Body"> &#160;see section 6.1. &amp;ldquo;The N-bit Filter.&amp;rdquo; &lt;/p&gt;</p>
 <p class="FM__Body">&#160;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;If the fill value is defined, finding the maximum and minimum values </p>
 <p class="FM__Body"> &#160;should ignore the data element whose value is equal to the fill value. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;If no fill value is defined, the value of each data element is subtracted </p>
 <p class="FM__Body"> &#160;by the minimum value during this stage.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;If the fill value is defined, the fill value is assigned to the maximum </p>
 <p class="FM__Body">&#160;&#160;value. In this way minimum-bits can represent a data element whose value </p>
 <p class="FM__Body">&#160;&#160;is equal to the fill value and subtracts the minimum value from a data </p>
 <p class="FM__Body"> &#160;element whose value is not equal to the fill value.&lt;/p&gt;</p>
 <p class="FM__Body">&lt;!-- 8.19.10, MEE: the paragraph belowis is Frank's revision of my editing --&gt;</p>
 <p class="FM__Body">&lt;!-- 9.3.10, MEE: Kent reviewed the paragraph below and said it was clear. --&gt;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The fill value (if defined), the number of elements in a chunk, the </p>
 <p class="FM__Body">&#160;&#160;class of the datatype, the size of the datatype, the memory order of the </p>
 <p class="FM__Body">&#160;&#160;datatype, and other similar elements will be stored in the HDF5 object </p>
 <p class="FM__Body"> &#160;header for the post-decompression usage.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;After pre-compression, all values are non-negative and are within the </p>
 <p class="FM__Body"> &#160;range that can be stored by minimum-bits.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;&lt;i&gt;Compression: &lt;/i&gt;</p>
 <p class="FM__Body">&#160;&#160;All modified data values after pre-compression are packed together </p>
 <p class="FM__Body">&#160;&#160;into the compressed data buffer. The number of bits for each data value </p>
 <p class="FM__Body">&#160;&#160;decreases from the number of bits of integer (32 for most platforms) to </p>
 <p class="FM__Body">&#160;&#160;minimum-bits. The value of minimum-bits and the minimum value are added to </p>
 <p class="FM__Body">&#160;&#160;the data buffer and the whole buffer is sent back to the library. In this </p>
 <p class="FM__Body">&#160;&#160;way, the number of bits for each modified value is no more than </p>
 <p class="FM__Body"> &#160;the size of minimum-bits.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;&lt;i&gt;Decompression: &lt;/i&gt;</p>
 <p class="FM__Body">&#160;&#160;In this stage, the number of bits for each data value is resumed from </p>
 <p class="FM__Body"> &#160;minimum-bits to the number of bits of integer.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;&lt;i&gt;Post-decompression: &lt;/i&gt;</p>
 <p class="FM__Body">&#160;&#160;For the post-decompression stage, the filter does the opposite </p>
 <p class="FM__Body">&#160;&#160;of what it does during pre-compression except that it does not calculate </p>
 <p class="FM__Body">&#160;&#160;the minimum-bits or the minimum value. These values were saved during </p>
 <p class="FM__Body">&#160;&#160;compression and can be retrieved through the resumed data buffer. If </p>
 <p class="FM__Body">&#160;&#160;no fill value is defined, the filter adds the minimum value back to </p>
 <p class="FM__Body"> &#160;each data element.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;If the fill value is defined, the filter assigns the fill value to the </p>
 <p class="FM__Body">&#160;&#160;data element whose value is equal to the maximum value that minimum-bits can </p>
 <p class="FM__Body">&#160;&#160;represent and adds the minimum value back to each data element whose value </p>
 <p class="FM__Body"> &#160;is not equal to the maximum value that minimum-bits can represent.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;a name=&quot;SO_FloatingPoint&quot;&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/a&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h5&gt;&lt;em&gt;Floating-point Type&lt;/em&gt;&lt;/h5&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The filter will do data transformation from floating-point type to </p>
 <p class="FM__Body">&#160;&#160;integer type and then handle the data by using the procedure for handling </p>
 <p class="FM__Body">&#160;&#160;the integer data inside the filter. &#160;</p>
 <p class="FM__Body">&#160;&#160;Insignificant bits of floating-point data will be cut off </p>
 <p class="FM__Body"> &#160;during data transformation, so this filter is a lossy compression method.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;There are two scaling methods: D-scaling and E-scaling. </p>
 <p class="FM__Body">&#160;&#160;The HDF5 1.8 release only supports D-scaling. D-scaling is short for </p>
 <p class="FM__Body">&#160;&#160;decimal scaling. E-scaling should be similar conceptually. In order </p>
 <p class="FM__Body">&#160;&#160;to transform data from floating-point to </p>
 <p class="FM__Body">&#160;&#160;integer, a scale factor is introduced. The minimum value will be calculated. </p>
 <p class="FM__Body">&#160;&#160;Each data element value will subtract the minimum value. The modified data </p>
 <p class="FM__Body"> &#160;will be multiplied by 10 (Decimal) to the power of &lt;code&gt;scale_factor&lt;/code&gt;, </p>
 <p class="FM__Body">&#160;&#160;and only the integer part will be kept and manipulated through the routines </p>
 <p class="FM__Body">&#160;&#160;for the integer type of the filter during pre-compression and compression. </p>
 <p class="FM__Body">&#160;&#160;Integer data will be divided by 10 to the power of </p>
 <p class="FM__Body"> &#160;&lt;code&gt;scale_factor&lt;/code&gt; to transform back to floating-point data </p>
 <p class="FM__Body">&#160;&#160;during decompression and post-decompression. &#160;</p>
 <p class="FM__Body">&#160;&#160;Each data element value will then add the minimum value, and the </p>
 <p class="FM__Body">&#160;&#160;floating-point data are resumed. However, the resumed data will lose some </p>
 <p class="FM__Body"> &#160;insignificant bits compared with the original value.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;For example, the following floating-point data are manipulated by the </p>
 <p class="FM__Body"> &#160;filter, and the D-scaling factor is 2.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body"> &#160;&lt;code&gt;{104.561, 99.459, 100.545, 105.644}&lt;/code&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The minimum value is 99.459, each data element subtracts 99.459, the </p>
 <p class="FM__Body"> &#160;modified data is &lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body"> &#160;&lt;code&gt;{5.102, 0, 1.086, 6.185}&lt;/code&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;Since the D-scaling factor is 2, all floating-point data will be </p>
 <p class="FM__Body"> &#160;multiplied by 10^2 with this result: &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;code&gt;{510.2, 0, 108.6, 618.5}&lt;/code&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;The digit after decimal point will be rounded off, and then the set looks </p>
 <p class="FM__Body"> &#160;like: &lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body"> &#160;&lt;code&gt;{510 , 0, 109, 619}&lt;/code&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;After decompression, each value will be divided by 10^2 and will be added </p>
 <p class="FM__Body"> &#160;to the offset 99.459.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The floating-point data becomes &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;code&gt;{104.559, 99.459, 100.549, 105.649}&lt;/code&gt;.</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The relative error for each value should be no more than </p>
 <p class="FM__Body">&#160;&#160;5* (10^(D-scaling factor +1)). D-scaling sometimes is also referred </p>
 <p class="FM__Body">&#160;&#160;as a variable minimum-bits method since for different datasets the </p>
 <p class="FM__Body">&#160;&#160;minimum-bits to represent the same decimal precision will vary. The </p>
 <p class="FM__Body"> &#160;data value is modified to 2 to power of &lt;code&gt;scale_factor&lt;/code&gt; for </p>
 <p class="FM__Body">&#160;&#160;E-scaling. E-scaling is also called fixed-bits method since for different </p>
 <p class="FM__Body">&#160;&#160;datasets the minimum-bits will always be fixed to the scale factor of </p>
 <p class="FM__Body">&#160;&#160;E-scaling. </p>
 <p class="FM__Body"> &#160;Currently HDF5 ONLY supports D-scaling (variable minimum-bits) method.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Implementation&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The scale-offset filter implementation was written and included in the file </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5Zscaleoffset.c&lt;/code&gt;. Function &lt;code&gt;H5Pset_scaleoffset&lt;/code&gt; was </p>
 <p class="FM__Body"> &#160;written and included in the file &amp;ldquo;&lt;code&gt;H5Pdcpl.c&lt;/code&gt;&amp;rdquo;. The </p>
 <p class="FM__Body">&#160;&#160;HDF5 user can supply minimum-bits by calling function </p>
 <p class="FM__Body"> &#160;&lt;code&gt;H5Pset_scaleoffset&lt;/code&gt;.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;p&gt;The scale-offset filter was implemented based on the design outlined in </p>
 <p class="FM__Body"> &#160;this section. However, the following factors need to be considered:&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;dl&gt;</p>
 <p class="FM__Body"> &#160;&lt;dd&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;ol&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;The filter needs the appropriate cast pointer whenever it needs </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;to retrieve data values.&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;The HDF5 Library passes to the filter the to-be-compressed data </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;in the format of the dataset datatype, and the filter passes back the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;decompressed data in the same format. If a fill value is defined, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;it is also in dataset datatype format. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;For example, if the byte order of the dataset datatype is different </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;from that of the memory datatype of the platform, compression or </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;decompression performs an endianness conversion of data buffer. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Moreover, it should be aware that memory byte order can be different </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;during compression and decompression.&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;The difference of endianness and datatype between file and memory </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;should be considered when saving and retrieval of minimum-bits, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;minimum value, and fill value.&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;If the user sets the minimum-bits to full precision of the datatype, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;no operation is needed at the filter side. If the full precision is </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a result of calculation by the filter, then the minimum-bits needs </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;to be saved for decompression but no compression or decompression </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;is needed (only a copy of the input buffer is needed).&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;If by calculation of the filter, the minimum-bits is equal to zero, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special handling is needed. Since it means all values are the same, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;no compression or decompression is needed. But the minimum-bits </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;and minimum value still need to be saved during compression.&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;For floating-point data, the minimum value of the dataset should </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;be calculated at first. Each data element value will then subtract </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;the minimum value to obtain the &amp;ldquo;offset&amp;rdquo; data. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;The offset data will then follow the steps outlined above in the</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;discussion of &lt;a href=&quot;#SO_FloatingPoint&quot;&gt;floating-point types&lt;/a&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;to do data transformation to integer and rounding.&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ol&gt;</p>
 <p class="FM__Body"> &#160;&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;/dl&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Usage Examples&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The following code example illustrates the use of the scale-offset filter </p>
 <p class="FM__Body"> &#160;for writing and reading integer data.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body">&lt;pre&gt;</p>
 <p class="FM__Body">#include &quot;hdf5.h&quot;</p>
 <p class="FM__Body">#include &quot;stdlib.h&quot;</p>
 <p class="FM__Body">#define H5FILE_NAME &#160;&quot;scaleoffset_test_int.h5&quot;</p>
 <p class="FM__Body">#define DATASET_NAME &quot;scaleoffset_int&quot;</p>
 <p class="FM__Body">#define NX 200</p>
 <p class="FM__Body">#define NY 300</p>
 <p class="FM__Body">#define CH_NX 10</p>
 <p class="FM__Body">#define CH_NY 15</p>
 <p class="FM__Body">&lt;/pre&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;pre&gt;</p>
 <p class="FM__Body">int main(void)</p>
 <p class="FM__Body">{</p>
 <p class="FM__Body"> &#160;&#160;hid_t &#160;&#160;file, dataspace, dataset, datatype, dset_create_props;</p>
 <p class="FM__Body"> &#160;&#160;hsize_t dims[2], chunk_size[2];</p>
 <p class="FM__Body"> &#160;&#160;int &#160;&#160;&#160;&#160;orig_data[NX][NY];</p>
 <p class="FM__Body">&#160;&#160;&#160;int &#160;&#160;&#160;&#160;new_data[NX][NY]; &#160;&#160;</p>
 <p class="FM__Body">&#160;&#160;&#160;int &#160;&#160;&#160;&#160;i, j, fill_val; &#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;/* Define dataset datatype */</p>
 <p class="FM__Body">&#160;&#160;&#160;datatype = H5Tcopy(H5T_NATIVE_INT); &#160;&#160;</p>
 <p class="FM__Body">&#160;&#160;&#160;</p>
 <p class="FM__Body"> &#160;&#160;/* Initiliaze data buffer */</p>
 <p class="FM__Body">&#160;&#160;&#160;for (i=0; i &amp;lt; NX; i++) </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;for (j=0; j &amp;lt; NY; j++)</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;orig_data[i][j] = rand() % 10000;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;/* Describe the size of the array. */</p>
 <p class="FM__Body"> &#160;&#160;dims[0] = NX;</p>
 <p class="FM__Body"> &#160;&#160;dims[1] = NY;</p>
 <p class="FM__Body"> &#160;&#160;if((dataspace = H5Screate_simple (2, dims, NULL))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to create dataspace\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Create a new file using read/write access, default file</p>
 <p class="FM__Body"> &#160;&#160;* creation properties, and default file access properties.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body">&#160;&#160;&#160;if((file = H5Fcreate (H5FILE_NAME, H5F_ACC_TRUNC, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H5P_DEFAULT, H5P_DEFAULT))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to create file\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Set the dataset creation property list to specify that</p>
 <p class="FM__Body"> &#160;&#160;* the raw data is to be partitioned into 10 x 15 element</p>
 <p class="FM__Body"> &#160;&#160;* chunks and that each chunk is to be compressed.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;chunk_size[0] = CH_NX;</p>
 <p class="FM__Body"> &#160;&#160;chunk_size[1] = CH_NY;</p>
 <p class="FM__Body"> &#160;&#160;if((dset_create_props = H5Pcreate (H5P_DATASET_CREATE))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to create dataset property\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body"> &#160;&#160;if(H5Pset_chunk (dset_create_props, 2, chunk_size)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to set chunk\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;/* Set the fill value of dataset */</p>
 <p class="FM__Body"> &#160;&#160;fill_val = 10000;</p>
 <p class="FM__Body">&#160;&#160;&#160;if (H5Pset_fill_value(dset_create_props, H5T_NATIVE_INT, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&amp;amp;fill_val)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: can not set fill value for dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body">&#160;&#160;&#160;* Set parameters for scale-offset compression. Check the </p>
 <p class="FM__Body">&#160;&#160;&#160;* description of the H5Pset_scaleoffset function in the </p>
 <p class="FM__Body"> &#160;&#160;* HDF5 Reference Manual for more information [3].</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body">&#160;&#160;&#160;if(H5Pset_scaleoffset (dset_create_props, H5Z_SO_INT, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H5Z_SO_INT_MINIMUMBITS_DEFAULT)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to set scaleoffset filter\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Create a new dataset within the file. The datatype</p>
 <p class="FM__Body"> &#160;&#160;* and dataspace describe the data on disk, which may</p>
 <p class="FM__Body">&#160;&#160;&#160;* or may not be different from the format used in the </p>
 <p class="FM__Body"> &#160;&#160;* application's memory.  The link creation and </p>
 <p class="FM__Body">&#160;&#160;&#160;* dataset access property list parameters are passed </p>
 <p class="FM__Body"> &#160;&#160;* with default values.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if((dataset = H5Dcreate (file, DATASET_NAME, datatype,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dataspace, H5P_DEFAULT,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dset_create_props, H5P_DEFAULT))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to create dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Write the array to the file. The datatype and dataspace</p>
 <p class="FM__Body">&#160;&#160;&#160;* describe the format of the data in the 'orig_data' buffer.</p>
 <p class="FM__Body"> &#160;&#160;* We use default raw data transfer properties.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if(H5Dwrite (dataset, H5T_NATIVE_INT, H5S_ALL, H5S_ALL,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H5P_DEFAULT, orig_data)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to write to dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;H5Dclose (dataset);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;if((dataset = H5Dopen(file, DATASET_NAME, H5P_DEFAULT))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to open dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body">&#160;&#160;&#160;} &#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Read the array. This is similar to writing data,</p>
 <p class="FM__Body"> &#160;&#160;* except the data flows in the opposite direction.</p>
 <p class="FM__Body"> &#160;&#160;* Note: Decompression is automatic.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if(H5Dread (dataset, H5T_NATIVE_INT, H5S_ALL, H5S_ALL,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H5P_DEFAULT, new_data)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to read from dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;H5Tclose (datatype);</p>
 <p class="FM__Body"> &#160;&#160;H5Dclose (dataset);</p>
 <p class="FM__Body"> &#160;&#160;H5Sclose (dataspace);</p>
 <p class="FM__Body"> &#160;&#160;H5Pclose (dset_create_props);</p>
 <p class="FM__Body"> &#160;&#160;H5Fclose (file);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;return 0;</p>
 <p class="FM__Body">}&lt;/pre&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Example 12. Scale-offset compression integer data&lt;/b&gt;&lt;br /&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Illustrates the use of the scale-offset filter for writing </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;and reading integer data.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;p&gt;The following code example illustrates the use of the scale-offset filter </p>
 <p class="FM__Body">&#160;&#160;(set for variable minimum-bits method) for writing and reading </p>
 <p class="FM__Body"> &#160;floating-point data.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body">&lt;pre&gt;</p>
 <p class="FM__Body">#include &quot;hdf5.h&quot;</p>
 <p class="FM__Body">#include &quot;stdlib.h&quot;</p>
 <p class="FM__Body">#define H5FILE_NAME &#160;&quot;scaleoffset_test_float_Dscale.h5&quot;</p>
 <p class="FM__Body">#define DATASET_NAME &quot;scaleoffset_float_Dscale&quot;</p>
 <p class="FM__Body">#define NX 200</p>
 <p class="FM__Body">#define NY 300</p>
 <p class="FM__Body">#define CH_NX 10</p>
 <p class="FM__Body">#define CH_NY 15</p>
 <p class="FM__Body">&lt;/pre&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;pre&gt;</p>
 <p class="FM__Body">int main(void)</p>
 <p class="FM__Body">{</p>
 <p class="FM__Body"> &#160;&#160;hid_t &#160;&#160;file, dataspace, dataset, datatype, dset_create_props;</p>
 <p class="FM__Body"> &#160;&#160;hsize_t dims[2], chunk_size[2];</p>
 <p class="FM__Body"> &#160;&#160;float &#160;&#160;orig_data[NX][NY];</p>
 <p class="FM__Body"> &#160;&#160;float &#160;&#160;new_data[NX][NY];</p>
 <p class="FM__Body">&#160;&#160;&#160;float &#160;&#160;fill_val; &#160;&#160;</p>
 <p class="FM__Body">&#160;&#160;&#160;int &#160;&#160;&#160;&#160;i, j; &#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;/* Define dataset datatype */</p>
 <p class="FM__Body">&#160;&#160;&#160;datatype = H5Tcopy(H5T_NATIVE_FLOAT); &#160;&#160;</p>
 <p class="FM__Body">&#160;&#160;&#160;</p>
 <p class="FM__Body"> &#160;&#160;/* Initiliaze data buffer */</p>
 <p class="FM__Body">&#160;&#160;&#160;for (i=0; i &amp;lt; NX; i++) </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;for (j=0; j &amp;lt; NY; j++)</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;orig_data[i][j] = (rand() % 10000) / 1000.0;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;/* Describe the size of the array. */</p>
 <p class="FM__Body"> &#160;&#160;dims[0] = NX;</p>
 <p class="FM__Body"> &#160;&#160;dims[1] = NY;</p>
 <p class="FM__Body"> &#160;&#160;if((dataspace = H5Screate_simple (2, dims, NULL))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to create dataspace\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Create a new file using read/write access, default file</p>
 <p class="FM__Body"> &#160;&#160;* creation properties, and default file access properties.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body">&#160;&#160;&#160;if((file = H5Fcreate (H5FILE_NAME, H5F_ACC_TRUNC, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H5P_DEFAULT, H5P_DEFAULT))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to create file\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Set the dataset creation property list to specify that</p>
 <p class="FM__Body"> &#160;&#160;* the raw data is to be partitioned into 10 x 15 element</p>
 <p class="FM__Body"> &#160;&#160;* chunks and that each chunk is to be compressed.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;chunk_size[0] = CH_NX;</p>
 <p class="FM__Body"> &#160;&#160;chunk_size[1] = CH_NY;</p>
 <p class="FM__Body"> &#160;&#160;if((dset_create_props = H5Pcreate (H5P_DATASET_CREATE))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to create dataset property\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body"> &#160;&#160;if(H5Pset_chunk (dset_create_props, 2, chunk_size)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to set chunk\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;/* Set the fill value of dataset */</p>
 <p class="FM__Body"> &#160;&#160;fill_val = 10000.0;</p>
 <p class="FM__Body">&#160;&#160;&#160;if (H5Pset_fill_value(dset_create_props, H5T_NATIVE_FLOAT, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&amp;amp;fill_val)&lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: can not set fill value for dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Set parameters for scale-offset compression; use variable</p>
 <p class="FM__Body">&#160;&#160;&#160;* minimum-bits method, set decimal scale factor to 3. Check the </p>
 <p class="FM__Body">&#160;&#160;&#160;* description of the H5Pset_scaleoffset function in the HDF5 </p>
 <p class="FM__Body"> &#160;&#160;* Reference Manual for more information [3].</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if(H5Pset_scaleoffset (dset_create_props, H5Z_SO_FLOAT_DSCALE, 3)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to set scaleoffset filter\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Create a new dataset within the file. The datatype</p>
 <p class="FM__Body"> &#160;&#160;* and dataspace describe the data on disk, which may</p>
 <p class="FM__Body">&#160;&#160;&#160;* or may not be different from the format used in the </p>
 <p class="FM__Body"> &#160;&#160;* application's memory.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if((dataset = H5Dcreate (file, DATASET_NAME, datatype,</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dataspace, H5P_DEFAULT, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dset_create_props, H5P_DEFAULT))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to create dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Write the array to the file. The datatype and dataspace</p>
 <p class="FM__Body">&#160;&#160;&#160;* describe the format of the data in the 'orig_data' buffer.</p>
 <p class="FM__Body"> &#160;&#160;* We use default raw data transfer properties.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if(H5Dwrite (dataset, H5T_NATIVE_FLOAT, H5S_ALL, H5S_ALL,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H5P_DEFAULT, orig_data)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to write to dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;H5Dclose (dataset);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;if((dataset = H5Dopen(file, DATASET_NAME, H5P_DEFAULT))&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to open dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body">&#160;&#160;&#160;} &#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;/*</p>
 <p class="FM__Body"> &#160;&#160;* Read the array. This is similar to writing data,</p>
 <p class="FM__Body"> &#160;&#160;* except the data flows in the opposite direction.</p>
 <p class="FM__Body"> &#160;&#160;* Note: Decompression is automatic.</p>
 <p class="FM__Body"> &#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;if(H5Dread (dataset, H5T_NATIVE_FLOAT, H5S_ALL, H5S_ALL,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H5P_DEFAULT, new_data)&amp;lt;0) {</p>
 <p class="FM__Body">      printf(&quot;Error: fail to read from dataset\n&quot;);</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;return -1;</p>
 <p class="FM__Body"> &#160;&#160;}</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;H5Tclose (datatype);</p>
 <p class="FM__Body"> &#160;&#160;H5Dclose (dataset);</p>
 <p class="FM__Body"> &#160;&#160;H5Sclose (dataspace);</p>
 <p class="FM__Body"> &#160;&#160;H5Pclose (dset_create_props);</p>
 <p class="FM__Body"> &#160;&#160;H5Fclose (file);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;return 0;</p>
 <p class="FM__Body">}&lt;/pre&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Example 13. Scale-offset compression floating-point data&lt;/b&gt;&lt;br /&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Illustrates the use of the scale-offset filter for writing </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;and reading floating-point data.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Limitations&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;For floating-point data handling, there are some algorithmic </p>
 <p class="FM__Body"> &#160;limitations to the GRiB data packing mechanism:&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dl&gt;</p>
 <p class="FM__Body"> &#160;&lt;dd&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;ol&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Both the E-scaling and D-scaling methods are lossy compression&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;For the D-scaling method, since data values have been rounded to </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;integer values (positive) before truncating to the minimum-bits, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their range is limited by the maximum value that can be represented </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;by the corresponding unsigned integer type (the same size as that of </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;the floating-point type)&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ol&gt;</p>
 <p class="FM__Body"> &#160;&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;/dl&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h4&gt;&lt;em&gt;Suggestions&lt;/em&gt;&lt;/h4&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;The following are some suggestions for using the filter for </p>
 <p class="FM__Body">floating-point data:&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dl&gt;</p>
 <p class="FM__Body"> &#160;&lt;dd&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;ol&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;It is better to convert the units of data so that the units are </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;within certain common range (for example, 1200m to 1.2km)&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;If data values to be compressed are very near to zero, it </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;is strongly recommended that the user sets the fill value away </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;from zero (for example, a large positive number); if the user </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;does </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nothing, the HDF5 Library will set the fill value to zero, and </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;this may cause undesirable compression results&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;li&gt;Users are not encouraged to use a very large decimal scale </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;factor (e.g. 100) for the D-scaling method; this can cause the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;filter not to ignore the fill value when finding maximum and minimum </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;values, and they will get a much larger minimum-bits (poor </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;compression)&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ol&gt;</p>
 <p class="FM__Body"> &#160;&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;/dl&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;a name=&quot;Szip&quot;&gt;</p>
 <p class="FM__Body">&lt;h3&gt;5.6.3. Using the Szip Filter&lt;/h3&gt;</p>
 <p class="FM__Body">&lt;/a&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&lt;p&gt;See The HDF Group website for </p>
 <p class="FM__Body"> &#160;&lt;a href=&quot;http://www.hdfgroup.org/doc_resource/SZIP/&quot; target=&quot;Ext1&quot;&gt;further </p>
 <p class="FM__Body"> &#160;information&lt;/a&gt; regarding the Szip filter.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;&amp;nbsp;&lt;/p&gt;</p>
 <p class="FM__Body">&lt;p&gt;&amp;nbsp;&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- HEADER RIGHT &quot; &quot; --&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;/body&gt;</p>
 <p class="FM__Body">&lt;/html&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
</div>
				
			</div>
			<div class="content_top_link">
				<span class="desktop"><a>&#160;</a> </span>
			</div>
		</div>
	</div>
</div>
<div class="buttonbar">
	<div class="buttonbarholder topic_page_holder">
		<div class="bar_toc topic_page" id="xmlEditorButtonBarTOC" title="Table of Contents">
			<a href="../../table_of_contents.htm">&#160;</a> 
		</div>
		<div class="bar_index topic_page" id="xmlEditorButtonBarIDX" title="Index">
			<a href="../../index1.htm">&#160;</a> 
		</div>
		<div class="bar_glossary topic_page" id="xmlEditorButtonBarGLO" 
			 title="Glossary">
			<a href="../../glossary.htm">&#160;</a> 
		</div>
		<div class="bar_search topic_page" title="Search">
			<a href="../../searchresults.htm">&#160;</a> 
		</div>
	</div>
</div>
<div id="localisation">
	<p id="localisation_toc"><span>Table of Contents</span></p>
	<p id="localisation_idx"><span>Index</span></p>
	<p id="localisation_glo"><span>Glossary</span></p>
	<p id="localisation_fts"><span>-Search-</span></p>
	<p id="localisation_back"><span>Back</span></p>
</div>
<script type="text/javascript" src="../../template/Theme1_Standard/jquery.js"></script>
<script type="text/javascript" src="../../template/Theme1_Standard/jqueryui-custom.js"></script>
<script type="text/javascript" src="../../template/Theme1_Standard/overthrow.min.js"></script>
<script type="text/javascript" src="../../template/Theme1_Standard/overthrow.sidescroller.min.js"></script>
<script type="text/javascript" src="../../template/Theme1_Standard/layout.js"></script>
<script type="text/javascript">//<![CDATA[
$(function(){
	addRhLoadCompleteEvent(setTopic);
});
//]]></script>
</body>
</html>
