
<!DOCTYPE HTML>
<html>
<head>
 <meta http-equiv="X-UA-Compatible" content="IE=edge" />
 <meta name="OriginalFile" content="C:\1 MEE\Working\hdf5_trunk\html\UG\17_Additional.html_150210.fm" />
 <meta name="Originator" content="ImportMif" />
 <meta content="How to fly your personal spaceship" name="search-keywords" />
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="viewport" content="width=100%, initial-scale=1" />
<meta name="generator" content="Adobe FrameMaker 12" />
<title>HDF5 User's Guide - Additional Resources</title>
<link href="../../template/Theme1_Standard/main.css" type="text/css" rel="stylesheet" />
<link href="../../template/Theme1_Standard/jqueryui-custom.css" type="text/css" rel="stylesheet" />
 <link rel="stylesheet" href="17_Additional.html_150210.css" type="text/css" /><script type="text/javascript" language="JavaScript">//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]></script><style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadcsh.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/showhidecontrols.js"></script>
<script type="text/javascript" src="../../template/scripts/pageloader.js"></script>
<script type="text/javascript" src="../../template/scripts/toctree.js"></script>
<script type="text/javascript" src="../../template/scripts/toctreeloader.js"></script>
<script type="text/javascript" src="../../template/scripts/indextree.js"></script>
<script type="text/javascript" src="../../template/scripts/indextreeloader.js"></script>
<script type="text/javascript" src="../../template/scripts/glossarylist.js"></script>
<script type="text/javascript" src="../../template/scripts/glossarylistloader.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
<script type="text/javascript" src="../../template/scripts/searchfield.js"></script>
<script type="text/javascript" src="../../template/scripts/tabpanels.js"></script>
<script type="text/javascript" >
gTocPageHtml = "{%ICON%}<span  class=\"wTOCTreePageText\">{%LINK_NAME%}</span>";
gTocBookClosedHtml = "{%ICON%}<span  class=\"wTOCTreeCloseBookText\">{%LINK_NAME%}</span>";
gTocBookOpenHtml = "{%ICON%}<span  class=\"wTOCTreeCloseBookText\">{%LINK_NAME%}</span>";
gTocUrlHtml = "{%ICON%}<span  class=\"wTOCTreeLinkText\">{%LINK_NAME%}</span>";
gTocPageIconSrc = "../../template/Theme1_Standard/TOCTreePage.png";
gTocPageIconHoverSrc = "../../template/Theme1_Standard/TOCTreePageHover.png";
gTocPageIconSelSrc = "../../template/Theme1_Standard/TOCTreePageSelected.png";
gTocPageIconClass = "wTOCTreePageIcon";
gTocPageIconStyle = "";
gTocBookClosedIconSrc = "../../template/Theme1_Standard/TOCTreeCloseBook.png";
gTocBookClosedIconHoverSrc = "../../template/Theme1_Standard/TOCTreeCloseBookHover.png";
gTocBookClosedIconSelSrc = "../../template/Theme1_Standard/TOCTreeCloseBookSelected.png";
gTocBookClosedIconClass = "wTOCTreeCloseBookIcon";
gTocBookClosedIconStyle = "";
gTocBookOpenIconSrc = "../../template/Theme1_Standard/TOCTreeOpenBook.png";
gTocBookOpenIconHoverSrc = "../../template/Theme1_Standard/TOCTreeOpenBookHover.png";
gTocBookOpenIconSelSrc = "../../template/Theme1_Standard/TOCTreeOpenBookSelected.png";
gTocBookOpenIconClass = "wTOCTreeOpenBookIcon";
gTocBookOpenIconStyle = "";
gTocUrlIconSrc = "../../template/Theme1_Standard/TOCTreeLink.png";
gTocUrlIconHoverSrc = "../../template/Theme1_Standard/TOCTreeLinkHover.png";
gTocUrlIconSelSrc = "../../template/Theme1_Standard/TOCTreeLinkSelected.png";
gTocUrlIconClass = "wTOCTreeLinkIcon";
gTocUrlIconStyle = "";
</script>
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
</script>
<script type="text/javascript" >
gIdxKWHtml = "<span  class=\"wIdxKeywordText\">{%LINK_NAME%}</span>";
	gIdxLinkHtml = "<span  class=\"wIdxLinkText\">{%LINK_NAME%}</span>";
	gIdxCategoryHtml = "<span  class=\"wIdxAlphabetText\">{%LINK_NAME%}</span>";
</script>
<script type="text/javascript" >
gTopicId = "1_8";
</script>
<script type="text/javascript" >
gGloTermHtml = "<span  class=\"wGloTermText\">{%LINK_NAME%}</span>";
	gGloDefHtml = "<span  class=\"wGloDefinitionText\">{%LINK_NAME%}</span>";
	gGloCategoryHtml = "<span  class=\"wGloAlphabetText\">{%LINK_NAME%}</span>";
</script>
 <link rel="SHORTCUT ICON" href="../../Responsive HTML5_favicon.ico" />
</head>

<body>
<script type="text/javascript" src="../../ehlpdhtm.js"></script>



<div class="floatholder">
	<div class="phone_scrollarea overthrow">
		<div class="header">
			<table class="headertable">
				<tr>
					<td class="logo"><a href="../HDF5_UG_TitleWithoutSamples/HDF5_UG_TitleWithoutSamples.htm" class="homelink"><img src="../../template/Theme1_Standard/logo.png" alt="Logo" id="wLogoImage" style=" border:none; width:100%; max-width:53px;" border="0" /></a> </td>
					<td class="title"><div>
						<a href="../HDF5_UG_TitleWithoutSamples/HDF5_UG_TitleWithoutSamples.htm" class="homelink"><span>HDF5 User's Guide</span></a> 
						 
					</div></td>
					<td class="brsBack"><a id="browseSeqBack" class="wBSBackButton" href="../14_PropertyLists.html_150210/Properties_and_Property_Lists_in_HDF5.htm"><img alt="" src="../../template/Theme1_Standard/topic_left.png" class="wBSBackButton" border="0" style="width:100%; max-width:19px" /></a> </td>
					<td class="brsNext"> </td>
				</tr>
			</table>
		</div>
		<div class="sidebar">
			<div data-showin="Always" class="wTabbedPanel" id="tabbedpanel">
				<ul class="wTabGroup" id="tab" data-tabid="tocTabButton" style="margin: 0px;">
					<li class="wTab" id="tocTabButton" data-contentid="tocTabPane" onmouseout="onTabHoverOut(this, 'tab')" data-class="wTab" ontouchend="onTabHoverOut(this, 'tab')" onclick="selectTab(this, 'tab')" ontouchstart="onTabHover(this, 'tab')" data-classhover="wTabHover" style="display: inline;" ontouchmove="onTabHoverOut(this, 'tab')" data-classsel="wTabSelected" onmouseover="onTabHover(this, 'tab')"><img src="../../template/Theme1_Standard/toc.png" class="normal" alt="Table of Contents" title="Table of Contents" id="xmlEditorTOCSidebarButton" style=" border:none; width:100%; max-width:30px;" border="0" /><img src="../../template/Theme1_Standard/toc_hover.png" class="hover" alt="Table of Contents" title="Table of Contents" id="xmlEditorTOCSidebarButtonHover" style=" border:none; width:100%; max-width:30px;" border="0" /></li>
					<li class="wTab" id="idxTabButton" data-contentid="idxTabPane" onmouseout="onTabHoverOut(this, 'tab')" data-class="wTab" ontouchend="onTabHoverOut(this, 'tab')" onclick="selectTab(this, 'tab')" ontouchstart="onTabHover(this, 'tab')" data-classhover="wTabHover" style="display: inline;" ontouchmove="onTabHoverOut(this, 'tab')" data-classsel="wTabSelected" onmouseover="onTabHover(this, 'tab')"><img src="../../template/Theme1_Standard/index.png" class="normal" alt="Index" title="Index" id="xmlEditorIDXSidebarButton" style=" border:none; width:100%; max-width:30px;" border="0" /><img src="../../template/Theme1_Standard/index_hover.png" class="hover" alt="Index" title="Index" id="xmlEditorIDXSidebarButtonHover" style=" border:none; width:100%; max-width:30px;" border="0" /></li>
					<li class="wTab" id="gloTabButton" data-contentid="gloTabPane" onmouseout="onTabHoverOut(this, 'tab')" data-class="wTab" ontouchend="onTabHoverOut(this, 'tab')" onclick="selectTab(this, 'tab')" ontouchstart="onTabHover(this, 'tab')" data-classhover="wTabHover" style="display: inline;" ontouchmove="onTabHoverOut(this, 'tab')" data-classsel="wTabSelected" onmouseover="onTabHover(this, 'tab')"><img src="../../template/Theme1_Standard/glo.png" class="normal" alt="Glossary" title="Glossary" id="xmlEditorGLOSidebarButton" style=" border:none; width:100%; max-width:34px;" border="0" /><img src="../../template/Theme1_Standard/glo_hover.png" class="hover" alt="Glossary" title="Glossary" id="xmlEditorGLOSidebarButtonHover" style=" border:none; width:100%; max-width:34px;" border="0" /></li>
				</ul>
				<div class="wTabContentGroup">
					<div id="tocTabPane" class="wTabContent">
						<div id="toc" class="wTOCTree" tabindex="560">
							
							
							
							
						</div>
					</div>
					<div id="idxTabPane" class="wTabContent">
						<div id="idx" class="wIndex">
							<input class="wIdxFilter" id="idxFilterBox" type="text" data-placeholder="Filter Keyword" onkeyup="filterIdx()"></input>
							
							
							
						</div>
					</div>
					<div id="gloTabPane" class="wTabContent">
						<div id="glo" class="wGlossary">
							<input class="wGloFilter" id="gloFilterBox" type="text" data-placeholder="Filter Term" onkeyup="filterGlo()"></input>
							
							
							
						</div>
					</div>
				</div>
			</div>
			<div class="closebutton buttonOpened">
				&#160; 
			</div>
		</div>
		<div class="content">
			<div class="desktop_functionholder">
				<div class="searchholder">
					<div class="wSearchField">
						<input id="searchBox" class="wSearchField" type="search" data-placeholder="-Search-" onkeydown="searchHelp(event, 'searchBox')" data-search="true" /><a class="wSearchLink" onclick="searchHelp(null, 'searchBox')" href="#"><img src="../../template/Theme1_Standard/Search.png" alt="" id="xmlEditwSearchLink" class="wSearchLink" border="0" style="width:100%; max-width:24px" /></a> 
						 
					</div>
				</div>
				<div class="home">
					<a href="../HDF5_UG_TitleWithoutSamples/HDF5_UG_TitleWithoutSamples.htm"><img src="../../template/Theme1_Standard/home.png" alt="" class="homebutton normal" id="xmlEditorHomeButton" border="0" style="width:100%; max-width:27px" /><img src="../../template/Theme1_Standard/home_hover.png" alt="" class="homebutton hover" id="xmlEditorHomeButtonHover" border="0" style="width:100%; max-width:27px" /></a> 
				</div>
				<div class="print">
					<a href="javascript:window.print()" class="wPrintButton"><img src="../../template/Theme1_Standard/Print.png" alt="" class="wPrintButton normal" id="xmlEditorPrintButton" border="0" style="width:100%; max-width:30px" /><img src="../../template/Theme1_Standard/Print_hover.png" alt="" class="wPrintButton hover" id="xmlEditorPrintButtonHover" border="0" style="width:100%; max-width:30px" /></a> 
				</div>
				<div class="brsBack">
					<a id="browseSeqBack0" class="wBSBackButton" href="../14_PropertyLists.html_150210/Properties_and_Property_Lists_in_HDF5.htm"><img alt="" src="../../template/Theme1_Standard/BSBack.png" class="wBSBackButton normal" id="xmlEditorBSBackButton" border="0" style="width:100%; max-width:19px" /><img alt="" src="../../template/Theme1_Standard/BSBack_hover.png" class="wBSBackButton hover" id="xmlEditorBSBackButtonHover" border="0" style="width:100%; max-width:19px" /></a> 
					 
				</div>
				<div class="brsNext">
					 
					 
				</div>
			</div>
			<div class="contentholder">
				<a name="content_top_placeholder"></a> 
				<div class="wTopic" id="rh_default_topic_placeholder_id">


 <p class="FM__Heading_Level1">11. <a name="XREF_AdditionalChapter"></a>Additional Resources</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;/div&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- FOR USE WITH ELECTRONIC VERSION ---------------------------------&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;center&gt;</p>
 <p class="FM__Body">&lt;table border=&quot;0&quot; width=&quot;80%&quot;&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot; colspan=&quot;3&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;p&gt;These documents supplement the &lt;cite&gt;HDF5 User&amp;rsquo;s Guide&lt;/cite&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;and provide additional detailed information for the use and tuning </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;of specific HDF5 features.&lt;/p&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;a href=&quot;http://www.hdfgroup.org/HDF5/examples/&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;HDF5 Examples&lt;/a&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;Code examples by API. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;!-- 11.2.10, keep code examples at the top of the list of links --&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;a href=&quot;../Advanced/Chunking/index.html&quot;&gt;Chunking in HDF5&lt;/a&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;Structuring the use of chunking and tuning it for </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;performance.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;a href=&quot;../Advanced/DirectChunkWrite/UsingDirectChunkWrite.pdf&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;Using the Direct Chunk Write Function&lt;/a&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;Describes another way that chunks can be written </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;to datasets.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;a href=&quot;../Advanced/CommittedDatatypeCopying/CopyingCommittedDatatypesWithH5Ocopy.pdf&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;Copying Committed Datatypes with H5Ocopy&lt;/a&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;Describes how to copy to another file a dataset that uses a committed </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;datatype or an object with an attribute that uses a committed datatype </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;so that the committed datatype in the destination file can be used by </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;multiple objects.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;../Advanced/MetadataCache/index.html&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;Metadata Caching in HDF5&lt;/a&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;Managing the HDF5 metadata cache and tuning it for </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;performance.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;a href=&quot;../Advanced/DynamicallyLoadedFilters/HDF5DynamicallyLoadedFilters.pdf&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;HDF5 Dynamically Loaded Filters&lt;/a&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;Describes how an HDF5 application can apply a filter that is not </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;registered with the HDF5 Library.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;a href=&quot;../Advanced/FileImageOperations/HDF5FileImageOperations.pdf&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;HDF5 File Image Operations&lt;/a&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;Describes how to work with HDF5 files in memory. Disk I/O is not </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;required when file images are opened, created, read from, or </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;written to.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;a href=&quot;../Advanced/ModifiedRegionWrites/ModifiedRegionWrites.pdf&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;Modified Region Writes&lt;/a&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;Describes how to set write operations for in-memory files so that </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;only modified regions are written to storage. Available when </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;the Core (Memory) VFD is used. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;../Advanced/UsingIdentifiers/index.html&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;Using Identifiers&lt;/a&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;Describes how identifiers behave and how they should be treated.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;../Advanced/UsingUnicode/index.html&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;Using UTF-8 Encoding in &lt;/a&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;a href=&quot;../Advanced/UsingUnicode/index.html&quot;&gt;HDF5 Applications&lt;/a&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;Describes the use of UTF-8 Unicode character encodings in HDF5 </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;applications.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;../Advanced/FreeingMemory/FreeingMemoryAllocatedByTheHdf5Li&#173;brary.pdf&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;Freeing Memory Allocated&lt;/a&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;a href=&quot;../Advanced/FreeingMemory/FreeingMemoryAllocatedByTheHdf5Library.pdf&quot;&gt;by the HDF5 Library&lt;/a&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;Describes how inconsistent memory management can cause heap </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;corruption or resource leaks and possible solutions.&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;../Glossary.html&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;HDF5 Glossary&lt;/a&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;td valign=&quot;top&quot;&gt;A glossary of terms.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;!-- 11.2.10, keep Glossary at the bottom of the list of links --&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;/center&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- FOR USE WITH ELECTRONIC VERSION ---------------------------------&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION INCLUDES THE TEXT TO THE END OF THE FILE --&gt;</p>
 <p class="FM__Body">&lt;!-- FOR USE WITH PRINT VERSION --------------------------------------</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; This chapter provides supplemental material for the </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;cite&gt;HDF5 User&amp;rsquo;s Guide&lt;/cite&gt;. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; To see code examples by API, go to the &lt;cite&gt;HDF5 Examples&lt;/cite&gt; </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;page at this address: </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;pre&gt;    http://www.hdfgroup.org/HDF5/examples/</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/pre&gt;&lt;/p&gt;</p>
 <p class="FM__Body">&lt;p&gt; For more information on how to manage the metadata cache and how </p>
 <p class="FM__Body"> &#160;&#160;&#160;to configure it for better performance, go to the &lt;cite&gt;Metadata</p>
 <p class="FM__Body"> &#160;&#160;&#160;Caching in HDF5&lt;/cite&gt; page at this address:</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;pre&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;http://www.hdfgroup.org/hdf5/doc/Advanced/MetadataCache/index.html</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/pre&gt;&lt;/p&gt;</p>
 <p class="FM__Body">&lt;p&gt; A number of functions are macros. For more information on how</p>
 <p class="FM__Body"> &#160;&#160;&#160;to use the macros, see the &lt;cite&gt;API Compatibility Macros in HDF5&lt;/cite&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;page at this address:</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;pre&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;http://www.hdfgroup.org/HDF5/doc/RM/APICompatMacros.html</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/pre&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt;The following sections are included in this chapter:&lt;/p&gt;</p>
 <p class="FM__Body">&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;&lt;i&gt;Using Identifiers&lt;/i&gt; - describes how identifiers behave</p>
 <p class="FM__Body"> &#160;&#160;&#160;and how they should be treated</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;&lt;i&gt;Chunking in HDF5&lt;/i&gt; - describes chunking storage and </p>
 <p class="FM__Body"> &#160;&#160;&#160;how it can be used to improve performance</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;&lt;i&gt;HDF5 Glossary and Terms&lt;/i&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;/ul&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;h2&gt;11.1. Using Identifiers&lt;/h2&gt;</p>
 <p class="FM__Body">&lt;p&gt; The purpose of this section is to describe how identifiers behave </p>
 <p class="FM__Body"> &#160;&#160;&#160;and how they should be treated by application programs.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; When an application program uses the HDF5 library to create or </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;open an item, a unique identifier is returned. The items that return </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;a unique identifier when they are created or opened include the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;following: dataset, group, datatype, dataspace, file, attribute, </p>
 <p class="FM__Body"> &#160;&#160;&#160;property list, referenced object, error stack, and error message.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; An application may open one of the items listed above more than </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;once at the same time. For example, an application might open a group </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;twice, receiving two identifiers. Information from one dataset in the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;group could be handled through one identifier, and the information </p>
 <p class="FM__Body"> &#160;&#160;&#160;from another dataset in the group is handled by a different identifier.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; An application program should track every identifier it receives </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;as a result of creating or opening one of the items listed above. In </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;order for an application to close properly, it must release every </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;identifier it has opened. If an application opened a group twice for </p>
 <p class="FM__Body"> &#160;&#160;&#160;example, it would need to issue two &lt;code&gt;H5Gclose&lt;/code&gt; commands, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;one for each identifier. Not releasing identifiers causes resource </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;leaks. Until an identifier is released, the item associated with </p>
 <p class="FM__Body"> &#160;&#160;&#160;the identifier is still open.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; The library considers a file open until all of the identifiers </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;associated with the file and with the file’s various items have been </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;released. The identifiers associated with these open items must be </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;released separately. This means that an application can close a file </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;and still work with one or more portions of the file. Suppose an </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;application opened a file, a group within the file, and two datasets </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;within the group. If the application closed the file with </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;code&gt;H5Fclose&lt;/code&gt;, then the file would be considered closed </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;to the application, but the group and two datasets would still </p>
 <p class="FM__Body"> &#160;&#160;&#160;be open.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; There are several exceptions to the above file closing rule. One </p>
 <p class="FM__Body"> &#160;&#160;&#160;is when the &lt;code&gt;H5close&lt;/code&gt; function is used instead of </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;code&gt;H5Fclose&lt;/code&gt;. &lt;code&gt;H5close&lt;/code&gt; causes a general </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;shutdown of the library: all data is written to disk, all </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;identifiers are closed, and all memory used by the library is </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;cleaned up. Another exception occurs on parallel processing systems. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;Suppose on a parallel system an application has opened a file, a </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;group in the file, and two datasets in the group. If the application </p>
 <p class="FM__Body"> &#160;&#160;&#160;uses the &lt;code&gt;H5Fclose&lt;/code&gt; function to close the file, the call </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;will fail with an error. The open group and datasets must be closed </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;before the file can be closed. A third exception is when the file </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;access property list includes the property </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;code&gt;H5F_CLOSE_STRONG&lt;/code&gt;. This property causes the closing </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;of all of the file’s open items when the file is closed with </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;code&gt;H5Fclose&lt;/code&gt;.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; For more information about &lt;code&gt;H5close&lt;/code&gt;, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;code&gt;H5Fclose&lt;/code&gt;, and &lt;code&gt;H5Pset_fclose_degree&lt;/code&gt;, </p>
 <p class="FM__Body"> &#160;&#160;&#160;see the &lt;a href=&quot;../RM/RM_H5Front.html&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;cite&gt;HDF5 Reference Manual&lt;/cite&gt;&lt;/a&gt;&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">---------1---------2---------3---------4---------5---------6---------7---------8</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;h3&gt;Functions that Return Identifiers&lt;/h3&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt;Some of the functions that return identifiers are listed below.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;ul&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Acreate&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Acreate_by_name&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Aget_type&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Aopen&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Aopen_by_idx&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Aopen_by_name&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Dcreate&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Dcreate_anon&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Dget_access_plist&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Dget_create_plist&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Dget_space&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Dget_type&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Dopen&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Ecreate_msg&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Ecreate_stack&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Fcreate&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Fopen&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Freopen&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Gcreate&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Gcreate_anon&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Gopen&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Oopen&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Oopen_by_addr&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Oopen_by_idx&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Pcreate&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Rdereference&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Rget_region&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Screate&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Screate_simple&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Tcopy&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Tcreate&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Tdecode&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Tget_member_type&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Tget_super&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;li&gt;&lt;code&gt;H5Topen&lt;/code&gt;&lt;/li&gt;</p>
 <p class="FM__Body">&lt;/ul&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;h2&gt;11.2. Chunking in HDF5&lt;/h2&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; Datasets in HDF5 not only provide a convenient, structured, and </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;self-describing way to store data, but are also designed to do so with </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;good performance. In order to maximize performance, the HDF5 library </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;provides ways to specify how the data is stored on disk, </p>
 <p class="FM__Body"> &#160;&#160;&#160;how it is accessed, and how it should be held in memory.&lt;/p&gt;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">---------1---------2---------3---------4---------5---------6---------7---------8</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;h3&gt;11.2.1. What are Chunks?&lt;/h3&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; Datasets in HDF5 can represent arrays with any number of dimensions </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;(up to 32). However, in the file this dataset must be stored as part </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;of the 1-dimensional stream of data that is the low-level file. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;The way in which the multidimensional dataset is mapped to the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;serial file is called the layout. The most obvious way to accomplish </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;this is to simply flatten the dataset in a way similar to how arrays </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;are stored in memory, serializing the entire dataset into a </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;monolithic block on disk, which maps directly to a memory buffer </p>
 <p class="FM__Body"> &#160;&#160;&#160;the size of the dataset. This is called a contiguous layout.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt; An alternative to the contiguous layout is the chunked layout. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;Whereas contiguous datasets are stored in a single block in the file, </p>
 <p class="FM__Body"> &#160;&#160;&#160;chunked datasets are split into multiple chunks&lt;/em&gt; which are </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;all stored separately in the file. The chunks can be stored in any </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;order and any position within the HDF5 file. Chunks can then be read </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;and written individually, improving performance when operating on </p>
 <p class="FM__Body"> &#160;&#160;&#160;a subset of the dataset. &lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt; The API functions used to read and write chunked datasets are </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;exactly the same functions used to read and write contiguous </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;datasets. The only difference is a single call to set up the layout </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;on a property list before the dataset is created. In this way, a </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;program can switch between using chunked and contiguous datasets </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;by simply altering that call. Example 1, below, creates a dataset </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;with a size of 12x12 and a chunk size of 4x4. The example could be </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;change to create a contiguous dataset instead by simply commenting </p>
 <p class="FM__Body"> &#160;&#160;&#160;out the call to &lt;code&gt;H5Pset_chunk&lt;/code&gt;.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;pre&gt;</p>
 <p class="FM__Body">#include &lt;hdf5.h&gt;</p>
 <p class="FM__Body">int main(void) {</p>
 <p class="FM__Body"> &#160;&#160;&#160;hid_t &#160;&#160;file_id, dset_id, space_id, dcpl_id;</p>
 <p class="FM__Body"> &#160;&#160;&#160;hsize_t chunk_dims[2] = {4, 4};</p>
 <p class="FM__Body"> &#160;&#160;&#160;hsize_t dset_dims[2] = {12, 12};</p>
 <p class="FM__Body"> &#160;&#160;&#160;int &#160;&#160;&#160;&#160;buffer[12][12];</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;/* Create the file */</p>
 <p class="FM__Body"> &#160;&#160;&#160;file_id = H5Fcreate(file.h5, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;/* Create a dataset creation property list and set it to use chunking</p>
 <p class="FM__Body"> &#160;&#160;&#160;*/</p>
 <p class="FM__Body"> &#160;&#160;&#160;dcpl_id = H5Pcreate(H5P_DATASET_CREATE);</p>
 <p class="FM__Body"> &#160;&#160;&#160;H5Pset_chunk(dcpl_id, 2, chunk_dims);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;/* Create the dataspace and the chunked dataset */</p>
 <p class="FM__Body"> &#160;&#160;&#160;space_id = H5Screate_simple(2, dset_dims, NULL);</p>
 <p class="FM__Body"> &#160;&#160;&#160;dset_id = H5Dcreate(file, dataset, H5T_NATIVE_INT, space_id, dcpl_id, H5P_DEFAULT);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;/* Write to the dataset */</p>
 <p class="FM__Body"> &#160;&#160;&#160;buffer = &lt;initialize buffer&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;H5Dwrite(dset_id, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT, buffer);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;/* Close */</p>
 <p class="FM__Body"> &#160;&#160;&#160;H5Dclose(dset_id);</p>
 <p class="FM__Body"> &#160;&#160;&#160;H5Sclose(space_id);</p>
 <p class="FM__Body"> &#160;&#160;&#160;H5Pclose(dcpl_id);</p>
 <p class="FM__Body"> &#160;&#160;&#160;H5Fclose(file_id);</p>
 <p class="FM__Body"> &#160;&#160;&#160;return 0;</p>
 <p class="FM__Body">}</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/pre&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Example 1. Creating a chunked dataset&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; The chunks of a chunked dataset are split along logical boundaries </p>
 <p class="FM__Body"> &#160;&#160;&#160;in the dataset's representation as an array, not along boundaries </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;in the serialized form. Suppose a dataset has a chunk size of 2x2. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;In this case, the first chunk would go from (0,0) to (2,2), the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;second from (0,2) to (2,4), and so on. By selecting the chunk size </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;carefully, it is possible to fine tune I/O to maximize performance </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;for any access pattern. Chunking is also required to use advanced </p>
 <p class="FM__Body"> &#160;&#160;&#160;features such as compression and dataset resizing.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW Page --&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/ChunkingFig001.png&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br /&gt;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 1. Contiguous dataset&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW Page --&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/ChunkingFig002.png&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br /&gt;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 2. Chunked dataset&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;h3&gt;11.2.2. Data Storage Order&lt;/h3&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; To understand the effects of chunking on I/O performance it is </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;necessary to understand the order in which data is actually stored </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;on disk. &#160;When using the C interface, data elements are stored in </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&quot;row-major&quot; order, meaning that, for a 2-dimensional dataset, rows </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;of data are stored in-order on the disk. This is equivalent to the </p>
 <p class="FM__Body"> &#160;&#160;&#160;storage order of C arrays in memory.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt; Suppose we have a 10x10 contiguous dataset B. The first element </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;stored on disk is B[0][0], the second B[0][1], the eleventh B[1][0], </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;and so on. If we want to read the elements from B[2][3] to B[2][7], </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;we have to read the elements in the 24th, 25th, 26th, 27th, and 28th </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;positions. Since all of these positions are contiguous, or next to </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;each other, this can be done in a single read operation: read 5 </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;elements starting at the 24th position. This operation is illustrated </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;in figure 3: the pink cells represent elements to be read and the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;solid line represents a read operation. Now suppose we want to </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;read the elements in the column from B[3][2] to B[7][2]. In this case </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;we must read the elements in the 33rd, 43rd, 53rd, 63rd, and 73rd </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;positions. Since these positions are not contiguous, this must be </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;done in 5 separate read operations. This operation is illustrated </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;in figure 4: the solid lines again represent read operations, and </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;the dotted lines represent seek operations. An alternative would </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;be to perform a single large read operation , in this case 41 </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;elements starting at the 33rd position. This is called a </p>
 <p class="FM__Body"> &#160;&#160;&#160;sieve buffer&lt;/em&gt; and is supported by HDF5 for contiguous </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;datasets, but not for chunked datasets. By setting the chunk sizes </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;correctly, it is possible to greatly exceed the performance of the </p>
 <p class="FM__Body"> &#160;&#160;&#160;sieve buffer scheme.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/ChunkingFig003.png&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br /&gt;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 3. Reading part of a row from a contiguous dataset&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br /&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/ChunkingFig004.png&quot; alt=&quot;Illustration of a </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;partial column of a contiguous dataset&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br /&gt;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 4. Reading part of a column from a contiguous dataset&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; Likewise, in higher dimensions, the last dimension specified is the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;fastest changing on disk. So if we have a four dimensional dataset A, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;then the first element on disk would be A[0][0][0][0], the </p>
 <p class="FM__Body"> &#160;&#160;&#160;second A[0][0][0][1], the third A[0][0][0][2], and so on.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h3&gt;11.2.3. Chunking and Partial I/O&lt;/h3&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; The issues outlined above regarding data storage order help to </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;illustrate one of the major benefits of dataset chunking, its </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;ability to improve the performance of partial I/O. Partial I/O </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;is an I/O operation (read or write) which operates on only one </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;part of the dataset. To maximize the performance of partial I/O, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;the data elements selected for I/O must be contiguous on disk. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;As we saw above, with a contiguous dataset, this means that the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;selection must always equal the extent in all but the slowest </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;changing dimension, unless the selection in the slowest changing </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;dimension is a single element. With a 2-d dataset in C, this </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;means that the selection must be as wide as the entire dataset </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;unless only a single row is selected. With a 3-d dataset, this </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;means that the selection must be as wide and as deep as the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;entire dataset, unless only a single row is selected, in which </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;case it must still be as deep as the entire dataset, unless </p>
 <p class="FM__Body"> &#160;&#160;&#160;only a single column is also selected.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt; Chunking allows the user to modify the conditions for maximum </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;performance by changing the regions in the dataset which are </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;contiguous. For example, reading a 20x20 selection in a contiguous </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;dataset with a width greater than 20 would require 20 separate </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;and non-contiguous read operations. If the same operation were </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;performed on a dataset that was created with a chunk size of </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;20x20, the operation would require only a single read operation. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;In general, if your selections are always the same size (or </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;multiples of the same size), and start at multiples of that </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;size, then the chunk size should be set to the selection size, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;or an integer divisor of it. This recommendation is subject to </p>
 <p class="FM__Body"> &#160;&#160;&#160;the guidelines in the pitfalls&lt;/em&gt; section; specifically, </p>
 <p class="FM__Body"> &#160;&#160;&#160;it should not be too small or too large.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt; Using this strategy, we can greatly improve the performance of the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;operation shown in figure 4. If we create the dataset with a chunk </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;size of 10x1, each column of the dataset will be stored separately </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;and contiguously. The read of a partial column can then be done is </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;a single operation. This is illustrated in figure 5, and the code </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;to implement a similar operation is shown in example 2. For </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;simplicity, example 2 implements writing to this dataset instead </p>
 <p class="FM__Body"> &#160;&#160;&#160;of reading from it.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/ChunkingFig005.png&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br /&gt;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 5. Reading part of a column from a chunked dataset&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;pre&gt;</p>
 <p class="FM__Body">#include &lt;hdf5.h&gt;</p>
 <p class="FM__Body">int main(void) {</p>
 <p class="FM__Body"> &#160;&#160;&#160;hid_t &#160;&#160;file_id, dset_id, fspace_id, mspace_id, dcpl_id;</p>
 <p class="FM__Body"> &#160;&#160;&#160;hsize_t chunk_dims[2] = {10, 1};</p>
 <p class="FM__Body"> &#160;&#160;&#160;hsize_t dset_dims[2] = {10, 10};</p>
 <p class="FM__Body"> &#160;&#160;&#160;hsize_t mem_dims[1] = {5};</p>
 <p class="FM__Body"> &#160;&#160;&#160;hsize_t start[2] = {3, 2};</p>
 <p class="FM__Body"> &#160;&#160;&#160;hsize_t count[2] = {5, 1};</p>
 <p class="FM__Body"> &#160;&#160;&#160;int &#160;&#160;&#160;&#160;buffer[5];</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;/* Create the file */</p>
 <p class="FM__Body"> &#160;&#160;&#160;file_id = H5Fcreate(file.h5&lt;/em&gt;, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;/* Create a dataset creation property list and set it to use chunking</p>
 <p class="FM__Body"> &#160;&#160;&#160;* with a chunk size of 10x1 */</p>
 <p class="FM__Body"> &#160;&#160;&#160;dcpl_id = H5Pcreate(H5P_DATASET_CREATE);</p>
 <p class="FM__Body"> &#160;&#160;&#160;H5Pset_chunk(dcpl_id, 2, chunk_dims);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;/* Create the dataspace and the chunked dataset */</p>
 <p class="FM__Body"> &#160;&#160;&#160;space_id = H5Screate_simple(2, dset_dims, NULL);</p>
 <p class="FM__Body"> &#160;&#160;&#160;dset_id = H5Dcreate(file, dataset&lt;/em&gt;, H5T_NATIVE_INT, space_id, dcpl_id, </p>
 <p class="FM__Body">H5P_DEFAULT);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;/* Select the elements from 3, 2 to 7, 2 */</p>
 <p class="FM__Body"> &#160;&#160;&#160;H5Sselect_hyperslab(fspace_id, H5S_SELECT_SET, start, NULL, count, NULL);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;/* Create the memory dataspace */</p>
 <p class="FM__Body"> &#160;&#160;&#160;mspace_id = H5Screate_simple(1, mem_dims, NULL);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;/* Write to the dataset */</p>
 <p class="FM__Body"> &#160;&#160;&#160;buffer = &lt;initialize buffer&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;H5Dwrite(dset_id, H5T_NATIVE_INT, mspace_id, fpsace_id, H5P_DEFAULT, buffer);</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body"> &#160;&#160;&#160;/* Close */</p>
 <p class="FM__Body"> &#160;&#160;&#160;H5Dclose(dset_id);</p>
 <p class="FM__Body"> &#160;&#160;&#160;H5Sclose(fspace_id);</p>
 <p class="FM__Body"> &#160;&#160;&#160;H5Sclose(mspace_id);</p>
 <p class="FM__Body"> &#160;&#160;&#160;H5Pclose(dcpl_id);</p>
 <p class="FM__Body"> &#160;&#160;&#160;H5Fclose(file_id);</p>
 <p class="FM__Body"> &#160;&#160;&#160;return 0;</p>
 <p class="FM__Body">}&lt;/pre&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Example 2. Writing part of a column to a chunked dataset&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h3&gt;11.2.4. Chunk Caching&lt;/h3&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; Another major feature of the dataset chunking scheme is the chunk </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;cache. &#160;As it sounds, this is a cache of the chunks in the dataset. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;This cache can greatly improve performance whenever the same chunks </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;are read from or written to multiple times, by preventing the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;library from having to read from and write to disk multiple times. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;However, the current implementation of the chunk cache does not adjust </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;its parameters automatically, and therefore the parameters must be </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;adjusted manually to achieve optimal performance. In some rare </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;cases it may be best to completely disable the chunk caching scheme. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;Each open dataset has its own chunk cache, which is separate from </p>
 <p class="FM__Body"> &#160;&#160;&#160;the caches for all other open datasets.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt; When a selection is read from a chunked dataset, the chunks containing </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;the selection are first read into the cache, and then the selected </p>
 <p class="FM__Body"> &#160;&#160;&#160;parts of those chunks are copied into the user's buffer. The cached </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;chunks stay in the cache until they are evicted, which typically </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;occurs because more space is needed in the cache for new chunks, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;but they can also be evicted if hash values collide (more on this </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;later). Once the chunk is evicted it is written to disk if necessary </p>
 <p class="FM__Body"> &#160;&#160;&#160;and freed from memory.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt; This process is illustrated in figures 6 and 7. In figure 6, the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;application requests a row of values, and the library responds by </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;bringing the chunks containing that row into cache, and retrieving </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;the values from cache. In figure 7, the application requests a </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;different row that is covered by the same chunks, and the library </p>
 <p class="FM__Body"> &#160;&#160;&#160;retrieves the values directly from cache without touching the disk.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/ChunkingFig006.png&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br /&gt;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 6. Reading a row from a chunked dataset with the </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;chunk cache enabled&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;center&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br /&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;img src=&quot;Images/ChunkingFig007.png&quot; alt=&quot;Illustration of chunk </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;caching and a row of a chunked dataset with the chunks already </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;in the cache&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;br /&gt;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td&gt;&lt;hr color=&quot;green&quot; size=&quot;1&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr valign=&quot;top&quot;&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;td align=&quot;left&quot; &gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;b&gt;Figure 7. Reading a row from a chunked dataset with the </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;chunks already cached&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;hr color=&quot;green&quot; size=&quot;3&quot;/&gt;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt; In order to allow the chunks to be looked up quickly in cache, each </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;chunk is assigned a unique hash value that is used to look up the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;chunk. The cache contains a simple array of pointers to chunks, </p>
 <p class="FM__Body"> &#160;&#160;&#160;which is called a hash table. A chunk's hash value is simply the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;index into the hash table of the pointer to that chunk. While the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;pointer at this location might instead point to a different chunk </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;or to nothing at all, no other locations in the hash table can </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;contain a pointer to the chunk in question. Therefore, the library </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;only has to check this one location in the hash table to tell if a </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;chunk is in cache or not. This also means that if two or more </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;chunks share the same hash value, then only one of those chunks can </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;be in the cache at the same time. When a chunk is brought into </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;cache and another chunk with the same hash value is already in </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;cache, the second chunk must be evicted first. Therefore it is </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;very important to make sure that the size of the hash table, also </p>
 <p class="FM__Body"> &#160;&#160;&#160;called the nslots parameter in &lt;code&gt;H5Pset_cache&lt;/code&gt; and </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;code&gt;H5Pset_chunk_cache&lt;/code&gt;, is large enough to minimize the </p>
 <p class="FM__Body"> &#160;&#160;&#160;number of hash value collisions.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt; To determine the hash value for a chunk, the chunk is first assigned </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;a unique index that is the linear index into a hypothetical array of </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;the chunks. That is, the upper-left chunk has an index of 0, the one </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;to the right of that has an index of 1, and so on. This index is </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;then divided by the size of the hash table, nslots, and the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;remainder, or modulus, is the hash value. Because this scheme can </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;result in regularly spaced indices being used frequently, it is </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;important that nslots be a prime number to minimize the chance </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;of collisions. In general, nslots should probably be set to a </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;number approximately 100 times the number of chunks that can fit </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;in nbytes bytes, unless memory is extremely limited. There is of </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;course no advantage in setting nslots to a number larger than </p>
 <p class="FM__Body"> &#160;&#160;&#160;the total number of chunks in the dataset.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt; The w0 parameter affects how the library decides which chunk to </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;evict when it needs room in the cache. If w0 is set to 0, then </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;the library will always evict the least recently used chunk in </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;cache. If w0 is set to 1, the library will always evict the least </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;recently used chunk which has been fully read or written, and if </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;none have been fully read or written, it will evict the least </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;recently used chunk. If w0 is between 0 and 1, the behaviour will </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;be a blend of the two. Therefore, if the application will access </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;the same data more than once, w0 should be set closer to 0, and </p>
 <p class="FM__Body"> &#160;&#160;&#160;if the application does not, w0 should be set closer to 1.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt; It is important to remember that chunk caching will only give a </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;benefit when reading or writing the same chunk more than once. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;If, for example, an application is reading an entire dataset, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;with only whole chunks selected for each operation, then chunk </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;caching will not help performance, and it may be preferable to </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;completely disable the chunk cache in order to save memory. It </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;may also be advantageous to disable the chunk cache when writing </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;small amounts to many different chunks, if memory is not large </p>
 <p class="FM__Body"> &#160;&#160;&#160;enough to hold all those chunks in cache at once.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h3&gt;11.2.5. I/O Filters and Compression&lt;/h3&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; Dataset chunking also enables the use of I/O filters, including </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;compression. The filters are applied to each chunk individually, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;and the entire chunk is processed at once. The filter must be </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;applied every time the chunk is loaded into cache, and every </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;time the chunk is flushed to disk. These facts all make choosing </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;the proper settings for the chunk cache and chunk size even </p>
 <p class="FM__Body"> &#160;&#160;&#160;more critical for the performance of filtered datasets.&lt;/p&gt;</p>
 <p class="FM__Body">&#160;&#160;</p>
 <p class="FM__Body">&lt;p&gt; Because the entire chunk must be filtered every time disk I/O </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;occurs, it is no longer a viable option to disable the chunk </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;cache when writing small amounts of data to many different chunks. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;To achieve acceptable performance, it is critical to minimize the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;chance that a chunk will be flushed from cache before it is </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;completely read or written. This can be done by increasing the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;size of the chunk cache, adjusting the size of the chunks, or </p>
 <p class="FM__Body"> &#160;&#160;&#160;adjusting I/O patterns.&lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h3&gt;11.2.6. Pitfalls&lt;/h3&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;p&gt; Inappropriate chunk size and cache settings can dramatically reduce </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;performance. There are a number of ways this can happen. Some of </p>
 <p class="FM__Body"> &#160;&#160;&#160;the more common issues include:</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;Chunks are too small&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;p&gt; There is a certain amount of overhead associated with finding </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chunks. When chunks are made smaller, there are more of them </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;in the dataset. When performing I/O on a dataset, if there </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;are many chunks in the selection, it will take extra time </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;to look up each chunk. In addition, since the chunks are </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stored independently, more chunks results in more I/O </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;operations, further compounding the issue. The extra metadata </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;needed to locate the chunks also causes the file size to </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;increase as chunks are made smaller. Making chunks larger </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;results in fewer chunk lookups, smaller file size, and </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fewer I/O operations in most cases.&lt;/p&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;Chunks are too large&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;p&gt; It may be tempting to simply set the chunk size to be the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;same as the dataset size in order to enable compression on </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a contiguous&lt;/em&gt; dataset. However, this can have </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unintended consequences. Because the entire chunk must be </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;read from disk and decompressed before performing any </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;operations, this will impose a great performance penalty </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;when operating on a small subset of the dataset if the cache </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;is not large enough to hold the one-chunk dataset. In </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;addition, if the dataset is large enough, since the entire </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chunk must be held in memory while compressing and decompressing, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;the operation could cause the operating system to page memory </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;to disk, slowing down the entire system.&lt;/p&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;Cache is not big enough&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;p&gt; Similarly, if the chunk cache is not set to a large enough </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size for the chunk size and access pattern, poor performance </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;will result. In general, the chunk cache should be large </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;enough to fit all of the chunks that contain part of a </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hyperslab selection used to read or write. When the chunk </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cache is not large enough, all of the chunks in the selection </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;will be read into cache and then written to disk (if writing) </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;and evicted. If the application then revisits the same </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chunks, they will have to be read and possibly written </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;again, whereas if the cache were large enough they would </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;only have to be read (and possibly written) once. However, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if selections for I/O always coincide with chunk boundaries, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;this does not matter as much, as there is no wasted I/O and </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;the application is unlikely to revisit the same chunks soon </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;after.&lt;/p&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;p&gt; If the total size of the chunks involved in a selection is too </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;big to practically fit into memory, and neither the chunk nor </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;the selection can be resized or reshaped, it may be better to </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;disable the chunk cache. Whether this is better depends on the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;storage order of the selected elements. It will also make </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;little difference if the dataset is filtered, as entire chunks </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;must be brought into memory anyways in that case. When the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chunk cache is disabled and there are no filters, all I/O is </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;done directly to and from the disk. If the selection is mostly </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;along the fastest changing dimension (i.e. rows), then the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data will be more contiguous on disk, and direct I/O will be </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;more efficient than reading entire chunks, and hence the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cache should be disabled. If however the selection is mostly </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;along the slowest changing dimension (columns), then the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data will not be contiguous on disk, and direct I/O will </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;involve a large number of small operations, and it will </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;probably be more efficient to just operate on the entire </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chunk, therefore the cache should be set large enough to </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hold at least 1 chunk. To disable the chunk cache, either </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nbytes or nslots should be set to 0.&lt;/p&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;Improper hash table size&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;p&gt; Because only one chunk can be present in each slot of the hash </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;table, it is possible for an improperly set hash table size </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(nslots) to severely impact performance. For example, if </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;there are 100 columns of chunks in a dataset, and the hash </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;table size is set to 100, then all the chunks in each row </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;will have the same hash value. Attempting to access a row </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;of elements will result in each chunk being brought into </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cache and then evicted to allow the next one to occupy its </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;slot in the hash table, even if the chunk cache is large </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;enough, in terms of nbytes, to hold all of them. Similar </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;situations can arise when nslots is a factor or multiple of </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;the number of rows of chunks, or equivalent situations in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;higher dimensions.&lt;/p&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&lt;p&gt; Luckily, because each slot in the hash table only occupies </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;the size of the pointer for the system, usually 4 or 8 </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bytes, there is little reason to keep nslots small. Again, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a general rule is that nslots should be set to a prime </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;number at least 100 times the number of chunks that can </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fit in nbytes, or simply set to the number of chunks in </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;the dataset.&lt;/p&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ul&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;h3&gt;11.2.7. For More Information&lt;/h3&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">---------1---------2---------3---------4---------5---------6---------7---------8</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;!-- the pdf mentioned in the paragraph below is not available to print </p>
 <p class="FM__Body">readers (ie, it's not on the web site)</p>
 <p class="FM__Body">&lt;p&gt; The slide set &amp;ldquo;</p>
 <p class="FM__Body">&lt;a href=&quot;../_topic/Chunking/Chunking_Tutorial_EOS13_2009.pdf&quot;&gt;HDF5 </p>
 <p class="FM__Body"> &#160;&#160;&#160;Advanced Topics: Chunking in HDF5&lt;/a&gt;&amp;rdquo; (PDF), a tutorial from </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;HDF and HDF-EOS Workshop XIII (2009) provides additional HDF5 chunking </p>
 <p class="FM__Body"> &#160;&#160;&#160;use cases and examples.&lt;/p&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- FOR USE WITH ELECTRONIC VERSION ---------------------------------</p>
 <p class="FM__Body">&lt;!-- 11.18.10, the paragraph below is labeled for the electronic version,</p>
 <p class="FM__Body">but it doesn't seem to work with the electronic page. I'm keeping this </p>
 <p class="FM__Body">paragraph commented out. --</p>
 <p class="FM__Body">&lt;p&gt; The page &amp;ldquo;&lt;a href=</p>
 <p class="FM__Body"> &#160;&#160;&#160;&quot;http://www.hdfgroup.org/HDF5/examples/api18-c.html&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;HDF5 Examples by API&lt;/a&gt;&amp;rdquo; lists many code examples that are </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;regularly tested with the HDF5 Library. &#160;Several illustrate the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;use of chunking in HDF5, particularly &amp;ldquo;Read/Write Chunked </p>
 <p class="FM__Body"> &#160;&#160;&#160;Dataset&amp;rdquo; and any examples demonstrating filters. &lt;/p&gt;</p>
 <p class="FM__Body">&lt;!-- FOR USE WITH ELECTRONIC VERSION ---------------------------------&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- FOR USE WITH PRINT VERSION --------------------------------------&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;p&gt; The &amp;ldquo;HDF5 Examples by API&amp;rdquo; page, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;code&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;http:/www.hdfgroup.org/ftp/HDF5/examples/examples-by-api/api18-c.html,</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/code&gt; </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;lists many code examples that are regularly tested with the HDF5 </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;Library. Several illustrate the use of chunking in HDF5, particularly </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&amp;ldquo;Read/Write Chunked Dataset&amp;rdquo; and any examples </p>
 <p class="FM__Body"> &#160;&#160;&#160;demonstrating filters. &lt;/p&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- FOR USE WITH PRINT VERSION --------------------------------------</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- FOR USE WITH ELECTRONIC VERSION ---------------------------------&gt;</p>
 <p class="FM__Body">&lt;!-- 11.19.10, section 11.2.8. is labeled for the electronic version, </p>
 <p class="FM__Body">but doesn't seem to be appropriate for the page. I'm leaving it commented </p>
 <p class="FM__Body">out. --</p>
 <p class="FM__Body">&lt;!-- </p>
 <p class="FM__Body">&lt;h3&gt;11.2.8. Directions for Future Development&lt;/h3&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&#160;&#160;As seen above, the HDF5 chunk cache currently requires careful control of the </p>
 <p class="FM__Body">&#160;&#160;parameters in order to achieve optimal performance. In the future, we plan to </p>
 <p class="FM__Body">&#160;&#160;improve the chunk cache to be more foolproof in many ways, and deliver acceptable </p>
 <p class="FM__Body"> &#160;performance in most cases even when no thought is given to the chunking parameters.</p>
 <p class="FM__Body"> &#160;&lt;p&gt;</p>
 <p class="FM__Body">&#160;&#160;One way to make the chunk cache more user-friendly is to automatically resize the </p>
 <p class="FM__Body">&#160;&#160;chunk cache as needed for each operation. The cache should be able to detect when </p>
 <p class="FM__Body">&#160;&#160;the cache should be skipped or when it needs to be enlarged based on the pattern of </p>
 <p class="FM__Body">&#160;&#160;I/O operations. At a minimum, it should be able to detect when the cache would </p>
 <p class="FM__Body">&#160;&#160;severely hurt performance for a single operation and disable the cache for that </p>
 <p class="FM__Body"> &#160;operation. This would of course be optional.</p>
 <p class="FM__Body"> &#160;&lt;p&gt;</p>
 <p class="FM__Body">&#160;&#160;Another way is to allow chaining of entries in the hash table. This would make the </p>
 <p class="FM__Body">&#160;&#160;hash table size much less of an issue, as chunks could shared the same hash value </p>
 <p class="FM__Body"> &#160;by making a linked list.</p>
 <p class="FM__Body"> &#160;&lt;p&gt;</p>
 <p class="FM__Body">&#160;&#160;Finally, it may even be desirable to set some reasonable default chunk size based </p>
 <p class="FM__Body">&#160;&#160;on the dataset size and possibly some other information on the intended access </p>
 <p class="FM__Body"> &#160;pattern. This would probably be a high-level routine.</p>
 <p class="FM__Body"> &#160;&lt;p&gt;</p>
 <p class="FM__Body">&#160;&#160;Other features planned for chunking include new index methods (besides b-trees), </p>
 <p class="FM__Body">&#160;&#160;disabling filters for chunks that are partially over the edge of a dataset, only </p>
 <p class="FM__Body">&#160;&#160;storing the used portions of these edge chunks, and allowing multiple reader </p>
 <p class="FM__Body"> &#160;processes to read the same dataset as a single writer process writes to it.</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;div align=&quot;right&quot;&gt;</p>
 <p class="FM__Body">&lt;table&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;tr&gt;&lt;td align=&quot;top&quot; valign=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;font size=&quot;6&quot; color=&quot;AAAAAA&quot;&gt;DRAFT&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/font&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/td&gt;&lt;td align=&quot;top&quot; valign=&quot;left&quot;&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;i&gt;Chunking in HDF5&lt;/i&gt; is under active development. Please </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;send comments, suggestions, and bug reports to </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;fbaker-at-hdfgroup.org.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/td&gt;&lt;/tr&gt;</p>
 <p class="FM__Body">&lt;/table&gt;</p>
 <p class="FM__Body">&lt;/div&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- FOR USE WITH ELECTRONIC VERSION ---------------------------------&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;h2&gt;11.3. HDF5 Glossary and Terms&lt;/h2&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dl&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-AtomicDType&quot;&gt;atomic datatype&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;dd&gt;A datatype which cannot be decomposed into smaller units at the </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;API level. &lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;a name=&quot;Glossary-Attribute&quot;&gt;&lt;b&gt;attribute&lt;/b&gt;&lt;/a&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A small dataset that can be used to describe the nature and/or </p>
 <p class="FM__Body"> &#160;&#160;&#160;the intended usage of the object it is attached to.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-Basic&quot;&gt;basic datatypes&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;char &#160;&#160;&#160;&#160;- 8-bit character (only for ASCII information)&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;int8 &#160;&#160;&#160;&#160;- 8-bit signed integer&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;uint8 &#160;&#160;&#160;- 8-bit unsigned integer&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;int16 &#160;&#160;&#160;- 16-bit signed integer&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;uint16 &#160;&#160;- 16-bit unsigned integer&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;int32 &#160;&#160;&#160;- 32-bit signed integer&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;uint32 &#160;&#160;- 32-bit unsigned integer&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;intn &#160;&#160;&#160;&#160;- &quot;native&quot; signed integer&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;uintn &#160;&#160;&#160;- &quot;native&quot; unsigned integer&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;int64 &#160;&#160;&#160;- 64-bit signed integer (new)&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;uint64 &#160;&#160;- 64-bit unsigned integer (new)&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;float32 &#160;- 32-bit IEEE float&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;float64 &#160;- 64-bit IEEE float&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ul&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-LayoutChunked&quot;&gt;chunked layout&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;The storage layout of a chunked dataset.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-Chunking&quot;&gt;chunking&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A storage layout where a dataset is partitioned into fixed-size </p>
 <p class="FM__Body"> &#160;&#160;&#160;multi-dimensional chunks. &#160;Chunking tends to improve performance</p>
 <p class="FM__Body"> &#160;&#160;&#160;and facilitates dataset extensibility.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-DTypeCommitted&quot;&gt;committed datatype&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A datatype that is named and stored in a file so that it can be shared. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;Committed datatypes can be shared. Committing is permanent; a datatype </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;cannot be changed after being committed. Committed datatypes used to be </p>
 <p class="FM__Body"> &#160;&#160;&#160;called &lt;a name=&quot;Glossary-DTypeNamed&quot;&gt;named&lt;/a&gt; datatypes.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-CompoundDType&quot;&gt;compound datatype&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A collection of one or more atomic types or small arrays of such types.</p>
 <p class="FM__Body"> &#160;&#160;&#160;Similar to a struct in C or a common block in Fortran.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-ComplexDType&quot;&gt;complex datatype&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A collection of one or more atomic types or small arrays of such types.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;hid_t &#160;&#160;- 32-bit unsigned integer used as ID for memory objects&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;hoid_t  - 32-bit unsigned integer (currently) used as ID for </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;disk-based objects&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;hbool_t - boolean to indicate true/false/error codes from functions&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;herr_t  - 32-bit integer to indicate succeed/fail codes from </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;functions&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ul&gt;&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-LayoutContig&quot;&gt;contiguous layout&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;The storage layout of a dataset that is not chunked, so that the entire</p>
 <p class="FM__Body"> &#160;&#160;&#160;data portion of the dataset is stored in a single contiguous block.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-PListDataTransfer&quot;&gt;data transfer property list&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;The data transfer property list is used to control various aspects </p>
 <p class="FM__Body"> &#160;&#160;&#160;of the I/O, such as caching hints or collective I/O information.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-Dataset&quot;&gt;dataset&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A multi-dimensional array of data elements, together with </p>
 <p class="FM__Body"> &#160;&#160;&#160;supporting metadata. &lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-PListDSetAccess&quot;&gt;dataset access property list&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A property list containing information on how a dataset is to be accessed.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-PListDSetCreate&quot;&gt;dataset creation property list&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A property list containing information on how </p>
 <p class="FM__Body"> &#160;&#160;&#160;raw data is organized on disk and how the raw data is compressed.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body"> &#160;&#160;&#160;The dataset API partitions these terms by layout, compression,</p>
 <p class="FM__Body"> &#160;&#160;&#160;and external storage:</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;b&gt; Layout:&lt;/b&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;H5D_COMPACT: Data is small and can be stored in object header (not</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;implemented yet). &#160;This eliminates disk seek/read requests.&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;H5D_CONTIGUOUS: (&lt;b&gt;default&lt;/b&gt;) The data is large, non-extendible, </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;non-compressible, non-sparse, and can be stored externally.&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;H5D_CHUNKED:  The data is large and can be extended in any dimension.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;It is partitioned into chunks so each chunk is the same logical size. &lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;b&gt;Compression:&lt;/b&gt; &#160;(gzip compression)&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;b&gt;External Storage Properties:&lt;/b&gt;  The data must be contiguous to be </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;stored externally. It allows you to store </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;the data in one or more non-HDF5 files.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ul&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-Dataspace&quot;&gt;dataspace&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;An object that describes the dimensionality of the data array. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;A dataspace is either a regular N-dimensional array of data points, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;called a simple dataspace, or a more general collection of data points </p>
 <p class="FM__Body"> &#160;&#160;&#160;organized in another manner, called a complex dataspace.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&lt;!-- NEW PAGE --&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-Datatype&quot;&gt;datatype&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;An object that describes the storage format of the individual data </p>
 <p class="FM__Body"> &#160;&#160;&#160;points of a data set.</p>
 <p class="FM__Body"> &#160;&#160;&#160;There are two categories of datatypes: atomic and compound datatypes.</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;An atomic type is a type which cannot be decomposed into smaller </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;units at the API level. A compound datatype is a collection of one or </p>
 <p class="FM__Body"> &#160;&#160;&#160;more atomic types or small arrays of such types.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;DDL&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A detailed description of the HDF5 format and objects, written in a </p>
 <p class="FM__Body"> &#160;&#160;&#160;Data Description Language using Backus-Naur Form.</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-DiskIO&quot;&gt;disk I/O datatypes&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;hoff_t &#160;- (64-bit?) offset on disk in bytes&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;hlen_t &#160;- (64-bit?) length on disk in bytes&lt;/li&gt;</p>
 <p class="FM__Body">&lt;/ul&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-DTypeEnum&quot;&gt;enumeration datatype&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A one-to-one mapping between a set of symbols and a set of </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;integer values, and an order is imposed on the symbols by their </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;integer values. The symbols are passed between the application </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;and library as character strings and all the values for a </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;particular enumeration datatype are of the same integer type, </p>
 <p class="FM__Body"> &#160;&#160;&#160;which is not necessarily a native type.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-File&quot;&gt;file&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A container for storing grouped collections of </p>
 <p class="FM__Body"> &#160;&#160;&#160;multi-dimensional arrays containing scientific data. &lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-FileAccessMode&quot;&gt;file access mode&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;Determines whether an existing file will be overwritten,</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;opened for read-only access, or opened for read/write access. &#160;</p>
 <p class="FM__Body"> &#160;&#160;&#160;All newly created files are opened for both reading and</p>
 <p class="FM__Body"> &#160;&#160;&#160;writing. &#160;&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body"> &#160;&#160;&#160;Possible values are:</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;PRE&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;H5F_ACC_RDWR: &#160;&#160;Allow read and write access to file. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;H5F_ACC_RDONLY: Allow read-only access to file. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;H5F_ACC_TRUNC: &#160;Truncate file, if it already exists, erasing all data </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;previously stored in the file. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;H5F_ACC_EXCL: &#160;&#160;Fail if file already exists. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;H5F_ACC_DEBUG: &#160;Print debug information. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;H5P_DEFAULT: &#160;&#160;&#160;Apply default file access and creation properties. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/PRE&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-PListFileAccess&quot;&gt;file access property list&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;File access property lists are used to control different methods </p>
 <p class="FM__Body"> &#160;&#160;&#160;of performing I/O on files.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;b&gt;Unbuffered I/O:&lt;/b&gt; Local permanent files can be accessed with the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;functions described in Section 2 of the Posix manual, namely open(), </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;lseek(), read(), write(), and close(). &lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;b&gt;Buffered I/O:&lt;/b&gt; Local permanent files can be accessed with the </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;functions declared in the stdio.h header file, namely fopen(), </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;fseek(), fread(), fwrite(), and fclose().&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;b&gt;Memory I/O:&lt;/b&gt; Local temporary files can be created and accessed </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;directly from memory without ever creating permanent storage. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;The library uses malloc() and free() to create storage space for the </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;file&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;b&gt;Parallel Files using MPI I/O:&lt;/b&gt; This driver allows parallel access </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;to a file through the MPI I/O library. The parameters which can be </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;modified are the MPI communicator, the info object, and the access mode.</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;The communicator and info object are saved and then passed to </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;MPI_File_open() during file creation or open. The access_mode </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;controls the kind of parallel access the application intends.&lt;br /&gt; </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;b&gt;Data Alignment:&lt;/b&gt; Sometimes file access is faster if certain things </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;are aligned on file blocks. This can be controlled by setting alignment</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;properties of a file access property list with the H5Pset_alignment() </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;function. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ul&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-PListFileCreate&quot;&gt;file creation property list&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;The property list used to control file metadata. &lt;/dd&gt;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body"> &#160;&#160;&#160;The parameters that can be modified are:</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;b&gt;User-Block Size:&lt;/b&gt; The &quot;user-block&quot; is a fixed length block </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;of data located at the beginning of the file which is ignored </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;by the HDF5 library and may be used to store any data information </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;found to be useful to applications. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;b&gt;Offset and Length Sizes:&lt;/b&gt; The number of bytes used to store the</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;offset and length of objects in the HDF5 file can be controlled </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;with this parameter. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;b&gt;Symbol Table Parameters:&lt;/b&gt; The size of symbol table B-trees can </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;be controlled by setting the 1/2 rank and 1/2 node size </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;parameters of the B-tree. </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;b&gt;Indexed Storage Parameters:&lt;/b&gt; The size of indexed storage </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;B-trees can be controlled by setting the 1/2 rank and 1/2 node </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;size parameters of the B-tree.</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ul&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-Group&quot;&gt;group&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A structure containing zero or more HDF5 objects, </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;together with supporting metadata. </p>
 <p class="FM__Body"> &#160;&#160;&#160;The two primary HDF5 objects are datasets and groups.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-LinkHard&quot;&gt;hard link&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A direct association between a name and the object where both exist </p>
 <p class="FM__Body"> &#160;&#160;&#160;in a single HDF5 address space.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;HDF5&lt;/b&gt; &lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;HDF5 is an abbreviation for Hierarchical Data Format Version 5. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;This file format is intended to make it easy to write and read </p>
 <p class="FM__Body"> &#160;&#160;&#160;scientific data</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;by including the information needed to understand the data </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;within the file&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;br /&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;li&gt;by providing a library of C, FORTRAN, and other language </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;programs that reduce the work required to provide efficient </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;writing and reading - even with parallel IO&lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ul&gt;&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-Hyperslab&quot;&gt;hyperslab&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A portion of a dataset. A hyperslab selection can be a </p>
 <p class="FM__Body"> &#160;&#160;&#160;logically contiguous collection of points in a dataspace or</p>
 <p class="FM__Body"> &#160;&#160;&#160;a regular pattern of points or blocks in a dataspace. &lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-Identifier&quot;&gt;identifier&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A unique entity provided by the HDF5 library and used to access</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;an HDF5 object such as a file, group, or dataset. In the past, </p>
 <p class="FM__Body"> &#160;&#160;&#160;an identifier might have been called a handle.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-Link&quot;&gt;link&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;An association between a name and the object in an HDF5 file group.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-GroupMember&quot;&gt;member&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A group or dataset that is in another dataset, &lt;i&gt;dataset A&lt;/i&gt;,</p>
 <p class="FM__Body"> &#160;&#160;&#160;is a member of &lt;i&gt;dataset A&lt;/i&gt;.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-Name&quot;&gt;name&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A slash-separated list of components that uniquely identifies an </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;element of an HDF5 file. &#160;A name begins that begins with a slash </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;is an absolute name which is accessed beginning with the root group </p>
 <p class="FM__Body"> &#160;&#160;&#160;of the file; all other names are relative names and the associated</p>
 <p class="FM__Body"> &#160;&#160;&#160;objects are accessed beginning with the current or specified group.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-DTypeOpaque&quot;&gt;opaque datatype&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A mechanism for describing data which cannot be otherwise described </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;by HDF5. The only properties associated with opaque types are a </p>
 <p class="FM__Body"> &#160;&#160;&#160;size in bytes and an ASCII tag.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;parallel I/O HDF5&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;The parallel I/O version of HDF5 supports parallel file access using </p>
 <p class="FM__Body"> &#160;&#160;&#160;MPI (Message Passing Interface). &#160;&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt; </p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-Path&quot;&gt;path&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;The slash-separated list of components that forms the name </p>
 <p class="FM__Body"> &#160;&#160;&#160;uniquely identifying an element of an HDF5 file.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-PList&quot;&gt;property list&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A collection of name/value pairs that can be passed to other </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;HDF5 functions to control features that are typically unimportant </p>
 <p class="FM__Body"> &#160;&#160;&#160;or whose default values are usually used. &lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-RootGroup&quot;&gt;root group&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;The group that is the entry point to the group graph in an HDF5 file.</p>
 <p class="FM__Body"> &#160;&#160;&#160;Every HDF5 file has exactly one root group.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-Selection&quot;&gt;selection&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;(1) A subset of a dataset or a dataspace, up to the entire dataset or </p>
 <p class="FM__Body"> &#160;&#160;&#160;dataspace.</p>
 <p class="FM__Body"> &#160;&#160;&#160;(2) The elements of an array or dataset that are marked for I/O.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-Serialization&quot;&gt;serialization&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;The flattening of an N&lt;/em&gt;-dimensional data object into a </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;1-dimensional object so that, for example, the data object can be </p>
 <p class="FM__Body"> &#160;&#160;&#160;transmitted over the network as a 1-dimensional bitstream.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-LinkSoft&quot;&gt;soft link&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;An indirect association between a name and an object in an </p>
 <p class="FM__Body"> &#160;&#160;&#160;HDF5 file group.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-StorageLayout&quot;&gt;storage layout&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;The manner in which a dataset is stored, either contiguous or</p>
 <p class="FM__Body"> &#160;&#160;&#160;chunked, in the HDF5 file.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;&lt;a name=&quot;Glossary-SuperBlock&quot;&gt;super block&lt;/a&gt;&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A block of data containing the information required to portably access </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;HDF5 files on multiple platforms, followed by information about the groups </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;and datasets in the file. </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;The super block contains information about the size of offsets, </p>
 <p class="FM__Body"> &#160;&#160;&#160;lengths of objects, the number of entries in group tables,</p>
 <p class="FM__Body"> &#160;&#160;&#160;and additional version information for the file. &lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!--</p>
 <p class="FM__Body">&lt;dt&gt;&lt;b&gt;threadsafe&lt;/b&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A &quot;thread-safe&quot; version of HDF-5 (TSHDF5) is one that can be called </p>
 <p class="FM__Body"> &#160;&#160;&#160;from any thread of a multi-threaded program. Any calls to HDF</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;can be made in any order, and each individual HDF call will perform </p>
 <p class="FM__Body"> &#160;&#160;&#160;correctly. A calling program does not have to explicitly lock the HDF</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;library in order to do I/O. Applications programmers may assume that </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;the TSHDF5 guarantees the following: </p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;the HDF-5 library does not create or destroy threads. &lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;the HDF-5 library uses modest amounts of per-thread </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private memory. &lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;the HDF-5 library only locks/unlocks it's own locks (no locks </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;are passed in or returned from HDF), and the internal locking </p>
 <p class="FM__Body"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;is guaranteed to be deadlock free. &lt;/li&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;/ul&gt;</p>
 <p class="FM__Body"> &#160;&#160;&#160;&lt;br /&gt;</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;These properties mean that the TSHDF5 library will not interfere </p>
 <p class="FM__Body"> &#160;&#160;&#160;with an application's use of threads. A TSHDF5 library is the same</p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;library as regular HDF-5 library, with additional code to synchronize </p>
 <p class="FM__Body"> &#160;&#160;&#160;access to the HDF-5 library's internal data structures. &lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">--&gt;</p>
 <p class="FM__Body">&lt;!-- PRINT VERSION CONTINUED --</p>
 <p class="FM__Body">&lt;dt&gt;&lt;strong&gt;&lt;a name=&quot;Glossary-DTypeVLen&quot;&gt;variable-length datatype&lt;/a&gt;&lt;/strong&gt;&lt;/dt&gt;</p>
 <p class="FM__Body">&lt;dd&gt;A sequence of an existing datatype (atomic, variable-length (VL), </p>
 <p class="FM__Body">&#160;&#160;&#160;&#160;or compound) which are not fixed in length from one dataset location </p>
 <p class="FM__Body"> &#160;&#160;&#160;to another.&lt;/dd&gt;</p>
 <p class="FM__Body">&lt;br /&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;/dl&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;!-- FOR USE WITH PRINT VERSION --------------------------------------&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&lt;/body&gt;</p>
 <p class="FM__Body">&lt;/html&gt;</p>
 <p class="FM__Body">&nbsp;</p>
 <p class="FM__Body">&nbsp;</p>
</div>
				
			</div>
			<div class="content_top_link">
				<span class="desktop"><a>&#160;</a> </span>
			</div>
		</div>
	</div>
</div>
<div class="buttonbar">
	<div class="buttonbarholder topic_page_holder">
		<div class="bar_toc topic_page" id="xmlEditorButtonBarTOC" title="Table of Contents">
			<a href="../../table_of_contents.htm">&#160;</a> 
		</div>
		<div class="bar_index topic_page" id="xmlEditorButtonBarIDX" title="Index">
			<a href="../../index1.htm">&#160;</a> 
		</div>
		<div class="bar_glossary topic_page" id="xmlEditorButtonBarGLO" 
			 title="Glossary">
			<a href="../../glossary.htm">&#160;</a> 
		</div>
		<div class="bar_search topic_page" title="Search">
			<a href="../../searchresults.htm">&#160;</a> 
		</div>
	</div>
</div>
<div id="localisation">
	<p id="localisation_toc"><span>Table of Contents</span></p>
	<p id="localisation_idx"><span>Index</span></p>
	<p id="localisation_glo"><span>Glossary</span></p>
	<p id="localisation_fts"><span>-Search-</span></p>
	<p id="localisation_back"><span>Back</span></p>
</div>
<script type="text/javascript" src="../../template/Theme1_Standard/jquery.js"></script>
<script type="text/javascript" src="../../template/Theme1_Standard/jqueryui-custom.js"></script>
<script type="text/javascript" src="../../template/Theme1_Standard/overthrow.min.js"></script>
<script type="text/javascript" src="../../template/Theme1_Standard/overthrow.sidescroller.min.js"></script>
<script type="text/javascript" src="../../template/Theme1_Standard/layout.js"></script>
<script type="text/javascript">//<![CDATA[
$(function(){
	addRhLoadCompleteEvent(setTopic);
});
//]]></script>
</body>
</html>
