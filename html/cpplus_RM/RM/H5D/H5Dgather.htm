

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Dscatter" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 11 July 2013
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Dataset-Gather">H5Dgather</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Dgather</code>(
            <em>hid_t</em> <code>src_space_id</code>,
            <em>const void *</em> <code>src_buf</code>,
            <em>hid_t</em> <code>type_id</code>,
            <em>size_t</em> <code>dst_buf_size</code>,
            <em>void *</em><code>dst_buf</code>
            <em>H5D_gather_func_t</em> <code>op</code>,
            <em>void *</em> <code>op_data</code>,
        )

  <p>
  <dt><strong>Purpose:</strong>
    <dd>Gathers data from a selection within a memory buffer.

  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Dgather</code> retrieves data from a selection within the
      supplied buffer <code>src_buf</code> and passes it to the supplied
      callback function <code>op</code> in a contiguous form.
      <p>
      <code>src_space_id</code> is a dataspace which defines the extent 
      of <code>src_buf</code> and the selection within it to gather the 
      data from.
      <p>
      <code>type_id</code> is the datatype of the data to be gathered in 
      both the source and destination buffers.
      <p>
      <code>src_buf</code> must be at least as large as the number of 
      elements in the extent of <code>src_space_id</code> times the size 
      in bytes of <code>type_id</code>.
      <p>
      The data is gathered into <code>dst_buf</code>, which needs to be 
      large enough to hold all the data if the callback function 
      <code>op</code> is not provided.
      <p>
      If no callback function is provided, <code>H5Dgather</code> 
      simply gathers the data into <code>dst_buf</code> and returns.
      If a callback function is provided, <code>H5Dgather</code> repeatedly
      gathers up to <code>dst_buf_size</code> bytes <code>op</code> to 
      process the serialized data.
      The prototype of the callback function <code>op</code> is as follows 
      (as defined in the source code file <code>H5Dpublic.h</code>):
      <dir>
          <em>herr_t</em> <code>(*H5D_gather_func_t)(</code>
              <em>const void *</em> <code>dst_buf,</code> 
              <em>size_t</em> <code>dst_buf_bytes_used,</code> 
              <em>void *</em><code>op_data)</code>
      </dir>

      <p>
      The parameters of this callback function have the following
      values or meanings: 
      <table>
          <tr valign=top><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></td><td>
              <code>dst_buf</code>
              </td><td>
              Pointer to the destination buffer which has been filled with the
              next set of elements gathered.
              This will always be identical to the <code>dst_buf</code> passed
              to <code>H5Dgather</code>.
              </td></tr>
          <tr valign=top><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></td><td>
              <code>dst_buf_bytes_used&nbsp;&nbsp;&nbsp;</code>
              </td><td>
              Pointer to the number of valid bytes in <code>dst_buf</code>.
              This number must be a multiple of the datatype size.
              </td></tr>
          <tr valign=top><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></td><td>
              <code>op_data</code>
              </td><td>
              User-defined pointer to data required by the callback function;
              a pass-through of the <code>op_data</code> pointer provided
              with the <code>H5Dgather</code> function call.
              </td></tr>
      </table>

      <p>
      The callback function should process, store, or otherwise make use of 
      the data returned in <code>dst_buf</code> before it returns, because the
      buffer will be overwritten unless it is the last call to the callback.
      This function will be repeatedly called until all gathered elements have
      been passed to the callback in <code>dst_buf</code>.
      The callback function should return zero (<code>0</code>) to indicate 
      success, and a negative value to indicate failure.

  <p>
  <dt><strong>Programming Note for C++ Developers Using C Functions:</strong>
    <dd>
      <p>If a C routine that takes a function pointer as an argument is 
      called from within C++ code, the C routine should be returned from 
      normally. </p>

      <p>Examples of this kind of routine include callbacks such as 
      <code>H5Pset_elink_cb</code> and <code>H5Pset_type_conv_cb</code> 
      and functions such as <code>H5Tconvert</code> and 
      <code>H5Ewalk2</code>.</p>

      <p>Exiting the routine in its normal fashion allows the HDF5 C 
      Library to clean up its work properly. In other words, if the C++ 
      application jumps out of the routine back to the C++ 
      &ldquo;catch&rdquo; statement, the The HDF5 C Library is not given 
      the opportunity to close any temporary data structures that were set 
      up when the routine was called. The C++ application should save 
      some state as the routine is started so that any problem that 
      occurs might be diagnosed.</p>

  <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top">
            <em>hid_t</em> <code>src_space_id</code>
        </td>
        <td valign="top">IN: Identifier for the dataspace describing 
            both the dimensions of the source buffer and
            the selection within the source buffer to gather data from.
        </td></tr>
      <tr>
        <td valign="top">
            <em>const void *</em><code>src_buf</code>
        </td>
        <td valign="top">IN: Source buffer which the data will be gathered 
            from.
        </td></tr>
      <tr>
        <td valign="top">
            <em>hid_t</em> <code>type_id</code> 
        </td>
        <td valign="top">IN: Identifier for the datatype describing the 
            data in both the source and definition buffers.
            This is only used to calculate the element size.
        </td></tr>
      <tr>
        <td valign="top">
            <em>size_t</em> <code>dst_buf_size</code> 
        </td>
        <td valign="top">IN: Size in bytes of <code>dst_buf</code>.
        </td></tr>
      <tr>
        <td valign="top">
            <em>void *</em><code>dst_buf</code>
        </td>
        <td valign="top">OUT: Destination buffer where the gathered data 
            will be placed.
        </td></tr>
      <tr>
        <td valign="top">
            <em>H5D_gather_func_t</em>&nbsp;<code>op&nbsp;&nbsp;&nbsp;</code>
        </td>
        <td valign="top">IN: Callback function which handles the gathered 
            data.
            <br>
            Optional if <code>dst_buf</code> is large enough to hold all of 
            the gathered data; required otherwise.
        </td></tr>
      <tr>
        <td valign="top">
            <em>void *</em> <code>op_data</code> 
        </td>
        <td valign="top">IN: User-defined pointer to data required by
            <code>op</code>.
        </td></tr>
    </table>

  <p>
  <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.


<!--__ *** FORTRAN90 INTERFACE  **********************************  -->
<!--__ When the Fortran90 interface is complete, replace this       -->
<!--__ section with the Fortran90 subroutine description.           -->
<!--__                                                              -->
<!--__ See the file h5fortran_f_insert.htm for a template and       -->
<!--__ instructions.                                                -->
<!--__ ***********************************************************  -->


  <p>
  <dt><strong>See Also:</strong>
    <dd><a href="RM_H5D.html#Dataset-Scatter">
        <code>H5Dscatter</code></a>

  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>Change</strong></td></tr>
        <tr>
          <td valign="top">1.8.11</td>
          <td valign="top">
            C function introduced.</td></tr>
    </table>
</dl>



