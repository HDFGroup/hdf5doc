

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://www.hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have      *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!--__ ***********************************************************  -->
<!--__ Do not alter the next line; it is used by the PDF generator. -->
<!--__ ***********************************************************  -->
<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5LDget_dset_elmts" -->

<hr />
<dl>

<dt><div align="right"><font color="999999" size="-1"><i>
    Last modified: 8 December 2015
    </i></font></div></dt>
    <br />

<dt><strong>Name:</strong> 
    <a name="H5LDget_dset_elmts">H5LDget_dset_elmts</a></dt>
    <br />

<dt><strong>Signature:</strong></dt>
    <dd><code><em>herr_t</em> H5LDget_dset_elmts(
              <em>hid_t</em> dset_id,
              <em>hsize_t</em> *prev_dims, 
              <em>hsize_t</em> *cur_dims,
              <em>char</em> *fields, 
              <em>void</em> *buf
        )</code></dd>
    <br />

<dt><strong>Purpose:</strong></dt>
    <dd>Retrieves selected data from the dataset.</dd>
    <br />

<dt><strong>Description:</strong></dt>
    <dd>This routine retrieves selected data of the dataset 
    <code>dset_id</code> and stores the data in the parameter <code>buf</code>. 
    The difference between the parameters <code>prev_dims</code> and 
    <code>cur_dims</code> indicates the dimension sizes of the data to 
    be selected from the dataset. Note that <code>cur_dims</code> must 
    have at least one dimension whose size is greater than the 
    corresponding dimension in <code>prev_dims</code>. 
    Users can determine the size of <code>buf</code> by multipling 
    the datatype size of the dataset by the number of selected 
    elements.
    <p>If the parameter <code>fields</code> is NULL, this routine returns 
    data for the selected elements of the dataset. 
    If <code>fields</code> is not NULL and the dataset has a compound 
    datatype, <code>fields</code> is a string containing a comma-separated 
    list of fields.
    Each name in <code>fields</code> specifies a field in the compound 
    datatype, and this routine returns data of the selected fields for the 
    dataset's selected elements.
    Note that &rsquo;,&rsquo; is the 
    separator for the fields of a compound datatype while &rsquo;.&rsquo; 
    is the separator for a nested field. Use backslash to escape characters 
    in field names that conflict with these two separators.</td>
    </p>
    </dd>
    <br />

<dt><strong>Parameters:</strong></dt>
  <dd>
    <table>
    <tr>
        <td valign="top" width="25%"><code><em>hid_t</em> dset_id</code></td>
        <td valign="top" width="75%">IN: The dataset identifier</td>
    </tr>
    <tr>
        <td valign="top"><code><em>hsize_t</em>&nbsp;*prev_dims&nbsp;&nbsp;&nbsp;
            </code></td>
        <td valign="top">IN: The previous dimension size of the dataset</td>
    </tr>
    <tr>
        <td valign="top"><code><em>hsize_t</em> *cur_dims</code></td>
        <td valign="top">IN: The current dimension size of the dataset</td>
    </tr>
    <tr>
        <td valign="top"><code><em>char</em> *fields</code></td>
        <td valign="top">IN: A string containing a comma-separated list of 
            fields for a compound datatype. 
    </tr>
    <tr>
        <td valign="top"><code><em>void</em> *buf</code></td>
        <td valign="top">OUT: Buffer for storing data retrieved from the 
            dataset</td>
    </tr>
    </table>
    </dd>
    <br />

<dt><strong>Returns:</strong></dt>
    <dd>If successful, returns zero; otherwise returns a negative value.</dd>
    <br />

<dt><strong>Example Usage:</strong></dt>
    <dd>
    For the first example, <code>DSET1</code> is a two-dimensional 
    chunked dataset with atomic type defined below:
    <pre>
    DATASET "DSET1" {
	DATATYPE  H5T_STD_I32LE
	DATASPACE  SIMPLE { ( 4, 13 ) / ( 60, 100 ) }
	:
	:
    }
</pre>

    The following coding sample illustrates the reading of data elements 
    appended to the dataset <code>DSET1</code>:
    <pre>
    /* open the HDF5 file */
    fid = H5Fopen(FILE, H5F_ACC_RDWR, H5P_DEFAULT);

    /* open the dataset */
    did = H5Dopen2(fid, "DSET1", H5P_DEFAULT);
        :
        :
    /* define hsize_t dims[2]; */
    /* define hsize_t new_dims[2]; */
    /* get the dataset's current dimension sizes */
    H5LDget_dset_dims(did, dims);

    /* extend the dataset by 2 */
    new_dims[0] = dims[0] + 2; 
    new_dims[1] = dims[1] + 2;
    H5Dset_extent(did, new_dims) 
     
    /* write data to the extended dataset */
        :
        :
    /* get the size of the dataset's data type */
    type_size = H5LDget_dset_type_size(did, NULL);
        :
        :
    /* allocate buffer for storing selected data elements from the dataset */
    /* calculate # of selected elements from dims & new_dims */
    /* buffer size = type_size * number of selected elements */
        :
        :
    /* read the selected elements from the dataset into buf */
    H5LDget_dset_elmts(did, dims, new_dims, NULL, buf);
        :
        :
    H5Dclose(did);
    H5Fclose(fid);
</pre>

    The output buffer will contain data elements selected from 
    <code>DSET1</code> as follows:
    <pre>
    data for elements (0, 13), (0, 14) 
    data for elements (1, 13), (1, 14) 
    data for elements (2, 13), (2, 14) 
    data for elements (3, 13), (3, 14)
    data for elements (4, 0), (4, 1), (4, 2)......................(4, 13), (4, 14)
    data for elements (5, 0), (5, 1), (5, 2)......................(5, 13), (5, 14)
</pre>

    For the second example, <code>DSET2</code> is a one-dimensional 
    chunked dataset with compound type defined below:
    <pre>
    DATASET "DSET2" {
	DATATYPE  H5T_COMPOUND {
	    H5T_STD_I32LE "a";
	    H5T_STD_I32LE "b";
	    H5T_ARRAY { [4] H5T_STD_I32LE } "c";
	    H5T_STD_I32LE "d";
	    H5T_STD_I32LE "e";
	    H5T_COMPOUND {
		H5T_STD_I32LE "a";
		H5T_STD_I32LE "b";
		H5T_ARRAY {[4] H5T_STD_I32LE} "c";
		H5T_STD_I32LE "d";
		H5T_STD_I32LE "e";
	    } "s2";
	}
	DATASPACE  SIMPLE { ( 5 ) / ( 5 ) }
	:
	:
    }
</pre>

    The following coding sample illustrates the reading of data elements 
    appended to the dataset <code>DSET2</code> with compound datatype
    This example selects only 2 fields: the fourth field <code>d</code> 
    and a subfield of the sixth field <code>s2.c</code>:    
    <pre>
    /* open the HDF5 file */
    fid = H5Fopen(FILE, H5F_ACC_RDWR, H5P_DEFAULT);

    /* open the dataset */
    did = H5Dopen2(fid, "DSET2", H5P_DEFAULT);

    /* define hsize_t dims[1]; */
    /* define hsize_t new_dims[1]; */
        :
        :
    /* get the dataset's current dimension size */
    H5LDget_dset_dims(did, dims);

    /* extend the dataset by 2 */
    new_dims[0] = dims[0] + 2;
    H5Dset_extent(did, new_dims);
        :
        :
    /* write data to the extended part of the dataset */
        :
        :
    /* #define fields "d,s2.c" */
    /* get the size of the dataset's data type for the selected fields */
    type_size = H5LDget_dset_type_size(did, fields);
        :
        :
    /* allocate buffer for storing selected data elements from the dataset */
    /* calculate # of selected elements from dims & new_dims */
    /* buffer size = type_size * number of selected elements */
        :        
        :
    /* read the selected elements from the dataset into buf */
    H5LD_get_dset_elmts(did, dims, new_dims, fields, buf);
        :
        :
    H5Dclose(did);
    H5Fclose(fid);
</pre>

    The output buffer will contain data for <code>d</code> and 
    <code>s2.c</code> selected from <code>DSET2</code> as follows:
    <pre>
    Data for element (5): integer value for "d", 4 integer values for array "s2.c"
    Data for element (6): integer value for "d", 4 integer values for array "s2.c"
</pre>

    </dd>
    <br />

<dt><strong>Fortran Interface:</strong></dt>
    <dd>None</dd>
    <br />

<dt><strong>See Also:</strong></dt>
    <ul>
<li><a href="H5LDget_dset_type_size.htm">H5LDget_dset_type_size</a></li>
<li><a href="H5LDget_dset_dims.htm">H5LDget_dset_dims</a></li>
<li><a href="H5LDget_dset_elmts.htm">H5LDget_dset_elmts</a></li>
<li><a href="h5watch.htm">h5watch</a></li>
    </ul>
    <br />



<dt><strong>History:</strong></dt>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
          <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
          <strong>Change</strong></td></tr>
        <tr>
          <td valign="top">1.10.0</td>
          <td valign="top">
          C function introduced with this release. </td></tr>
        </table></dd>

</dl>
<br />
<br />
<br />

