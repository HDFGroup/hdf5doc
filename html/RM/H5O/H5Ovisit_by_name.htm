

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Ovisit_by_name" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 10 April 2013
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Object-VisitByName">H5Ovisit_by_name</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Ovisit_by_name</code>(
            <em>hid_t</em> <code>loc_id</code>,
            <em>const char *</em><code>object_name</code>,
            <em>H5_index_t</em> <code>index_type</code>, 
            <em>H5_iter_order_t</em> <code>order</code>, 
            <em>H5O_iterate_t</em> <code>op</code>,
            <em>void *</em><code>op_data</code>,
            <em>hid_t</em> <code>lapl_id</code>
        )

  <p>
  <dt><strong>Purpose:</strong>
    <dd>Recursively visits all objects starting from a specified object.

  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Ovisit_by_name</code> is a recursive iteration function 
      to visit the object specified by the <code>loc_id</code> / 
      <code>object_name</code> parameter pair and, if that object is a group,
      all objects in and below it in an HDF5 file,
      thus providing a mechanism for an application to perform
      a common set of operations across all of those objects 
      or a dynamically selected subset.
      For non-recursive iteration across the members of a group, 
      see <a href="RM_H5L.html#Link-Iterate"><code>H5Literate</code></a>.
      <p>
      The object serving as the root of the iteration is specified by 
      the <code>loc_id</code> / <code>object_name</code> parameter pair.
      <code>loc_id</code> specifies a file or an object in a file;
      <code>object_name</code> specifies either 
      an object in the file (with an absolute name based in the 
      file&rsquo;s root group) or
      an object name relative to <code>loc_id</code>.
      If <code>loc_id</code> fully specifies the object that is to 
      serve as the root of the iteration, <code>object_name</code> should
      be <code>'.'</code> (a dot).
      (Note that when <code>loc_id</code> fully specifies the the 
      object that is to serve as the root of the iteration, 
      the user may wish to consider using 
      <a href="#Object-Visit"><code>H5Ovisit</code></a> 
      instead of <code>H5Ovisit_by_name</code>.)
      <p>
      Two parameters are used to establish the iteration:
      <code>index_type</code> and <code>order</code>.
      <p>
      <code>index_type</code> specifies the index to be used.
      If the links in a group have not been indexed by the index type, 
      they will first be sorted by that index then the iteration will begin; 
      if the links have been so indexed, the sorting step will be 
      unnecesary, so the iteration may begin more quickly.
      Valid values include the following:
        <table border=0>
          <tr><td>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_NAME</code>
            </td><td valign=top>
            Alpha-numeric index on name 
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_CRT_ORDER&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td valign=top>
            Index on creation order 
          <!-- H5_INDEX_N is used internally by the Library -->
          <!--
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_N</code>
            </td><td valign=top>
            Number of indices defined
          -->
          </td></tr>
        </table>
      <p>
      Note that the index type passed in <code>index_type</code> is a 
      <i>best effort</i> setting.  
      If the application passes in a value indicating iteration in 
      creation order and a group is encountered that was not tracked
      in creation order, that group will be iterated over in 
      alpha-numeric order by name, or <i>name order</i>.
      (<i>Name order</i> is the native order used by the HDF5 Library
      and is always available.)
      <p>
      <code>order</code> specifies the order in which objects are to be
      inspected along the index specified in <code>index_type</code>.  
      Valid values include the following:
        <table border=0>
          <tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_INC</code>
            </td><td valign=top>
            Increasing order 
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_DEC</code>
            </td><td valign=top>
            Decreasing order
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_NATIVE&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td valign=top>
            Fastest available order
          <!-- H5_INDEX_N is used internally by the Library -->
          <!--
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_N</code>
            </td><td valign=top>
            Number of iteration orders defined 
          -->
          </td></tr>
        </table>

      <p>
      The <code>op</code> callback funtion 
      and the effect of the callback function&rsquo;s return value 
      on the application are described in
      <a href="#Object-Visit"><code>H5Ovisit</code></a>.

<!--
      <p>
      The protoype of the callback function <code>op</code> is as follows
      (as defined in the source code file <code>H5Opublic.h</code>):
      <dir>
          <em>herr_t</em> <code>(*H5O_iterate_t)(</code>
              <em>hid_t</em> <code>o_id,</code> 
              <em>const char *</em><code>name,</code> 
              <em>const H5O_info_t *</em><code>object_info,</code> 
              <em>void *</em><code>op_data)</code>
      </dir>
-->
<!-- NEW PAGE -->
<!--
      <p>
      The parameters of this callback function have the following
      values or meanings: 
      <table>
          <tr valign=top><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></td><td>
              <code>g_id</code>
              </td><td>
              Object that serves as root of the iteration,
              i.e., identifier of the Object specified by the
              <code>H5Ovisit_by_name</code> <code>loc_id</code> /
              <code>object_name</code> parameter pair
              </td></tr>
          <tr valign=top><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></td><td>
              <code>name</code>
              </td><td>
              Name of object, relative to <code>o_id</code>,
              being examined at current step of the iteration
              </td></tr>
          <tr valign=top><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></td><td>
              <code>object_info&nbsp;&nbsp;&nbsp;&nbsp;</code>
              </td><td>
              <em>H5O_info_t</em> struct containing information regarding 
              that object
              </td></tr>
          <tr valign=top><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></td><td>
              <code>op_data</code>
              </td><td>
              User-defined pointer to data required by the application 
              in processing the object;
              a pass-through of the <code>op_data</code> pointer provided
              with the <code>H5Ovisit_by_name</code> function call
              </td></tr>
      </table>
-->
      <p>
      The <em>H5O_info_t</em> struct is defined in <code>H5Opublic.h</code> 
      and described in the 
      <a href="#Object-GetInfo"><code>H5Oget_info</code></a> function entry.

      <p>
      The <code>H5Ovisit_by_name</code> <code>op_data</code> parameter is a 
      user-defined pointer to the data required to process objects 
      in the course of the iteration.
      This pointer is passed back to each step of the iteration in 
      the callback function&rsquo;s <code>op_data</code> parameter.
      <p>
      <code>lapl_id</code> is a link access property list.
      In the general case, when default link access properties are 
      acceptable, this can be passed in as <code>H5P_DEFAULT</code>.
      An example of a situation that requires a non-default link access 
      property list is when the link is an external link; an external link 
      may require that a link prefix be set in a link access property list
      (see <a href="RM_H5P.html#Property-SetELinkPrefix">
      <code>H5Pset_elink_prefix</code></a>).

      <br>&nbsp;
      <p>
      <a href="RM_H5L.html#Link-VisitByName"><code>H5Lvisit_by_name</code></a>
      and <code>H5Ovisit_by_name</code> are companion functions:
      one for examining and operating on links; 
      the other for examining and operating on the objects that 
      those links point to.
      Both functions ensure that by the time the function completes
      successfully, every link or object below the specified point in the 
      file has been presented to the application for whatever 
      processing the application requires.

  <p>
  <dt><strong>Programming Note for C++ Developers Using C Functions:</strong>
    <dd>
      <p>If a C routine that takes a function pointer as an argument is 
      called from within C++ code, the C routine should be returned from 
      normally. </p>

      <p>Examples of this kind of routine include callbacks such as 
      <code>H5Pset_elink_cb</code> and <code>H5Pset_type_conv_cb</code> 
      and functions such as <code>H5Tconvert</code> and 
      <code>H5Ewalk2</code>.</p>

      <p>Exiting the routine in its normal fashion allows the HDF5 C 
      Library to clean up its work properly. In other words, if the C++ 
      application jumps out of the routine back to the C++ 
      &ldquo;catch&rdquo; statement, the library is not given the 
      opportunity to close any temporary data structures that were set 
      up when the routine was called. The C++ application should save 
      some state as the routine is started so that any problem that 
      occurs might be diagnosed.</p>
      
  <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top">
            <em>hid_t</em> <code>loc_id</code>
        </td>
        <td valign="top">IN: Identifier of a file or group 
        </td></tr>
      <tr>
        <td valign="top">
            <em>const char *</em><code>object_name</code>
        </td>
        <td valign="top">IN: Name of the object, 
            generally relative to <code>loc_id</code>,
            that will serve as root of the iteration
        </td></tr>
      <tr>
        <td valign="top">
            <em>H5_index_t</em> <code>index_type</code> 
        </td>
        <td valign="top">IN: Type of index; valid values include:
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <code>H5_INDEX_NAME</code>
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <code>H5_INDEX_CRT_ORDER</code>
        </td></tr>
      <tr>
        <td valign="top">
            <em>H5_iter_order_t</em>&nbsp;<code>order&nbsp;&nbsp;&nbsp;&nbsp;</code> 
        </td>
        <td valign="top">IN: Order in which index is traversed; 
            valid values include:
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <code>H5_ITER_DEC</code>
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <code>H5_ITER_INC</code>
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <code>H5_ITER_NATIVE</code>
        </td></tr>
      <tr>
        <td valign="top">
            <em>H5O_iterate_t</em> <code>op</code>
        </td>
        <td valign="top">IN: Callback function passing data regarding 
            the object to the calling application
        </td></tr>
      <tr>
        <td valign="top">
            <em>void *</em><code>op_data</code>
        </td>
        <td valign="top">IN: User-defined pointer to data required 
            by the application for its processing of the object
        </td></tr>
      <tr>
        <td valign="top">
            <em>hid_t</em> <code>lapl_id</code>
        </td>
        <td valign="top">IN: Link access property list identifier 
        </td></tr>
    </table>

  <p>
  <dt><strong>Returns:</strong>
    <dd>On success, returns the return value of the first operator that
        returns a positive value, or zero if all members were processed 
        with no operator returning non-zero.
        <p>
        On failure, returns a negative value if something goes wrong within 
        the library, or the first negative value returned by an operator.

  <p>
  <dt><strong>Fortran2003 Interface:</strong> h5ovisit_by_name_f
    <dd>

        <?php include("H5O/h5ovisit_by_name_f_F03.htm"); ?>

  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.11</td>
          <td valign="top">
            Fortran subroutine introduced in this release.</td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>


