

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Tcopy" -->
<hr>
<dl>

<dt><div align=right><font color=999999 size=-1><i>
Last modified: 14 October 2014</i></font></div></dt>

<dt><strong>Name:</strong> <a name="Datatype-Copy">H5Tcopy</a></dt>
<br />
<dt><strong>Signature:</strong>
    <dd><em>hid_t </em><code>H5Tcopy</code>(
        <em>hid_t </em><code>dtype_id</code>
        )

<p>
<dt><strong>Purpose:</strong>
    <dd>Copies an existing datatype.  

<p>
<dt><strong>Description:</strong>
    <dd><code>H5Tcopy</code> copies an existing datatype.  
        The returned type is always transient and unlocked.  
        <p>
        The <code>dtype_id</code> argument can be either a datatype
        identifier, a predefined datatype (defined in 
        <code>H5Tpublic.h</code>), or a dataset identifier.
        If <code>dtype_id</code> is a dataset identifier instead of a 
        datatype identifier, then this function returns a transient, 
        modifiable datatype which is a copy of the dataset's datatype.
        <p>
        The datatype identifier returned should be released with 
        <code>H5Tclose</code> or resource leaks will occur.  
<!--
        <p>
        Native datatypes supported by the library are:
        <ul> <dl>
            <dt>H5T_NATIVE_CHAR
                <dd> Native character type, declare dataset array as 'char'
            <dt>H5T_NATIVE_UCHAR
                <dd> Native unsigned character type, declare dataset array as 'unsigned char'
            <dt>H5T_NATIVE_SHORT
                <dd> Native short type, declare dataset array as 'short'
            <dt>H5T_NATIVE_USHORT
                <dd> Native unsigned short type, declare dataset array as 'unsigned short'
            <dt>H5T_NATIVE_INT
                <dd> Native int type, declare dataset array as 'int'
            <dt>H5T_NATIVE_UINT
                <dd> Native unsigned int type, declare dataset array as 'unsigned int'
            <dt>H5T_NATIVE_LONG
                <dd> Native long type, declare dataset array as 'unsigned long'
            <dt>H5T_NATIVE_ULONG
                <dd> Native unsigned long type, declare dataset array as 'unsigned long'
            <dt>H5T_NATIVE_LLONG
                <dd> Native long long type, declare dataset array as 'unsigned long long'
            <dt>H5T_NATIVE_ULLONG
                <dd> Native unsigned long long type, declare dataset array as 'unsigned long long'
            <dt>H5T_NATIVE_INT8
                <dd> Native signed 8-bit type, declare dataset array as 'int8'
            <dt>H5T_NATIVE_UINT8
                <dd> Native unsigned 8-bit type, declare dataset array as 'uint8'
            <dt>H5T_NATIVE_INT16
                <dd> Native signed 16-bit type, declare dataset array as 'int16'
            <dt>H5T_NATIVE_UINT16
                <dd> Native unsigned 16-bit type, declare dataset array as 'uint16'
            <dt>H5T_NATIVE_INT32
                <dd> Native signed 32-bit type, declare dataset array as 'int32'
            <dt>H5T_NATIVE_UINT32
                <dd> Native unsigned 32-bit type, declare dataset array as 'uint32'
            <dt>H5T_NATIVE_INT64
                <dd> Native signed 64-bit type, declare dataset array as 'uint64'
            <dt>H5T_NATIVE_UINT64
                <dd> Native unsigned 64-bit type, declare dataset array as 'uint64'
            <dt>H5T_NATIVE_FLOAT
                <dd> Native single-precision float type, declare dataset array as 'float'
            <dt>H5T_NATIVE_DOUBLE
                <dd> Native double-precision float type, declare dataset array as 'double'
            <dt>H5T_NATIVE_HSIZE
                <dd> Native size_t type, declare dataset array as 'hsize_t'
            <dt>H5T_NATIVE_HSSIZE
                <dd> Native signed size_t type, declare dataset array as 'hssize_t'
            <dt>H5T_NATIVE_HERR
                <dd> Native error type, declare dataset array as 'herr_t'
            <dt>H5T_NATIVE_HBOOL
                <dd> Native boolean type, declare dataset array as 'hbool_t'
        </dl> </ul>
-->

<p>
<dt><strong>Parameters:</strong>
    <dd><table>
        <tr>
            <td valign="top"><em>hid_t</em>&nbsp;<code>dtype_id&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
            <td valign="top">IN: Identifier of datatype to copy.  
                Can be a datatype identifier, a predefined datatype (defined in 
                <code>H5Tpublic.h</code>), or a dataset identifier.</td></tr>
    </table></dd>

<p>
<dt><strong>Returns:</strong>
    <dd>Returns a datatype identifier if successful;
        otherwise returns a negative value

<p>
<dt><strong>See Also:</strong>
    <dd>If <code>dtype_id</code> is to be a variable-length string datatype,
        see &ldquo;<a href="RM_H5T.html#CreateVLString">Creating 
        variable-length string datatypes</a>.&rdquo; 

<p>
<dt><strong>Fortran90 Interface:</strong> h5tcopy_f
    <dd>
    <pre>
SUBROUTINE h5tcopy_f(type_id, new_type_id, hdferr) 
  IMPLICIT NONE
  INTEGER(HID_T), INTENT(IN) :: type_id      ! Datatype identifier 
  INTEGER(HID_T), INTENT(OUT) :: new_type_id ! Identifier of datatype's copy 
  INTEGER, INTENT(OUT) :: hdferr             ! Error code
                                             ! 0 on success and -1 on failure
END SUBROUTINE h5tcopy_f
    </pre>

  <dt><strong>See Also:</a></strong></dt>
    <dd>
    <a href="http://www.hdfgroup.org/HDF5/doc/Advanced/UsingIdentifiers/index.html">
    &ldquo;Using Identifiers&rdquo;</a></dd>

</dl>

