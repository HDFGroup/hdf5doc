

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Tregister" -->
<hr>
<dl>

<dt><div align=right><font color=999999 size=-1><i>
    Last modified: 16 September 2014
    </i></font></div>

<dt><strong>Name:</strong> <a name="Datatype-Register">H5Tregister</a>
<dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Tregister</code>(
        <em>H5T_pers_t</em> <code>type</code>, 
        <em>const char *</em> <code>name</code>, 
        <em>hid_t </em><code>src_id</code>,
        <em>hid_t</em> <code>dst_id</code>,
        <em>H5T_conv_t</em> <code>func</code>
    )

<p>
<dt><strong>Purpose:</strong>
    <dd>Registers a conversion function.

<p>
<dt><strong>Description:</strong>
    <dd><code>H5Tregister</code> registers a hard or soft conversion function 
        for a datatype conversion path.  
        <p>
        The parameter <code>type</code> indicates whether a conversion function 
        is <em>hard</em> (<code>H5T_PERS_HARD</code>) 
        or <em>soft</em> (<code>H5T_PERS_SOFT</code>).
        User-defined functions employing compiler casting are designated as 
        <em>hard</em>;
        other user-defined conversion functions registered with the 
        HDF5 Library (with <code>H5Tregister</code>) are designated 
        as <em>soft</em>.
        The HDF5 Library also has its own <em>hard</em> and <em>soft</em>
        conversion functions.
        <p>
        A conversion path can have only one hard function.
        When <code>type</code> is <code>H5T_PERS_HARD</code>, 
        <code>func</code> replaces any previous hard function.
        <p>
        When <code>type</code> is <code>H5T_PERS_SOFT</code>, 
        <code>H5Tregister</code> 
        adds the function to the end of the master soft list and replaces 
        the soft function in all applicable existing conversion paths. 
        Soft functions are used when determining which conversion function 
        is appropriate for this path.  
        <p>
        The <code>name</code> is used only for debugging and should be a 
        short identifier for the function.  
        <p>
        The path is specified by the source and destination datatypes 
        <code>src_id</code> and <code>dst_id</code>.  
        For soft conversion functions, only the class of these types is important.
        <p>
        The type of the conversion function pointer is declared as:
        <dir>
<pre><code>typedef</code> <em>herr_t </em>(<code>*H5T_conv_t</code>) (<em>hid_t </em><code>src_id</code>, 
                              <em>hid_t </em><code>dst_id</code>, 
                              <em>H5T_cdata_t *</em><code>cdata</code>,
                              <em>size_t </em><code>nelmts</code>, 
                              <em>size_t </em><code>buf_stride</code>, 
                              <em>size_t </em><code>bkg_stride</code>, 
                              <em>void *</em><code>buf</code>, 
                              <em>void *</em><code>bkg</code>,
                              <em>hid_t </em><code>dset_xfer_plist</code>)</pre>
        </dir>
        <p>
        The <code>H5T_cdata_t</code> struct is declared as:
        <dir>
<pre><code>typedef</code> <em>struct </em><code>*H5T_cdata_t</code> (<em>H5T_cmd_t </em><code>command</code>, 
                             <em>H5T_bkg_t </em><code>need_bkg</code>, 
                             <em>hbool_t *</em><code>recalc</code>,
                             <em>void *</em><code>priv</code>)</pre>
        </dir>

  <p>
  <dt><strong>Programming Note for C++ Developers Using C Functions:</strong>
    <dd>
      <p>If a C routine that takes a function pointer as an argument is 
      called from within C++ code, the C routine should be returned from 
      normally. </p>

      <p>Examples of this kind of routine include callbacks such as 
      <code>H5Pset_elink_cb</code> and <code>H5Pset_type_conv_cb</code> 
      and functions such as <code>H5Tconvert</code> and 
      <code>H5Ewalk2</code>.</p>

      <p>Exiting the routine in its normal fashion allows the HDF5 C 
      Library to clean up its work properly. In other words, if the C++ 
      application jumps out of the routine back to the C++ 
      &ldquo;catch&rdquo; statement, the library is not given the 
      opportunity to close any temporary data structures that were set 
      up when the routine was called. The C++ application should save 
      some state as the routine is started so that any problem that 
      occurs might be diagnosed.</p>



<p>
<!-- NEW PAGE -->
<dt><strong>Parameters:</strong>
    <dd><table>
        <tr>
            <td valign="top"><em>H5T_pers_t</em> <code>type</code></td>
            <td valign="top">IN: Conversion function type:<br>
                <code>&nbsp;&nbsp;</code><code>H5T_PERS_HARD</code> 
                for hard conversion functions 
                <br>
                <code>&nbsp;&nbsp;</code><code>H5T_PERS_SOFT</code> 
                for soft conversion functions
                </td></tr>
        <tr>
            <td valign="top"><em>const char *</em> <code>name</code></td>
            <td valign="top">IN: Name displayed in diagnostic output</td></tr>
        <tr>
            <td valign="top"><em>hid_t</em> <code>src_id</code></td>
            <td valign="top">IN: Identifier of source datatype</td></tr>
        <tr>
            <td valign="top"><em>hid_t</em> <code>dst_id</code></td>
            <td valign="top">IN: Identifier of destination datatype</td></tr>
        <tr>
            <td valign="top"><em>H5T_conv_t</em>&nbsp;<code>func&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
            <td valign="top">IN: Function to convert between source and 
                destination datatypes</td></tr>
    </table></dd>

<p>
<dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.

<p>
<dt><strong>Fortran90 Interface:</strong>
    <dd>None.
<!--
    <pre>
    </pre>
-->

<p>
<dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.6.3</td>
          <td valign="top">
            The following change occurred in the 
            <code>H5Tconv_t</code> function:<br>
            &nbsp;&nbsp;
            <code>nelmts</code> parameter type changed to 
            <em>size_t</em>.</td></tr>
    </table></dd>
</dl>

