

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Tencode" -->
<hr>
<dl>
<dt><strong>Name:</strong> <a name="Datatype-Encode">H5Tencode</a>
<dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Tencode</code>(<em>hid_t</em> 
      <code>obj_id</code>, <em>unsigned char *</em><code>buf</code>, 
      <em>size_t *</em><code>nalloc</code>)
<dt><strong>Purpose:</strong>
    <dd>Encode a datatype object description into a binary buffer.
<dt><strong>Description:</strong>
    <dd>Given datatype identifier, <code>H5Tencode</code> converts a data 
      type description into binary form in a buffer.  Using this 
      binary form in the buffer, a datatype object can be reconstructed 
      using <code>H5Tdecode</code> to return a new object handle
      (<em>hid_t</em>) for this datatype.
      <p>A preliminary <code>H5Tencode</code> call can be made to find 
      out the size of the buffer needed. This value is returned as 
      <code>nalloc</code>. That value can then be assigned to 
      <code>nalloc</code> for a second <code>H5Tencode</code> call, 
      which will retrieve the actual encoded object.
      <p>If the library finds out <code>nalloc</code> is not big 
      enough for the object, it simply returns the size of the buffer 
      needed through <code>nalloc</code> without encoding the provided buffer.

<dt><strong>Parameters:</strong>
    <ul>
      <table>
        <tr>
            <td valign="top"><em>hid_t</em> <code>obj_id</code></td>
            <td valign="top">IN: Identifier of the object to be 
	      encoded.</td>
	</tr>
        <tr>
            <td valign="top"><em>unsigned&nbsp;char&nbsp;*</em><code>buf</code>&nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN/OUT: Buffer for the object to be 
	      encoded into.  If the provided buffer is NULL, only 
	      the size of buffer needed is returned through <code>nalloc</code>.
              </td>
	</tr>
        <tr>
            <td valign="top"><em>size_t *</em><code>nalloc</code></td>
            <td valign="top">IN: The size of the allocated buffer.
	      <br>OUT: The size of the buffer needed.</td>
	</tr>
      </table>
    </ul>
<dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful; 
      otherwise returns a negative value.
<dt><strong>Fortran90 Interface:</strong> h5tencode_f
    <dd><pre>
SUBROUTINE h5tencode_f(obj_id, buf, nalloc, hdferr)
  IMPLICIT NONE
  INTEGER(HID_T), INTENT(IN) :: obj_id ! Identifier of the object to be encoded
  CHARACTER(LEN=*), INTENT(OUT) :: buf ! Buffer object to be encoded into
  INTEGER(SIZE_T), INTENT(INOUT) :: nalloc 
                                       ! The size of the allocated buffer
  INTEGER, INTENT(OUT) :: hdferr       ! Error code
                                       ! 0 on success and -1 on failure
END SUBROUTINE h5tencode_f
    </pre></dd>
</dl>

