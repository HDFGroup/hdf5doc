

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lexists" -->
<hr>
<dl>
<dt><div align=right><font color=999999 size=-1><i>
      Last modified: 10 April 2009
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-Exists">H5Lexists</a>
  <dt><strong>Signature:</strong>
    <dd><em>htri_t</em> <code>H5Lexists</code>(
        <em>hid_t</em> <code>loc_id</code>, 
        <em>const char *</em><code>name</code>, 
        <em>hid_t</em> <code>lapl_id</code>
    )

  <p>
  <dt><strong>Purpose:</strong>
    <dd>Determine whether a link with the specified name exists in a group.

  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Lexists</code> allows an application to determine whether 
        the link <code>name</code> exists in 
        the group or file specified with <code>loc_id</code>.  
        The link may be of any type;
        only the presence of a link with that name is checked.

        <p>
        Note that <code>H5Lexists</code> verifies only that the target 
        link exists.
        If <code>name</code> includes either a relative path or 
        an absloute path to the target link, intermediate steps along the 
        path must be verified before the existence of the target link 
        can be safely checked.  
        If the path is not verified and an intermediate element of the path 
        does not exist, <code>H5Lexists</code> will fail. 
        The example in the next paragraph illustrates one step-by-step
        method for verifying the existence of a link with a relative 
        or absolute path.

        <p>
        <b>Example:</b> Use the following steps to verify the existence 
        of the link <code>datasetD</code> 
        in the group <code>group1/group2/softlink_to_group3/</code>, 
        where <code>group1</code> is a member of
        the group specified by <code>loc_id</code>:
        <ul>
            <p>
            <li>First use <code>H5Lexists</code> to verify that
                <code>group1</code> exists.
            <li>If <code>group1</code> exists, 
                use <code>H5Lexists</code> again, this time
                with <code>name</code> set to <code>group1/group2</code>, 
                to verify that<code>group2</code> exists.
            <li>If <code>group2</code> exists, 
                use <code>H5Lexists</code> with <code>name</code> 
                set to <code>group1/group2/softlink_to_group3</code> 
                to verify that <code>softlink_to_group3</code> exists.
                <br>&nbsp;
            <li>If <code>softlink_to_group3</code> exists, 
                you can now safely use <code>H5Lexists</code>
                with <code>name</code> set to 
                <code>group1/group2/softlink_to_group3/datasetD</code>
                to verify that the target link, <code>datasetD</code>, exists.
        </ul>
        <p>
        If the link to be verified is specified with an absolute path,
        the same approach should be used, but starting with the 
        first link in the file&rsquo;s root group. 
        For instance, if <code>datasetD</code> were in 
        <code>/group1/group2/softlink_to_group3</code>, the first call to
        <code>H5Lexists</code> would have <code>name</code> set to 
        <code>/group1</code>.
        <p>
        Note that this is an outline and does not include all 
        necessary details.  Depending on circumstances, for example, 
        you may need to verify that an intermediate link points to 
        a group and that a soft link points to an existing target.

  <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>hid_t</em> <code>loc_id</code>
        </td>
        <td valign="top">IN: Identifier of the file or group to query.
        </td></tr>
      <tr>
        <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>name</code>&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
        <td valign="top">IN: The name of the link to check.
        </td></tr>
      <tr>
        <td valign="top"><em>hid_t</em> <code>lapl_id</code>
        </td>
        <td valign="top">IN: Link access property list identifier.
        </td></tr>
    </table>

  <p>
  <dt><strong>Returns:</strong>
    <dd>Returns <code>TRUE</code> or <code>FALSE</code> if successful;
        otherwise returns a negative value.

<!-- NEW PAGE -->
  <p>
  <dt><strong>Failure Modes:</strong>
    <dd><code>H5Lexists</code> checks the existence of only the final 
        element in a relative or absolute path; it does not check
        any other path elements.
        The function will therefore fail when both of the following 
        conditions exist:
        <ul>
            <li><code>name</code> is not local to the group specified 
                by <code>loc_id</code> 
                or, if <code>loc_id</code> is something other than a 
                group identifier,  <code>name</code> is not local to 
                the root group.
            <li>Any element of the relative path or absolute path in
                <code>name</code>, except the target link, does not exist.
        </ul>

  <p>
  <dt><strong>Fortran90 Interface:</strong> h5lexists_f
    <dd>
    <pre>
SUBROUTINE h5lexists_f(loc_id, name, link_exists, hdferr, lapl_id)
  IMPLICIT NONE
  INTEGER(HID_T), INTENT(IN) :: loc_id ! Identifier of file or group to query.
  CHARACTER(LEN=*), INTENT(IN) :: name ! Link name to check.
  LOGICAL, INTENT(OUT) :: link_exists  ! .TRUE. if exists, .FALSE. otherwise
  INTEGER, INTENT(OUT) :: hdferr       ! Error code:
                                       ! 0 on success and -1 on failure
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lapl_id 
                                       ! Link access property list identifier.
END SUBROUTINE h5lexists_f 
    </pre>

  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>


