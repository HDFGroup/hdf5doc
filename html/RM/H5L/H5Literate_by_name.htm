<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Literate_by_name" -->
<hr>
<dl>
  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 12 August 2009
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-IterateByName">H5Literate_by_name</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Literate_by_name</code>(
        <em>hid_t</em> <code>loc_id</code>,
        <em>const char *</em><code>group_name</code>,
        <em>H5_index_t</em> <code>index_type</code>,
        <em>H5_iter_order_t</em> <code>order</code>,
        <em>hsize_t</em> *<code>idx</code>,
        <em>H5L_iterate_t</em> <code>op</code>,
        <em>void</em> *<code>op_data</code>,
        <em>hid_t</em> *<code>lapl_id</code>
    )
  <p>
  <dt><strong>Purpose:</strong>
    <dd>Iterates through links in a group.
  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Literate_by_name</code> iterates through the links 
      in a group, specified by <code>loc_id</code> and <code>group_name</code>,
      in the order of the specified index, <code>index_type</code>,
      using a user-defined callback routine <code>op</code>.
      <code>H5Literate_by_name</code> does not recursively follow links into 
      subgroups of the specified group.
      <p>
      <code>index_type</code> specifies the index to be used.
      If the links have not been indexed by the index type, they will first
      be sorted by that index then the iteration will begin; 
      if the links have been so indexed, the sorting step will be 
      unnecesary, so the iteration may begin more quickly.
      Valid values include the following:
        <table border=0>
          <tr><td>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_NAME</code>
            </td><td valign=top>
            Alpha-numeric index on name 
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_CRT_ORDER&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td valign=top>
            Index on creation order 
          <!-- H5_INDEX_N is used internally by the Library -->
          <!--
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_N</code>
            </td><td valign=top>
            Number of indices defined
          -->
          </td></tr>
        </table>
      <p>
      <code>order</code> specifies the order in which objects are to be
      inspected along the index specified in <code>index_type</code>.  
      Valid values include the following:
        <table border=0>
          <tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_INC</code>
            </td><td valign=top>
            Increasing order 
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_DEC</code>
            </td><td valign=top>
            Decreasing order
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_NATIVE&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td valign=top>
            Fastest available order
          <!-- H5_INDEX_N is used internally by the Library -->
          <!--
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_N</code>
            </td><td valign=top>
            Number of iteration orders defined 
          -->
          </td></tr>
        </table>
      <p>
      <code>idx</code> allows an interrupted iteration to be resumed;
      it is passed in by the application with a starting point and 
      returned by the library with the point at which the iteration stopped. 
      <p>
      <code>H5Literate_by_name</code> is not recursive. 
      In particular, if a member of <code>group_name</code> is found to be 
      a group, call it <code>subgroup_a</code>, <code>H5Literate_by_name</code>
      does not examine the members of <code>subgroup_a</code>.
      When recursive iteration is required, the application must handle 
      the recursion, explicitly calling <code>H5Literate_by_name</code> 
      on discovered subgroups.
      <p>
      <code>H5Literate_by_name</code> assumes that the membership of the group 
      being iterated over remains unchanged through the iteration;  
      if any of the links in the group change during the iteration, 
      the function&rsquo;s behavior is undefined.  
      Note, however, that objects pointed to by the links can be modified.
      <p>
      <code>H5Literate_by_name</code> is the same as <code>H5Giterate</code>,
      except that <code>H5Giterate</code> always proceeds in alphanumeric 
      order.
  <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>hid_t</em> <code>loc_id</code></td>
        <td valign="top">IN: File or group identifier specifying location 
            of subject group</td></tr>
      <tr>
        <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>group_name&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
        <td valign="top">IN: Name of subject group</td></tr>
      <tr>
        <td valign="top"><em>H5_index_t</em> <code>index_type</code></td>
        <td valign="top">IN: Type of index which determines the order </td></tr>
      <tr>
        <td valign="top"><em>H5_iter_order_t</em> <code>order</code></td>
        <td valign="top">IN: Order within index</td></tr>
      <tr>
        <td valign="top"><em>hsize_t *</em><code>idx</code></td>
        <td valign="top">IN: Iteration position at which to start 
            <br>
            OUT: Position at which an interrupted iteration may be restarted
            </td></tr>

<!-- NEW PAGE -->

      <tr>
        <td valign="top"><em>H5L_iterate_t</em> <code>op</code></td>
        <td valign="top">IN: Callback function passing data regarding the 
            link to the calling application</td></tr>
      <tr>
        <td valign="top"><em>void *</em><code>op_data</code></td>
        <td valign="top">IN: User-defined pointer to data required
            by the application for its processing of the link</td></tr>
      <tr>
        <td valign="top"><em>hid_t</em> <code>lapl_id</code></td>
        <td valign="top">IN: Link access property list</td></tr>
    </table>
  <p>
  <dt><strong>Returns:</strong>
    <dd>On success, returns the return value of the first operator that
        returns a positive value, or zero if all members were processed 
        with no operator returning non-zero.
        <p>
        On failure, returns a negative value if something goes wrong within 
        the library, or the first negative value returned by an operator.
  <p>
  <dt><strong>Fortran90 Interface:</strong> <!-- h5lfunc_f -->
    <dd>None.
<!--
    <pre>
  
    </pre>
-->
 
  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>


