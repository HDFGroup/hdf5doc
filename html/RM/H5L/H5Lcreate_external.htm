

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lcreate_external" -->
<hr>
<dl>
  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 18 June 2013
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-CreateExternal">H5Lcreate_external</a> 
  <dt><strong>Signature:</strong>
    
  <dd><em>herr_t</em> <code>H5Lcreate_external</code>(
      <em>const char *</em><code>target_file_name</code>,
      <em>const char *</em><code>target_obj_name</code>,
      <em>hid_t</em> <code>link_loc_id</code>, 
      <em>const char *</em><code>link_name</code>,
      <em>hid_t</em> <code>lcpl_id</code>, 
      <em>hid_t</em> <code>lapl_id</code> 
      ) 

  <p></p>
  <dt><strong>Purpose:</strong>
    <dd>Creates an external link, a soft link to an object in a different file.

  <p></p>
  <dt><strong>Description:</strong>  
    <dd><code>H5Lcreate_external</code> creates a new external link.
      An external link is a soft link to an object in a different HDF5 file
      from the location of the link, i.e., to an external object.
      <p>
      <code>target_file_name</code> identifies the target file containing the 
      target object;
      <code>target_obj_name</code> specifies the path of the target object
      within that file.
      <code>target_obj_name</code> must be an absolute pathname in 
      <code>target_file_name</code>, i.e., it must start at the target 
      file&rsquo;s root group, but it is not interpreted until an application 
      attempts to traverse it. 
      <p>
      <code>link_loc_id</code> and <code>link_name</code> specify the 
      location and name, respectively, of the new link.
      <code>link_name</code> is interpreted relative to 
      <code>link_loc_id</code> 
      <p>
      <code>lcpl_id</code> is the link creation property list used in creating 
      the new link.
      <p> 
      <code>lapl_id</code> is the link access property list used in traversing 
      the new link.
      Note that an external file opened by the traversal of an external link 
      is always opened with the weak file close degree property setting, 
      <code>H5F_CLOSE_WEAK</code> (see
      <a href="RM_H5P.html#Property-SetFcloseDegree"><code>H5Pset_fclose_degree</code></a>); 
      any file close degree property setting in <code>lapl_id</code>
      is ignored.
      <p> 
      An external link behaves similarly to a soft link, and like
      a soft link in an HDF5 file, it may <i>dangle</i>: the target file
      and object need not exist at the time that the external link is created.
      <p>
      When the external link <code>link_name</code> is accessed,
      the library will search for the target file <code>target_file_name</code> 
      as described below:
      <ul>
          <li>If <code>target_file_name</code> is a relative pathname, the 
              following steps are performed:
	      <ul>
	          <li>The library will get the prefix(es) set in the 
                      environment variable <code>HDF5_EXT_PREFIX</code> and 
                      will try to prepend each prefix to 
                      <code>target_file_name</code> 
                      to form a new <code>target_file_name</code>.
	          <li>If the new <code>target_file_name</code> does not exist 
                      or if <code>HDF5_EXT_PREFIX</code> is not set, 
	              the library will get the prefix set via 
                      <a href="RM_H5P.html#Property-SetELinkPrefix">
                      <code>H5Pset_elink_prefix</code></a> and 
	              prepend it to <code>target_file_name</code>
	              to form a new <code>target_file_name</code>.
	          <li>If the new <code>target_file_name</code> does not exist 
                      or no prefix is being set 
	              by <a href="RM_H5P.html#Property-SetELinkPrefix">
                      <code>H5Pset_elink_prefix</code></a>,
	              then the path of the file associated with 
                      <code>link_loc_id</code> is obtained.
	              This path can be the absolute path or the 
                      current working directory plus the relative path
	              of that file when it is created/opened.
	              The library will 
                      prepend this path to <code>target_file_name</code> 
                      to form a new <code>target_file_name</code>.
	          <li>If the new <code>target_file_name</code> does not exist, 
                      then the library will look for 
                      <code>target_file_name</code> 
                      and will return failure/success accordingly.
	      </ul>
          <p>
          <li>If <code>target_file_name</code> is an absolute pathname, the 
              library will first try to find <code>target_file_name</code>.
              If <code>target_file_name</code> does not exist, 
              <code>target_file_name</code> is stripped of directory paths 
              to form a new <code>target_file_name</code>.   
              The search for the new <code>target_file_name</code> then follows 
              the same steps as described above for a relative pathname.
              See examples below illustrating how <code>target_file_name</code> 
              is stripped to form a new <code>target_file_name</code>.
      </ul>

      <p>
      Note that <code>target_file_name</code> is considered to be an absolute 
      pathname when the following condition is true:
      <ul>
          <li>For Unix, the first character of <code>target_file_name</code> 
              is a slash ( <code>/</code> ). 
              <p>
              For example, consider a <code>target_file_name</code> 
              of <code>/tmp/A.h5</code>.
              If that target file does not exist, 
              the new <code>target_file_name</code> after stripping 
              will be <code>A.h5</code>.
          <li>For Windows, there are 6 cases:
	      <ol>
	          <li><code>target_file_name</code> is an absolute drive with 
                      absolute pathname. 
                      <p>
                      For example, consider a <code>target_file_name</code> 
                      of <code>/tmp/A.h5</code>.
                      If that target file does not exist, 
	              the new <code>target_file_name</code> after stripping 
                      will be <code>A.h5</code>.
	          <li><code>target_file_name</code> is an absolute pathname 
                      without specifying drive name. 
                      <p>
                      For example, consider a <code>target_file_name</code> 
                      of <code>/tmp/A.h5</code>.
                      If that target file does not exist, 
                      the new <code>target_file_name</code> after stripping 
                      will be <code>A.h5</code>.
	          <li><code>target_file_name</code> is an absolute drive with 
                      relative pathname. 
                      <p>
                      For example, consider a <code>target_file_name</code> 
                      of <code>/tmp/A.h5</code>.
                      If that target file does not exist, 
                      the new <code>target_file_name</code> after stripping 
                      will be <code>tmp\A.h5</code>.
                  <li><code>target_file_name</code> is in UNC (Uniform Naming
                      Convention) format with server name, share name, 
                      and pathname. 
                      <p>
                      For example, consider a <code>target_file_name</code> 
                      of <code>/tmp/A.h5</code>.
                      If that target file does not exist, 
                      the new <code>target_file_name</code> after stripping 
                      will be <code>A.h5</code>.</p>
                      </li>
                  <li><code>target_file_name</code> is in Long UNC 
                      (Uniform Naming Convention) format with server name, 
                      share name, and pathname. 
                      <p>
                      For example, consider a <code>target_file_name</code> 
                      of <code>/tmp/A.h5</code>.
                      If that target file does not exist, 
                      the new <code>target_file_name</code> after stripping 
                      will be <code>A.h5</code>
                      </li>
                  <li><code>target_file_name</code> is in Long UNC 
                      (Uniform Naming Convention) format with an absolute drive 
                      and an absolute pathname. 
                      <p>
                      For example, consider a <code>target_file_name</code> 
                      of <code>/tmp/A.h5</code>.
                      If that target file does not exist, 
                      the new <code>target_file_name</code> after stripping 
                      will be <code>A.h5</code>
              </ol>
      </ul>
      <p>	
      The library opens target file <code>target_file_name</code> 
      with the file access property list that is set via 
      <a href="RM_H5P.html#Property-SetELinkFapl"> 
      <code>H5Pset_elink_fapl</code></a>
      when the external link <code>link_name</code> is accessed.
      If no such property list is set, the library uses the 
      file access property list associated with the file of
      <code>link_loc_id</code> to open the target file.
      <p>
      If an application requires additional control over file access flags
      or the file access property list, see 
      <a href="RM_H5P.html#Property-SetELinkCb">
      <code>H5Pset_elink_cb</code></a>; this function enables the use of an 
      external link callback function as described in
      <a href="H5L/H5L_elink_traverse_t.htm">
      <code>H5L_elink_traverse_t</code></a>.
      <p>
      <strong>Restriction:</strong>
      A file close degree property setting 
      (<a href="RM_H5P.html#Property-SetFcloseDegree"><code>H5Pset_fclose_degree</code></a>)
      in the external link file access property list 
      or in the external link callback function will be ignored.  
      A file opened by means of traversing an external link 
      is always opened with the weak file close degree property setting,
      <code>H5F_CLOSE_WEAK</code>.


<!-- NEW PAGE -->

  <p></p>
  <dt><strong>Parameters:</strong>
    <dd><table>
          <tr>
            <td valign="top"><em>const char *</em> <code>target_file_name</code>
                </td>
            <td valign="top">IN: Name of the target file containing the 
                target object</td></tr>
          <tr>
            <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>target_obj_name&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
            <td valign="top">IN: Path within the target file to the target 
                object</td></tr>
          <tr>
            <td valign="top"><em>hid_t</em> <code>link_loc_id</code></td>
            <td valign="top">IN: File or group identifier where the 
                new link is to be created</td></tr>
          <tr>
            <td valign="top"><em>const char *</em> <code>link_name</code></td>
            <td valign="top">IN: Name of the new link, 
                relative to <code>link_loc_id</code></td></tr>
          <tr>
            <td valign="top"><em>hid_t</em> <code>lcpl_id</code></td> 
            <td valign="top">IN: Link creation property list 
                identifier</td></tr>
          <tr>
            <td valign="top"><em>hid_t</em> <code>lapl_id</code></td> 
            <td valign="top">IN: Link access property list 
                identifier</td></tr>
      </table>

  <p></p>
  <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.

  <p></p>
  <dt><strong>Fortran90 Interface:</strong> h5lcreate_external_f
    <dd>
    <pre>
SUBROUTINE h5lcreate_external_f(file_name, obj_name, link_loc_id, link_name, &
	                        hdferr, lcpl_id, lapl_id) 
  IMPLICIT NONE
  CHARACTER(LEN=*), INTENT(IN) :: file_name  
                       ! Name of the file containing the target object. Neither 
                       ! the file nor the target object is required to exist. 
                       ! May be the file the link is being created in.
  CHARACTER(LEN=*), INTENT(IN) :: obj_name  
                       ! Name of the target object, which need not already exist.
  INTEGER(HID_T), INTENT(IN) :: link_loc_id 
                       ! The file or group identifier for the new link.
  CHARACTER(LEN=*), INTENT(IN) :: link_name 
                       ! The name of the new link.
  INTEGER, INTENT(OUT) :: hdferr        
                       ! Error code: 
                       ! 0 on success and -1 on failure
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lcpl_id 
                       ! Link creation property list identifier.
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lapl_id 
                       ! Link access property list identifier.
END SUBROUTINE h5lcreate_external_f
    </pre>

  <p></p>
  <dt><strong>See Also:</strong>
    <dd><a href="RM_H5P.html#Property-SetELinkFapl">
        <code>H5Pset_elink_fapl</code></a>,
        &nbsp;
        <a href="RM_H5P.html#Property-SetELinkCb">
        <code>H5Pset_elink_cb</code></a> 
        <p>

        <a href="H5L/H5L_elink_traverse_t.htm">
        <code>H5L_elink_traverse_t</code></a>

  <p></p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>


