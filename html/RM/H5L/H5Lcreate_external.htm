<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lcreate_external" -->
<hr>
<dl>
  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 11 August 2009
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-CreateExternal">H5Lcreate_external</a>
  </dt>
  <dt><strong>Signature:</strong></dt>
    <dd><em>herr_t</em> <code>H5Lcreate_external</code>( 
        <em>const  char *</em><code>file_name</code>, 
        <em>const char *</em><code>object_name</code>,
        <em>hid_t</em> <code>link_loc_id</code>, 
        <em>const char *</em><code>link_name</code>,
        <em>hid_t</em> <code>lcpl_id</code>, 
        <em>hid_t</em> <code>lapl_id</code>
      )
      <p></p>
    </dd>
  <dt><strong>Purpose:</strong></dt>
    <dd>Creates a soft link to an object in a different file.
      <p></p>
    </dd>
  <dt><strong>Description:</strong></dt>
    <dd><code>H5Lcreate_external</code> creates a new soft link to an
      external object, which is an object in a different HDF5 file from the
      location of the link.
      <p><code>file_name</code> identifies the target file containing
      the target object; <code>object_name</code> specifies the path of the
      target object within that file. <code>object_name</code> must start at
      the target file&rsquo;s root group but is not interpreted until lookup
      time.</p>
      <p><code>link_loc_id</code> and <code>link_name</code> specify the
      location and name, respectively, of the new link. <code>link_name</code>
      is interpreted relative to <code>link_loc_id</code></p>
      <p><code>lcpl_id</code> is the link creation property list used in
      creating the new link.</p>
      <p><code>lapl_id</code> is the link access property list used in
      traversing to the place where the new link is to be created.</p>
      <p>An external link behaves similarly to a soft link, and like a
      soft link in an HDF5 file, it may <i>dangle</i>: the target file and
      object need not exist at the time that the external link is created.</p>
      <p>When the external link <code>link_name</code> is accessed, the
      library will search for the target file <code>file_name</code> as
      described below:</p>
      <ul>
        <li>If <code>file_name</code> is a relative pathname, the
        following steps are performed:
        <ul>
          <li>The library will get the prefix(es) set in the
          environment variable HDF5_EXT_PREFIX and will try prepending each
          prefix to <code>file_name</code> to form a new <code>file_name</code>.</li>
          <li>If the new <code>file_name</code> does not exist or
          HDF5_EXT_PREFIX is not set, the library will get the prefix set
          via <a href="RM_H5P.html#Property-SetELinkPrefix"> <code>H5Pset_elink_prefix</code></a>
          and prepend it to <code>file_name</code> to form a new <code>file_name</code>.
          </li>
          <li>If the new <code>file_name</code> does not exist or no
          prefix is being set by <a
            href="RM_H5P.html#Property-SetELinkPrefix"> <code>H5Pset_elink_prefix</code></a>,
          then the path of the file associated with <code>link_loc_id</code>
          is obtained. This path can be the absolute path or the current
          working directory+relative path of that file when it is
          created/opened. The library will prepend this path to <code>file_name</code>
          to form a new <code>file_name</code>.</li>
          <li>If the new <code>file_name</code> does not exist, then
          the library will look for <code>file_name</code> and will return
          failure/success accordingly.</li>
        </ul>
        <p></p>
        </li>
        <li>If <code>file_name</code> is an absolute pathname, the
        library will try to find <code>file_name</code>. If <code>file_name</code>
        does not exist, the <code>file_name</code> is stripped of the
        directory paths to form a new <code>file_name</code>. See examples
        below on how <code>file_name</code> is stripped to form a new <code>file_name</code>.
        The search for the new <code>file_name</code> then follows the same
        steps as described above for a relative pathname.</li>
      </ul>
      <p>Note that <code>file_name</code> is considered to be an
      absolute pathname when the following condition is true:</p>
      <ul>
        <li>For Unix, the first character of <code>file_name</code> is
        a '/' , e.g. "/tmp/A.h5".
        <p>If <code>file_name</code> does not exist, the new <code>file_name</code>
        after stripping <code>file_name</code> will be "A.h5".</p>
        </li>
        <li>For Windows, there are 6 cases:
        <ol>
          <li><code>file_name</code> is an absolute drive with absolute
          pathname, e.g. "C:\tmp\A.h5".
          <p>If <code>file_name</code> does not exist, the new <code>file_name</code>
          after stripping <code>file_name</code> will be "A.h5".</p>
          </li>
          <li><code>file_name</code> is an absolute pathname without
          specifying drive name, e.g. "\tmp\A.h5".
          <p>If <code>file_name</code> does not exist, the new <code>file_name</code>
          after stripping <code>file_name</code> will be "A.h5".</p>
          </li>
          <li><code>file_name</code> is an absolute drive with relative
          pathname, e.g. "C:tmp\A.h5".
          <p>If <code>file_name</code> does not exist, the new <code>file_name</code>
          after stripping <code>file_name</code> will be "tmp\A.h5".</p>
          </li>
          <li><code>file_name</code> is in UNC (Uniform Naming
          Convention) format with server name, share name, and pathname, <br />
          e.g. "\\serverA\shareB\tmp\A.h5".
          <p>If <code>file_name</code> does not exist, the new <code>file_name</code>
          after stripping <code>file_name</code> will be "A.h5".</p>
          </li>
          <li><code>file_name</code> is in Long UNC (Uniform Naming
          Convention) format with server name, share name, and pathname, <br />
          e.g. "\\?\serverA\shareB\tmp\A.h5".
          <p>If <code>file_name</code> does not exist, the new <code>file_name</code>
          after stripping <code>file_name</code> will be "A.h5".</p>
          </li>
          <li><code>file_name</code> is in Long UNC (Uniform Naming
          Convention) format with an absolute drive with absolute pathname,
          <br />
          e.g. "\\?\C:\tmp\A.h5".
          <p>If <code>file_name</code> does not exist, the new <code>file_name</code>
          after stripping <code>file_name</code> will be "A.h5".</p>
          </li>
        </ol>
        </li>
      </ul>
      <p>The library opens the target file <code>file_name</code> with
      the file access property list that is set via 
      <a href="RM_H5P.html#Property-SetELinkFapl">
      <code>H5Pset_elink_fapl</code></a>
      when the external link <code>link_name</code> is accessed. If no such
      identifier is set, the library uses the file access property list
      identifier of the file associated with <code>link_loc_id</code> to
      open the target file.</p>
      <p>
      If an application requires additional control over file access flags
      or the file access property list, see 
      <a href="RM_H5P.html#Property-SetELinkCB">
      <code>H5Pset_elink_cb</code></a>; this function enables the use of an 
      external link callback function as described in
      <a href="H5L/H5L_elink_traverse_t.htm">
      <code>H5L_elink_traverse_t</code></a>.
    </dd>
  <p></p>
  <dt><strong>Parameters:</strong></dt>
    <dd>
      <table>
        <tr>
          <td valign="top"><em>const char *</em> <code>file_name</code></td>
          <td valign="top">IN: Name of the target file containing the
          target object.</td>
        </tr>
        <tr>
          <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>object_name&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
          <td valign="top">IN: Path within the target file to the
          target object.</td>
        </tr>
        <tr>
          <td valign="top"><em>hid_t</em> <code>link_loc_id</code></td>
          <td valign="top">IN: The file or group identifier for the new
          link.</td>
        </tr>
        <tr>
          <td valign="top"><em>const char *</em> <code>link_name</code></td>
          <td valign="top">IN: The name of the new link.</td>
        </tr>
        <tr>
          <td valign="top"><em>hid_t</em> <code>lcpl_id</code></td>
          <td valign="top">IN: Link creation property list identifier.</td>
        </tr>
        <tr>
          <td valign="top"><em>hid_t</em> <code>lapl_id</code></td>
          <td valign="top">IN: Link access property list identifier.</td>
        </tr>
      </table>
      <p></p>
    </dd>
  <dt><strong>Returns:</strong></dt>
    <dd>Returns a non-negative value if successful; otherwise returns
      a negative value.
      <p></p>
    </dd>
  <dt><strong>Fortran90 Interface:</strong> h5lcreate_external_f</dt>
  <dd><pre>
SUBROUTINE h5lcreate_external_f(file_name, obj_name, link_loc_id, link_name, &
	                        hdferr, lcpl_id, lapl_id) 
  IMPLICIT NONE
  CHARACTER(LEN=*), INTENT(IN) :: file_name  
                       ! Name of the file containing the target object. Neither 
                       ! the file nor the target object is required to exist. 
                       ! May be the file the link is being created in.
  CHARACTER(LEN=*), INTENT(IN) :: obj_name  
                       ! Name of the target object, which must already exist.
  INTEGER(HID_T), INTENT(IN) :: link_loc_id 
                       ! The file or group identifier for the new link.
  CHARACTER(LEN=*), INTENT(IN) :: link_name 
                       ! The name of the new link.
  INTEGER, INTENT(OUT) :: hdferr        
                       ! Error code: 
                       ! 0 on success and -1 on failure
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lcpl_id 
                       ! Link creation property list identifier.
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lapl_id 
                       ! Link access property list identifier.
END SUBROUTINE h5lcreate_external_f
    </pre>
  </dd>

  <p></p>
  <dt><strong>See Also:</strong>
    <dd><a href="RM_H5P.html#Property-SetELinkFapl">
        <code>H5Pset_elink_fapl</code></a>,
        &nbsp;
        <a href="RM_H5P.html#Property-SetElinkCB">
        <code>H5Pset_elink_cb</code></a> 
        <p>

        <a href="H5L/H5L_elink_traverse_t.htm">
        <code>H5L_elink_traverse_t</code></a>

  <p></p>
  <dt><strong>History:</strong></dt>
    <dd>
      <table width="90%">
        <tr>
          <td valign="top" align="left" width="10%"><strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left"><strong>C</strong></td>
        </tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">Function introduced in this release.</td>
        </tr>
      </table>
    </dd>
</dl>


