

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Literate" -->
<hr>
<dl>
  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 26 September 2014
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-Iterate">H5Literate</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Literate</code>(
        <em>hid_t</em> <code>group_id</code>,
        <em>H5_index_t</em> <code>index_type</code>,
        <em>H5_iter_order_t</em> <code>order</code>,
        <em>hsize_t</em> *<code>idx</code>,
        <em>H5L_iterate_t</em> <code>op</code>,
        <em>void</em> *<code>op_data</code>
    )
  <p>
  <dt><strong>Purpose:</strong>
    <dd>Iterates through links in a group.
  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Literate</code> iterates through the links 
      in a group, specified by <code>group_id</code>,
      in the order of the specified index, <code>index_type</code>,
      using a user-defined callback routine <code>op</code>.
      <code>H5Literate</code> does not recursively follow links into 
      subgroups of the specified group.
      <p>
      Three parameters are used to manage progress of the iteration:
      <code>index_type</code>, <code>order</code>, and <code>idx</code>.
      <p>
      <code>index_type</code> specifies the index to be used.
      If the links have not been indexed by the index type, they will first
      be sorted by that index then the iteration will begin; 
      if the links have been so indexed, the sorting step will be 
      unnecessary, so the iteration may begin more quickly.
      Valid values include the following:
        <table border=0>
          <tr><td>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_NAME</code>
            </td><td valign=top>
            Alpha-numeric index on name 
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_CRT_ORDER&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td valign=top>
            Index on creation order 
          <!-- H5_INDEX_N is used internally by the Library -->
          <!--
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_N</code>
            </td><td valign=top>
            Number of indices defined
          -->
          </td></tr>
        </table>
      <p>
      <code>order</code> specifies the order in which objects are to be
      inspected along the index specified in <code>index_type</code>.  
      Valid values include the following:
        <table border=0>
          <tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_INC</code>
            </td><td valign=top>
            Increasing order 
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_DEC</code>
            </td><td valign=top>
            Decreasing order
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_NATIVE&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td valign=top>
            Fastest available order
          <!-- H5_INDEX_N is used internally by the Library -->
          <!--
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_N</code>
            </td><td valign=top>
            Number of iteration orders defined 
          -->
          </td></tr>
        </table>
      <p>
      <code>idx</code> allows an interrupted iteration to be resumed;
      it is passed in by the application with a starting point and 
      returned by the library with the point at which the iteration stopped. 
      <p>
      The <code>op</code> callback function, 
      the related <i>H5L_info_t</i> struct, 
      and the effect of the callback function&rsquo;s return value 
      on the application are described in
      <a href="#Link-Visit"><code>H5Lvisit</code></a>.
      <p>
      <code>op_data</code> is a user-defined pointer to the data required 
      to process links in the course of the iteration. 
      This pointer is passed back to each step of the iteration in the 
      <code>op</code> callback function&rsquo;s <code>op_data</code> parameter. 
      <p>
      As mentioned above, <code>H5Literate</code> is not recursive. 
      In particular, if a member of <code>group_id</code> is found to be 
      a group, call it <code>subgroup_a</code>, <code>H5Literate</code>
      does not examine the members of <code>subgroup_a</code>.
      When recursive iteration is required, the application can 
      do either of the following:
      <ul>
          <li>Use one of the following recursive routines instead
              of <code>H5Literate</code>:
              <br>&nbsp;&nbsp;&nbsp;&nbsp;
              <a href="#Link-Visit"><code>H5Lvisit</code></a>
              <br>&nbsp;&nbsp;&nbsp;&nbsp;
              <a href="#Link-VisitByName"><code>H5Lvisit_by_name</code></a>
              <br>&nbsp;&nbsp;&nbsp;&nbsp;
              <a href="RM_H5O.html#Object-Visit"><code>H5Ovisit</code></a>
              <br>&nbsp;&nbsp;&nbsp;&nbsp;
              <a href="RM_H5O.html#Object-VisitByName"><code>H5Ovisit_by_name</code></a>
          <li>Handle the recursion manually, explicitly calling 
          <code>H5Literate</code> on discovered subgroups.
      </ul>

<!-- NEW PAGE -->

      <p>
      <code>H5Literate</code> assumes that the membership of the group 
      being iterated over remains unchanged through the iteration;  
      if any of the links in the group change during the iteration, 
      the function&rsquo;s behavior is undefined.  
      Note, however, that objects pointed to by the links can be modified.
      <p>
      <code>H5Literate</code> is the same as deprecated function 
      <code>H5Giterate</code>, except that <code>H5Giterate</code> always 
      proceeded in alphanumeric order.

  <p>
  <dt><strong>Programming Note for C++ Developers Using C Functions:</strong>
    <dd>
      <p>If a C routine that takes a function pointer as an argument is 
      called from within C++ code, the C routine should be returned from 
      normally. </p>

      <p>Examples of this kind of routine include callbacks such as 
      <code>H5Pset_elink_cb</code> and <code>H5Pset_type_conv_cb</code> 
      and functions such as <code>H5Tconvert</code> and 
      <code>H5Ewalk2</code>.</p>

      <p>Exiting the routine in its normal fashion allows the HDF5 C 
      Library to clean up its work properly. In other words, if the C++ 
      application jumps out of the routine back to the C++ 
      &ldquo;catch&rdquo; statement, the library is not given the 
      opportunity to close any temporary data structures that were set 
      up when the routine was called. The C++ application should save 
      some state as the routine is started so that any problem that 
      occurs might be diagnosed.</p>




  <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>hid_t</em> <code>group_id</code></td>
        <td valign="top">IN: Identifier specifying subject group</td></tr>
      <tr>
        <td valign="top"><em>H5_index_t</em>&nbsp;<code>index_type&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
        <td valign="top">IN: Type of index which determines the order </td></tr>
      <tr>
        <td valign="top"><em>H5_iter_order_t</em> <code>order</code></td>
        <td valign="top">IN: Order within index</td></tr>
      <tr>
        <td valign="top"><em>hsize_t *</em><code>idx</code></td>
        <td valign="top">IN: Iteration position at which to start 
            <br>
            OUT: Position at which an interrupted iteration may be restarted
            </td></tr>
      <tr>
        <td valign="top"><em>H5L_iterate_t</em> <code>op</code></td>
        <td valign="top">IN: Callback function passing data regarding the 
            link to the calling application</td></tr>
      <tr>
        <td valign="top"><em>void *</em><code>op_data</code></td>
        <td valign="top">IN: User-defined pointer to data required
            by the application for its processing of the link</td></tr>
    </table>
  <p>
  <dt><strong>Returns:</strong>
    <dd>On success, returns the return value of the first operator that
        returns a positive value, or zero if all members were processed 
        with no operator returning non-zero.
        <p>
        On failure, returns a negative value if something goes wrong within 
        the library, or the first negative value returned by an operator.

  <p>
  <dt><strong>Fortran2003 Interface:</strong> h5literate_f
    <dd>

        <?php include("H5L/h5literate_f_F03.htm"); ?>


  <br />
  <dt><strong>Programming Note for Fortran Developers:</strong>
    <dd>
      <p>The integer type of the callback function must match the C 
      integer type. Therefore, for portability, all Fortran callback 
      functions used by <code>h5literate_f</code> should be declared as 
      <code>INTEGER(KIND=C_INT)</code>.
      </p></dd>




  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>Change</strong></td></tr>
        <tr>
          <td valign="top">1.8.8</td>
          <td valign="top">
            Fortran subroutine added.</td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            C function introduced.</td></tr>
    </table>
</dl>


