

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Iregister_type" -->
<hr>
<dl>


  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 24 August 2012
      </i></font></div>


<dt><strong>Name:</strong> <a name="Identify-RegisterType">H5Iregister_type</a>
<p>
<dt><strong>Signature:</strong>
    <dd><em>H5I_type_t</em> <code>H5Iregister_type</code>(
            <em>size_t</em> <code>hash_size</code>, 
            <em>unsigned</em> <code>reserved</code>, 
            <em>H5I_free_t</em> <code>free_func</code>
            )
<p>
<dt><strong>Purpose:</strong>
    <dd>Creates and returns a new ID type.
<p>
<dt><strong>Description:</strong>
    <dd><code>H5Iregister_type</code> allocates space for a new ID type and 
         returns an identifier for it.

        <p>
        The <code>hash_size</code> parameter indicates the minimum size 
        of the hash table used to store IDs in the new type.

        <p>
        The <code>reserved</code> parameter indicates the number 
        of IDs in this new type to be reserved.  
        Reserved IDs are valid IDs which are not associated with 
        any storage within the library.

        <p>
        The <code>free_func</code> parameter is a function pointer 
        to a function which returns an <em>herr_t</em> and 
        accepts a <em>void *</em>. 
        The purpose of this function is to deallocate memory 
        for a single ID.  
        It will be called by <code>H5Iclear_type</code> 
        and <code>H5Idestroy_type</code> on each ID.  
        This function is NOT called by <code>H5Iremove_verify</code>.  
        The <em>void *</em> will be the same pointer which was passed 
        in to the <code>H5Iregister</code> function.  
        The <code>free_func</code> function should 
        return 0 on success and -1 on failure.


  <p>
  <dt><strong>Programming Note for C++ Developers Using C Functions:</strong>
    <dd>
      <p>If a C routine that takes a function pointer as an argument is 
      called from within C++ code, the C routine should be returned from 
      normally. </p>

      <p>Examples of this kind of routine include callbacks such as 
      <code>H5Pset_elink_cb</code> and <code>H5Pset_type_conv_cb</code> 
      and functions such as <code>H5Tconvert</code> and 
      <code>H5Ewalk2</code>.</p>

      <p>Exiting the routine in its normal fashion allows the HDF5 C 
      Library to clean up its work properly. In other words, if the C++ 
      application jumps out of the routine back to the C++ 
      &ldquo;catch&rdquo; statement, the library is not given the 
      opportunity to close any temporary data structures that were set 
      up when the routine was called. The C++ application should save 
      some state as the routine is started so that any problem that 
      occurs might be diagnosed.</p>



<p>
<dt><strong>Parameters:</strong>
    <dd><table>
	  <tr>
	    <td valign="top"><em>size_t</em> <code>hash_size</code></td>
            <td valign="top">IN: Size of the hash table (in entries) 
                used to store IDs for the new type</td>
	  </tr>
	  <tr>
	    <td valign="top"><em>unsigned</em> <code>reserved</code></td>
            <td valign="top">IN: Number of reserved IDs for the new type</td>
	  </tr>
	  <tr>
	    <td valign="top"><em>H5I_free_t</em>&nbsp;<code>free_func&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
            <td valign="top">IN: Function used to deallocate space 
                for a single ID</td>
	  </tr>
    </table>
<p>
<dt><strong>Returns:</strong>
        <dd>Returns the type identifier on success, negative on failure.
<p>
<dt><strong>Fortran90 Interface:</strong>
        <dd>This function is not supported in FORTRAN 90.

        <!--<dt><strong>Non-C API(s):</strong>
        <dd>


        <img src="Graphics/Java.gif">
        <img src="Graphics/C++.gif">
        -->
</dl>

