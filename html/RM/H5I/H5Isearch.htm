

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Isearch" -->
<hr>
<dl>


  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 18 September 2014
      </i></font></div>




<dt><strong>Name:</strong> <a name="Identify-Search">H5Isearch</a>
<dt><strong>Signature:</strong>
    <dd><em>void *</em><code>H5Isearch</code>(
            <em>H5I_type_t</em> <code>type</code>, 
            <em>H5I_search_func_t</em> <code>func</code>, 
            <em>void *</em><code>key</code>
            )
<dt><strong>Purpose:</strong>
    <dd>Finds the memory referred to by an ID within the given ID type 
        such that some criterion is satisfied.
<dt><strong>Description:</strong>
    <dd><code>H5Isearch</code> searches through a given ID type 
        to find an object that satisfies the criteria 
        defined by <code>func</code>. 
        If such an object is found, 
        the pointer to the memory containing this object is returned.  
        Otherwise, <code>NULL</code> is returned.  
        To do this, <code>func</code> is called on every member of 
        <code>type</code>.  
        The first member to satisfy <code>func</code> is returned.

        <p>
        The <code>type</code> parameter is the identifier for 
        the ID type which is to be searched.  
        This identifier must have been created by a call to 
        <code>H5Iregister_type</code>. 
        <p>
        The parameter <code>func</code> is a function pointer to a function 
        which takes three parameters.  
        The first parameter is a <em>void *</em> and 
        will be a pointer to the object to be tested.  
        This is the same object that was placed in storage 
        using <code>H5Iregister</code>.  
        The second parameter is a <em>hid_t</em> and 
        is the ID of the object to be tested.  
        The last parameter is a <em>void *</em>.  
        This is the <code>key</code> parameter 
        and can be used however the user finds helpful, 
        or it can be ignored if it is not needed. 
        <code>func</code> returns 0 if the object it is testing 
        does not pass its criteria.  A non-zero value should be 
        returned if the object does pass its criteria.
        <code>H5I_search__func_t</code> is defined in H5Ipublic.h and 
        is shown below.

<dir>
<pre>
typedef int (*H5I_search_func_t)(<i>void</i> *obj, <i>hid_t</i> id, <i>void</i> *key);
</pre>
</dir>


        <p>
        The <code>key</code> parameter will be passed to the 
        search function as a parameter.  
        It can be used to further define the search at run-time.


  <p>
  <dt><strong>Programming Note for C++ Developers Using C Functions:</strong>
    <dd>
      <p>If a C routine that takes a function pointer as an argument is 
      called from within C++ code, the C routine should be returned from 
      normally. </p>

      <p>Examples of this kind of routine include callbacks such as 
      <code>H5Pset_elink_cb</code> and <code>H5Pset_type_conv_cb</code> 
      and functions such as <code>H5Tconvert</code> and 
      <code>H5Ewalk2</code>.</p>

      <p>Exiting the routine in its normal fashion allows the HDF5 C 
      Library to clean up its work properly. In other words, if the C++ 
      application jumps out of the routine back to the C++ 
      &ldquo;catch&rdquo; statement, the library is not given the 
      opportunity to close any temporary data structures that were set 
      up when the routine was called. The C++ application should save 
      some state as the routine is started so that any problem that 
      occurs might be diagnosed.</p>



<dt><strong>Parameters:</strong>
    <ul><table>
	  <tr>
	    <td valign="top"><em>H5I_type_t</em> <code>type</code></td>
            <td valign="top">IN: The identifier of the type to be searched</td>
	  </tr>
	  <tr>
	    <td valign="top"><em>H5I_search_func_t</em>&nbsp;<code>func&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
            <td valign="top">IN: The function defining the search criteria</td>
	  </tr>
	  <tr>
	    <td valign="top"><em>void *</em><code>key</code></td>
            <td valign="top">IN: A key for the search function</td>
	  </tr>
    </table></ul>
<dt><strong>Returns:</strong>
        <dd>Returns a pointer to the object which satisfies the search function 
            on success, <code>NULL</code> on failure.
<dt><strong>Fortran90 Interface:</strong>
        <dd>None.

                <!--<dt><strong>Non-C API(s):</strong>
        <dd>


        <img src="Graphics/Java.gif">
        <img src="Graphics/C++.gif">
        -->
</dl>


