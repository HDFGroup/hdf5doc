

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://www.hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have      *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Pset_file_image_callbacks" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 13 April 2012
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Property-SetFileImageCallbacks">H5Pset_file_image_callbacks</a>

  <dt><strong>Signature:</strong>
    <dd><em>herr_t </em><code>H5Pset_file_image_callbacks</code>(
            <em>hid_t</em> <code>fapl_id</code>,
            <em>H5_file_image_callbacks_t *</em><code>callbacks_ptr</code>
        )

  <p>
  <dt><strong>Purpose:</strong>
    <dd>Sets the callbacks for working with file images.

  <p>
  <dt><strong>Motivation:</strong>
    <dd><code>H5Pset_file_image_callbacks</code> and other elements of HDF5 are
      used to load an image of an HDF5 file into system memory and open 
      that image as a regular HDF5 file.
      An application can then use the file without the overhead of disk I/O.

  <p>
  <dt><strong>Recommended Reading:</strong>
    <dd>This function is part of the file image operations feature set.
      It is highly recommended to study the guide
      &ldquo;<a href="../Advanced/FileImageOperations/HDF5FileImageOperations.pdf"
      >HDF5 File Image Operations</a>&rdquo; before using this feature set.
      <p>
      See the &ldquo;See Also&rdquo; section below for links to 
      other elements of HDF5 file image operations.

  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Pset_file_image_callbacks</code> 
      sets callback functions for working with file images in memory. 
      <p>
      <code>H5Pset_file_image_callbacks</code> allows an application to 
      control the management of file image buffers through user defined 
      callbacks. These callbacks can be used in the management of 
      file image buffers in property lists and with certain file drivers. 
      <p>
      <code>H5Pset_file_image_callbacks</code> must be used before any
      file image has been set in the file access property list.
      Once a file image has been set, the function will fail.
      
      <p>
      The callback routines set up by <code>H5Pset_file_image_callbacks</code>
      are invoked when a new file image buffer is allocated, 
      when an existing file image buffer is copied or resized, 
      or when a file image buffer is released from use. 
      <p>
      Some file drivers allow the use of user-defined callback functions 
      for allocating, freeing, and copying the driver&rsquo;s internal buffer, 
      potentially allowing optimizations such as avoiding large 
      <code>malloc</code> and <code>memcpy</code> operations, 
      or to perform detailed logging.
      <p>
      From the perspective of the HDF5 Library, 
      the operations of the <code>image_malloc</code>, 
      <code>image_memcpy</code>, <code>image_realloc</code>, and 
      <code>image_free</code> callbacks must be identical 
      to those of the corresponding C standard library calls 
      (<code>malloc</code>, <code>memcpy</code>, <code>realloc</code>, 
      and <code>free</code>). 
      While the operations must be identical, 
      the file image callbacks have more parameters. 
      The return values of <code>image_malloc</code> and 
      <code>image_realloc</code> are identical to the return values of 
      <code>malloc</code> and <code>realloc</code>. 
      The return values of <code>image_memcpy</code> and 
      <code>image_free</code> differ from the return values of 
      <code>memcpy</code> and <code>free</code> in that 
      the return values of <code>image_memcpy</code> and 
      <code>image_free</code> can also indicate failure. 
      <p>
      The callbacks and their parameters,
      along with a struct and an <small>ENUM</small> required for their use,
      are described below. 
      <p>
      
      <a name="Property-SetFileImageCallbacksStruct,Enum">
      <b><u>Callback struct and <small>ENUM</small>:</u></b></a>
      <br>
      The callback functions set up by <code>H5Pset_file_image_callbacks</code> 
      use a struct and an <small>ENUM</small> that are defined as follows

      <p>
      The struct <b><code>H5_file_image_callbacks_t</code></b>
      serves as a container for the callback functions and 
      a pointer to user-supplied data.  The struct is defined as follows:
      <pre>
    typedef struct
    {
        void *(*image_malloc)(size_t size, H5_file_image_op_t file_image_op,
                        void *udata);
        void *(*image_memcpy)(void *dest, const void *src, size_t size,
                        H5_file_image_op_t file_image_op, void *udata);
        void *(*image_realloc)(void *ptr, size_t size,
                        H5_file_image_op_t file_image_op, void *udata);
        herr_t (*image_free)(void *ptr, H5_file_image_op_t file_image_op,
                        void *udata);
        void *(*udata_copy)(void *udata); 
        herr_t (*udata_free)(void *udata); 
        void *udata;
    } H5_file_image_callbacks_t;</pre>


      <p><br>
      Elements of the <small>ENUM</small> <b><code>H5_file_image_op_t</code></b>
      are used by the callbacks to invoke certain operations on file images.
      The <small>ENUM</small> is defined as follows:
      <pre>
    typedef enum
    {
        H5_FILE_IMAGE_OP_PROPERTY_LIST_SET, 
        H5_FILE_IMAGE_OP_PROPERTY_LIST_COPY, 
        H5_FILE_IMAGE_OP_PROPERTY_LIST_GET, 
        H5_FILE_IMAGE_OP_PROPERTY_LIST_CLOSE, 
        H5_FILE_IMAGE_OP_FILE_OPEN, 
        H5_FILE_IMAGE_OP_FILE_RESIZE, 
        H5_FILE_IMAGE_OP_FILE_CLOSE
    } H5_file_image_op_t;</pre>

      <p>
      The elements of the <code>H5_file_image_op_t</code> <small>ENUM</small>
      are used in the callbacks for the following purposes: 
      <p>
      <table width="90%" align="center" border="0">
      <tr valign="top" align="left">
          <td colspan="2"><code>H5_FILE_IMAGE_OP_PROPERTY_LIST_SET</code>
              </td></tr>
          <td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
              </td><td>
              Passed to the <code>image_malloc</code> and 
              <code>image_memcpy</code> callbacks 
              when a file image buffer is to be copied while being set in a 
              file access property list (<small>FAPL</small>). 
        </td></tr><tr>
          <td colspan="2"><code>H5_FILE_IMAGE_OP_PROPERTY_LIST_COPY</code>
              </td></tr>
          <td>&nbsp;</td><td>
              Passed to the <code>image_malloc</code> and 
              <code>image_memcpy</code> callbacks 
              when a file image buffer is to be copied when a 
              <small>FAPL</small> is copied.
        </td></tr><tr>
          <td colspan="2"><code>H5_FILE_IMAGE_OP_PROPERTY_LIST_GET</code>
              </td></tr>
          <td>&nbsp;</td><td>
              Passed to the <code>image_malloc</code> and 
              <code>image_memcpy</code> callbacks 
              when a file image buffer is to be copied while being retrieved 
              from a <small>FAPL</small>. 
        </td></tr><tr>
          <td colspan="2"><code>H5_FILE_IMAGE_OP_PROPERTY_LIST_CLOSE</code>
              </td></tr>
          <td>&nbsp;</td><td>
              Passed to the <code>image_free</code> callback 
              when a file image buffer is to be released during a 
              <small>FAPL</small> close operation.

        </td></tr><tr>
          <td colspan="2"><code>H5_FILE_IMAGE_OP_FILE_OPEN</code>
              </td></tr>
          <td>&nbsp;</td><td>
              Passed to the <code>image_malloc</code> and 
              <code>image_memcpy</code> callbacks 
              when a file image buffer is to be copied during a file 
              open operation. 
              While the file image being opened will typically be copied 
              from a <small>FAPL</small>, this need not always be the case. 
              For example, the core file driver, also known as the 
              memory file driver, takes its initial image from a file.
        </td></tr><tr>
          <td colspan="2"><code>H5_FILE_IMAGE_OP_FILE_RESIZE</code>
              </td></tr>
          <td>&nbsp;</td><td>
              Passed to the <code>image_realloc</code> callback 
              when a file driver needs to resize an image buffer. 
        </td></tr><tr>
          <td colspan="2"><code>H5_FILE_IMAGE_OP_FILE_CLOSE</code>
              </td></tr>
          <td>&nbsp;</td><td>
              Passed to the <code>image_free</code> callback 
              when an image buffer is to be released during a file 
              close operation.
        </td></tr><tr>
          </td></tr>
      </table>
      

      <p><br>
      <b><u>Callback functions</u></b>
      <br>
      The <b><code>image_malloc</code></b> callback contains a pointer 
      to a function that must appear to HDF5 to have functionality identical 
      to that of the standard C library <code>malloc()</code> call.
      <dir>
      <dl>
      <dt>Signature in <code>H5_file_image_callbacks_t</code>:</dt>
          <dd><em>void</em> <code>*(*image_malloc) (</code>
              <em>size_t</em> <code>size</code>,
              <em>H5_file_image_op_t *</em><code>file_image_op</code>,
              <em>void *</em><code>udata</code>
              )</dd>
      <p>
      <dt>Parameters:</dt>
          <dd><table>
              <tr valign="top">
                <td><em>size_t</em> <code>size</code>
                    </td><td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
                <td>IN: Size in bytes of the file image buffer to allocate
                    </td></tr>
              <tr valign="top">
                <td colspan="3">
                    <em>H5_file_image_op_t&nbsp;*</em><code>file_image_op</code>
                    </td></tr>
                <tr valign="top">
                <td>&nbsp;</td><td>&nbsp;</td>
                <td>IN: A value from <code>H5_file_image_op_t</code> 
                    indicating the operation being performed on the file image 
                    when this callback is invoked
                    </td></tr>
              <tr valign="top">
                <td><em>void&nbsp;*</em><code>udata</code>
                    </td><td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
                <td>IN: Value passed in in the 
                    <code>H5Pset_file_image_callbacks</code> parameter 
                    <code>udata</code>
                    </td></tr>
            </table>
      </dl>
      </dir>


      <p><br>
      The <b><code>image_memcpy</code></b> callback contains a pointer 
      to a function that must appear to HDF5 to have functionality identical 
      to that of the standard C library <code>memcopy()</code> call,
      except that it returns a <code>NULL</code> on failure.
      (The <code>memcpy</code> C Library routine is defined to return the 
      <code>dest</code> parameter in all cases.)
      <p>
      Setting <code>image_memcpy</code> to <code>NULL</code> indicates that 
      HDF5 should invoke the standard C library <code>memcpy()</code>
      routine when copying buffers.
      <dir>
      <dl>
      <dt>Signature in <code>H5_file_image_callbacks_t</code>:</dt>
          <dd><em>void</em> <code>*(*image_memcpy) (</code>
              <em>void *</em><code>dest</code>,
              <em>const void *</em><code>src</code>,
              <em>size_t</em> <code>size</code>,
              <em>H5_file_image_op_t *</em><code>file_image_op</code>,
              <em>void *</em><code>udata</code>
              )</dd>
      <p>
      <dt>Parameters:</dt>
          <dd><table>
              <tr valign="top">
                <td><em>void&nbsp;*</em><code>dest</code>
                    </td><td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
                <td>IN: Address of the destination buffer
                    </td></tr>
              <tr valign="top">
                <td><em>const&nbsp;void&nbsp;*</em><code>src</code>
                    </td><td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
                <td>IN: Address of the source buffer
                    </td></tr>
              <tr valign="top">
                <td><em>size_t</em> <code>size</code>
                    </td><td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
                <td>IN: Size in bytes of the file image buffer to copy
                    </td></tr>
              <tr valign="top">
                <td colspan="3">
                    <em>H5_file_image_op_t&nbsp;*</em><code>file_image_op</code>
                    </td></tr>
                <tr valign="top">
                <td>&nbsp;</td><td>&nbsp;</td>
                <td>IN: A value from <code>H5_file_image_op_t</code> 
                    indicating the operation being performed on the file image 
                    when this callback is invoked
                    </td></tr>
              <tr valign="top">
                <td><em>void&nbsp;*</em><code>udata</code>
                    </td><td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
                <td>IN: Value passed in in the 
                    <code>H5Pset_file_image_callbacks</code> parameter 
                    <code>udata</code>
                    </td></tr>
            </table>
      </dl>
      </dir>
      
      
      <p><br>
      The <b><code>image_realloc</code></b> callback contains a pointer 
      to a function that must appear to HDF5 to have functionality identical 
      to that of the standard C library <code>realloc()</code> call.
      <p>
      Setting <code>image_realloc</code> to <code>NULL</code> indicates that 
      HDF5 should invoke the standard C library <code>realloc()</code>
      routine when resizing file image buffers.
      <dir>
      <dl>
      <dt>Signature in <code>H5_file_image_callbacks_t</code>:</dt>
          <dd><em>void</em> <code>*(*image_realloc) (</code>
              <em>void *</em><code>ptr</code>,
              <em>size_t</em> <code>size</code>,
              <em>H5_file_image_op_t *</em><code>file_image_op</code>,
              <em>void *</em><code>udata</code>
              )</dd>
      <p>
      <dt>Parameters:</dt>
          <dd><table>
              <tr valign="top">
                <td><em>void&nbsp;*</em><code>ptr</code>
                    </td><td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
                <td>IN: Pointer to the buffer being reallocated
                    </td></tr>
              <tr valign="top">
                <td><em>size_t</em> <code>size</code>
                    </td><td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
                <td>IN: Desired size in bytes of the file image buffer 
                    after reallocation
                    </td></tr>
              <tr valign="top">
                <td colspan="3">
                    <em>H5_file_image_op_t&nbsp;*</em><code>file_image_op</code>
                    </td></tr>
                <tr valign="top">
                <td>&nbsp;</td><td>&nbsp;</td>
                <td>IN: A value from <code>H5_file_image_op_t</code> 
                    indicating the operation being performed on the file image 
                    when this callback is invoked
                    </td></tr>
              <tr valign="top">
                <td><em>void&nbsp;*</em><code>udata</code>
                    </td><td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
                <td>IN: Value passed in in the 
                    <code>H5Pset_file_image_callbacks</code> parameter 
                    <code>udata</code>
                    </td></tr>
            </table>
      </dl>
      </dir>
      

      <p><br>
      The <b><code>image_free</code></b> callback contains a pointer 
      to a function that must appear to HDF5 to have functionality identical 
      to that of the standard C library <code>free()</code> call,
      except that it will return <code>0</code> (<code>SUCCEED</code>) 
      on success and <code>-1</code> (<code>FAIL</code>) on failure.
      <p>
      Setting <code>image_free</code> to <code>NULL</code> indicates that 
      HDF5 should invoke the standard C library <code>free()</code>
      routine when releasing file image buffers.
      <dir>
      <dl>
      <dt>Signature in <code>H5_file_image_callbacks_t</code>:</dt>
          <dd><em>herr_t</em> <code>(*image_free) (</code>
              <em>void *</em><code>ptr</code>,
              <em>H5_file_image_op_t *</em><code>file_image_op</code>,
              <em>void *</em><code>udata</code>
              )</dd>
      <p>
      <dt>Parameters:</dt>
          <dd><table>
              <tr valign="top">
                <td><em>void&nbsp;*</em><code>ptr</code>
                    </td><td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
                <td>IN: Pointer to the buffer being released
                    </td></tr>
              <tr valign="top">
                <td colspan="3">
                    <em>H5_file_image_op_t&nbsp;*</em><code>file_image_op</code>
                    </td></tr>
                <tr valign="top">
                <td>&nbsp;</td><td>&nbsp;</td>
                <td>IN: A value from <code>H5_file_image_op_t</code> 
                    indicating the operation being performed on the file image 
                    when this callback is invoked
                    </td></tr>
              <tr valign="top">
                <td><em>void&nbsp;*</em><code>udata</code>
                    </td><td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
                <td>IN: Value passed in in the 
                    <code>H5Pset_file_image_callbacks</code> parameter 
                    <code>udata</code>
                    </td></tr>
            </table>
      </dl>
      </dir>
      
      
      <p><br>
      The <b><code>udata_copy</code></b> callback contains a pointer 
      to a function that, from the perspective of HDF5, 
      allocates a buffer of suitable size, 
      copies the contents of the supplied <code>udata</code> into the new buffer, 
      and returns the address of the new buffer. 
      The function returns <cocde>NULL</code> on failure. 
      This function is necessary if a non-NULL <code>udata</code> parameter 
      is supplied, so that property lists containing the image callbacks 
      can be copied. 
      If the <code>udata</code> parameter below is <code>NULL</code>, 
      then this parameter should be <code>NULL</code> as well. 
      <dir>
      <dl>
      <dt>Signature in <code>H5_file_image_callbacks_t</code>:</dt>
          <dd><em>void</em> <code>*(*udata_copy) (</code>
              <em>void *</em><code>udata</code>
              )</dd>
      <p>
      <dt>Parameters:</dt>
          <dd><table>
              <tr valign="top">
                <td><em>void&nbsp;*</em><code>udata</code>
                    </td><td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
                <td>IN: Value passed in in the 
                    <code>H5Pset_file_image_callbacks</code> parameter 
                    <code>udata</code>
                    </td></tr>
            </table>
      </dl>
      </dir>
      
      
      <p><br>
      The <b><code>udata_free</code></b> callback contains a pointer 
      to a function that, from the perspective of HDF5, 
      frees a user data block. 
      This function is necessary if a non-NULL <code>udata</code> parameter 
      is supplied so that property lists containing image callbacks 
      can be discarded without a memory leak. 
      If the <code>udata</code> parameter below is <code>NULL</code>, 
      this parameter should be <code>NULL</code> as well. 
      <dir>
      <dl>
      <dt>Signature in <code>H5_file_image_callbacks_t</code>:</dt>
          <dd><em>herr_t</em> <code>(*udata_free) (</code>
              <em>void *</em><code>udata</code>
              )</dd>
      <p>
      <dt>Parameters:</dt>
          <dd><table>
              <tr valign="top">
                <td><em>void&nbsp;*</em><code>udata</code>
                    </td><td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
                <td>IN: Value passed in in the 
                    <code>H5Pset_file_image_callbacks</code> parameter 
                    <code>udata</code>
                    </td></tr>
            </table>
      </dl>
      </dir>
      
      
      <p><br>
      <b><code>udata</code></b>, the final field in the 
      <code>H5_file_image_callbacks_t</code> struct,
      provides a pointer to user-defined data. 
      This pointer will be passed to the <code>image_malloc</code>, 
      <code>image_memcpy</code>, <code>image_realloc</code>, and 
      <code>image_free</code> callbacks.
      Define <code>udata</code> as <code>NULL</code>
      if no user-defined data is provided. 
      






<!--__ *** NOTES AND WARNINGS ************************************  -->

<!--
  <p>
  <dt><strong>Notes/Warnings:</strong>
    <dd>

<font color="red">
Surely we can provide a few dire warnings for <i>this</i> one . . .
      Risk of data corruption,
      loss of a file image,
      silent failure, 
      unintended consequences that might go unnoticed.  
      That sort of thing.
</font>
-->


  <p>
  <dt><strong>Parameters:</strong>
    <dd>
    <table>
      <tr valign="top">
        <td><em>hid_t</em>&nbsp;<code>fapl_id</code>
            </td><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td>IN: File access property list identifier
            </td></tr>
      <tr valign="top">
        <td colspan="3"><em>H5_file_image_callbacks_t *</em><code>callbacks_ptr</code>
            </tr><tr>
            <td>&nbsp;</td><td>&nbsp;</td>
        <td>IN/OUT: Pointer to an instance of the 
                    <code>H5_file_image_callbacks_t</code> structure
            </td></tr>
    </table>

  <p>
  <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.

  <p>
  <dt><strong>Failure Modes:</strong>
    <dd>Due to interactions between this function and 
      <code>H5Pset_file_image</code> and <code>H5Pget_file_image</code>,
      <code>H5Pset_file_image_callbacks</code> will fail if a 
      file image has already been set in the target file access property list, 
      <code>fapl_id</code>.

<!--
<font color="red">
<p>
Other likely failure modes?  Rare failure modes?  Corner or edge cases?
</font>
-->



<!--
  <p>
  <dt><strong>Example Usage:</strong>

    <dd>Discuss the elements in the first usage example here.
<dir><pre>
Complete usage example line(s) for the first example here
</pre></dir>
    <p>

    <dd>Discuss the elements in the second usage example here.
<dir><pre>
Complete usage example line(s) for the second example here
</pre></dir>
  <p>
-->


<!--__ *** FORTRAN INTERFACE  ************************************  -->
<!--__ Leave this comment block in place if there is not yet a      -->
<!--__ Fortran interface for this function.                         -->
<!--__                                                              -->
<!--__ When the Fortran interface is complete, replace this         -->
<!--__ section with the Fortran subroutine description.             -->
<!--__                                                              -->
<!--__ See the file h5fortran_f_insert.htm for a template and       -->
<!--__ instructions.                                                -->
<!--__ ***********************************************************  -->
  <p>

  <p>
  <dt><strong>See Also:</strong>
    <dd><table width="100%" border="0">
      <tr valign="top"><td>
        <a href="../HL/RM_H5LT.html#H5LTopen_file_image">
            <code>H5LTopen_file_image</code></a>
        <br>&nbsp;
        <br>
        <a href="../RM/RM_H5F.html#File-GetFileImage">
            <code>H5Fget_file_image</code></a>
        <br>&nbsp;
        <br>
        <a href="../RM/RM_H5P.html#Property-SetFileImage">
            <code>H5Pset_file_image</code></a>
        <br>
        <a href="../RM/RM_H5P.html#Property-GetFileImage">
            <code>H5Pget_file_image</code> </a>
        <br>&nbsp;
        <br>
<!--
        <a href="../RM/RM_H5P.html#Property-SetFileImageCallbacks">
            <code>H5Pset_file_image_callbacks</code></a>
        <br>
-->
        <a href="../RM/RM_H5P.html#Property-GetFileImageCallbacks">
            <code>H5Pget_file_image_callbacks</code></a>
      </td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
      <td>
        &ldquo;<a 
        href="../Advanced/FileImageOperations/HDF5FileImageOperations.pdf">HDF5 
            File Image Operations</a>&rdquo;
            <br><code>&nbsp;&nbsp;&nbsp;&nbsp;</code>
            in <a href="../Advanced.html"><cite>Advanced Topics in HDF5</cite></a>
        <br>&nbsp;
        <br>
        Within <code>H5Pset_file_image_callbacks</code></a>:
        <br>
        Callback struct &nbsp; 
        <a href="../RM/RM_H5P.html#Property-SetFileImageCallbacksStruct,Enum">
            <code>H5_file_image_callbacks_t</code></a>
        <br>
        Callback <small>ENUM</small> &nbsp; 
        <a href="../RM/RM_H5P.html#Property-SetFileImageCallbacksStruct,Enum">
            <code>H5_file_image_op_t</code></a>
      </td>
      </table>

  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>Change</strong></td>
        </tr>
        <tr>
          <td valign="top">1.8.9</td>
          <td valign="top">
            C function introduced in this release.</td>
        </tr>
        </table>

</dl>


