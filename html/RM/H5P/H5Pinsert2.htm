

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Pinsert2" -->
<hr>
<dl>


  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 23 August 2012
      </i></font></div>


  <dt><strong>Name:</strong> <a name="Property-Insert2">H5Pinsert2</a>

  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Pinsert2</code>(
                  <em>hid_t</em> <code>plid</code>,
                  <em>const char *</em><code>name</code>,
                  <em>size_t</em> <code>size</code>,
                  <em>void *</em><code>value</code>,
                  <em>H5P_prp_set_func_t</em> <code>set</code>,
                  <em>H5P_prp_get_func_t</em> <code>get</code>,
                  <em>H5P_prp_delete_func_t</em> <code>delete</code>,
                  <em>H5P_prp_copy_func_t</em> <code>copy</code>,
                  <em>H5P_prp_compare_func_t</em> <code>compare</code>,
                  <em>H5P_prp_close_func_t</em> <code>close</code>
		)

  <p>
  <dt><strong>Purpose:</strong>
    <dd>Registers a temporary property with a property list.

  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Pinsert2</code> create a new property in a property list.  
    The property will exist only in this property list and copies made 
    from it.  
	
    <p>
    The initial property value must be provided in 
    <code>value</code> and the property value will be set accordingly.  
	
    <p>
    The name of the property must not already exist in this list, 
    or this routine will fail.  
	
    <p>
    The <code>set</code> and <code>get</code> callback routines may 
    be set to NULL if they are not needed.

    <p>
    Zero-sized properties are allowed and do not store any data in the
    property list.  The default value of a zero-size property may be set 
    to NULL.  They may be used to indicate the presence or absence of a 
    particular piece of information.
    </p>

    The <code>set</code> routine is called before a new value is copied 
    into the property.  
    The <code>H5P_prp_set_func_t</code> callback function is defined 
    as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_set_func_t</code>)(
            <em>hid_t</em> <code>prop_id</code>,
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>new_value</code>);
        </ul>
    The parameters to the callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>hid_t</em> <code>prop_id</code></td>
        <td>IN: The identifier of the property list being modified</td></tr>
    <tr>
        <td><em>const char *</em><code>name</code></td>
        <td>IN: The name of the property being modified</td></tr>
    <tr>
        <td><em>size_t </em> <code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void **</em><code>new_value</code></td>
        <td>IN: Pointer to new value pointer for the property being 
		    modified</td></tr>
    </table></ul>
    The <code>set</code> routine may modify the value pointer to be set 
    and those changes will be used when setting the property's value.  
    If the <code>set</code> routine returns a negative value, the new 
    property value is not copied into the property and the set routine 
    returns an error value.  
    The <code>set</code> routine will be called for the initial value.
    <p>
    <strong>Note:</strong> 
    The <code>set</code> callback function may be useful 
    to range check the value being set for the property 
    or may perform some transformation or translation of the
    value set.  The <code>get</code> callback would then 
    reverse the transformation or translation.  
    A single <code>get</code> or <code>set</code> callback 
    could handle multiple properties by 
    performing different actions based on the
    property name or other properties in the property list.

    <p>
    The <code>get</code> routine is called when a value is retrieved 
    from a property value.  
    The <code>H5P_prp_get_func_t</code> callback function is defined 
    as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_get_func_t</code>)(
            <em>hid_t</em> <code>prop_id</code>, 
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>value</code>);
        </ul>
    <p>
    The parameters to the above callback function are:
    <ul><table>
    <tr>
        <td><em>hid_t</em> <code>prop_id</code></td>
        <td>IN: The identifier of the property list being queried</td></tr>
    <tr>
        <td><em>const char *</em><code>name</code></td>
        <td>IN: The name of the property being queried</td></tr>
    <tr>
        <td><em>size_t </em> <code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void *</em><code>value</code></td>
        <td>IN: The value of the property being returned</td></tr>
    </table></ul>
    The <code>get</code> routine may modify the value to be returned from 
    the query and those changes will be preserved. 
    If the <code>get</code> routine returns a negative value, the query 
    routine returns an error value.
    <p></p>

    <P>
    The <code>delete</code> routine is called when a property is being 
    deleted from a property list.  
    The <code>H5P_prp_delete_func_t</code> callback function is defined 
    as follows:
        <ul><code>typedef herr_t</code> (*<code>H5P_prp_delete_func_t</code>)(
            <em>hid_t </em><code>prop_id</code>, 
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>value</code>);
        </ul>
    <p>
    The parameters to the above callback function are:
    <ul><table>
    <tr>
        <td><em>hid_t</em> <code>prop_id</code></td>
        <td>IN: The identifier of the property list the property is 
		    being deleted from</td></tr>
    <tr>
        <td><em>const char *</em> <code>name</code></td>
        <td>IN: The name of the property in the list</td></tr>
    <tr>
        <td><em>size_t </em> <code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void *</em> <code>value</code></td>
        <td>IN: The value for the property being deleted</td></tr>
    </table></ul>
    The <code>delete</code> routine may modify the value passed in, 
    but the value is not used by the library when the <code>delete</code> 
    routine returns.  If the <code>delete</code> routine returns a 
    negative value, the property list delete routine returns an 
    error value but the property is still deleted. 
    <p></P>
    
    <P>
    The <code>copy</code> routine is called when a new property list 
    with this property is being created through a copy operation.  
    The <code>H5P_prp_copy_func_t</code> callback function is defined 
    as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_copy_func_t</code>)(
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>value</code>);
        </ul>
    <p>
    The parameters to the above callback function are:
    <ul><table>
    <tr>
        <td><em>const char *</em><code>name</code></td>
        <td>IN: The name of the property being copied</td></tr>
    <tr>
        <td><em>size_t </em> <code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void *</em> <code>value</code></td>
        <td>IN/OUT: The value for the property being copied</td></tr>
    </table></ul>
    The <code>copy</code> routine may modify the value to be set and 
    those changes will be stored as the new value of the property.  
    If the <code>copy</code> routine returns a negative value, the 
    new property value is not copied into the property and the 
    copy routine returns an error value.
    <p></P>

    <P>
    The <code>compare</code> routine is called when a property list with 
    this property is compared to another property list with the same property.
    The <code>H5P_prp_compare_func_t</code> callback function is defined
    as follows:
        <ul><em>typedef int</em> (*<code>H5P_prp_compare_func_t</code>)(
            <em>const void *</em><code>value1</code>,
            <em>const void *</em><code>value2</code>,
            <em>size_t </em><code>size</code>);
        </ul>
    The parameters to the callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>const void *</em><code>value1</code></td>
        <td>IN: The value of the first property to compare</td></tr>
    <tr>
        <td><em>const void *</em><code>value2</code></td>
        <td>IN: The value of the second property to compare</td></tr>
    <tr>
        <td><em>size_t </em><code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    </table></ul>
    The <code>compare</code> routine may <EM>not</EM> modify the values.
    The <code>compare</code> routine should return a positive value if
    <code>value1</code> is greater than <code>value2</code>, a negative value
    if <code>value2</code> is greater than <code>value1</code> and zero if
    <code>value1</code> and <code>value2</code> are equal.
    <p></P>

    <P>The <code>close</code> routine is called when a property list 
    with this property is being closed.  
    The <code>H5P_prp_close_func_t</code> callback function is defined 
    as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_close_func_t</code>)(
            <em>hid_t</em> <code>prop_id</code>,
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>value</code>);
        </ul>
    The parameters to the callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>hid_t</em> <code>prop_id</code></td>
        <td>IN: The identifier of the property list being closed</td></tr>
    <tr>
        <td><code>const char *</code><em>name</em></td>
        <td>IN: The name of the property in the list</td></tr>
    <tr>
        <td><code>size_t </code> <em>size</em></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><code>void *</code><em>value</em></td>
        <td>IN: The value for the property being closed</td></tr>
    </table></ul>
    The <code>close</code> routine may modify the value passed in, the value 
    is not used by the library when the <code>close</code> routine returns.  
    If the <code>close</code> routine returns a negative value, the  
    property list close routine returns an error value but the property list 
    is still closed.

    <p>
    <strong>Note:</strong>
    There is no <code>create</code> callback routine for temporary property 
    list objects; the initial value is assumed to have any necessary setup 
    already performed on it.


  <p>
  <dt><strong>Programming Note for C++ Developers Using C Functions:</strong>
    <dd>
      <p>If a C routine that takes a function pointer as an argument is 
      called from within C++ code, the C routine should be returned from 
      normally. </p>

      <p>Examples of this kind of routine include callbacks such as 
      <code>H5Pset_elink_cb</code> and <code>H5Pset_type_conv_cb</code> 
      and functions such as <code>H5Tconvert</code> and 
      <code>H5Ewalk2</code>.</p>

      <p>Exiting the routine in its normal fashion allows the HDF5 C 
      Library to clean up its work properly. In other words, if the C++ 
      application jumps out of the routine back to the C++ 
      &ldquo;catch&rdquo; statement, the library is not given the 
      opportunity to close any temporary data structures that were set 
      up when the routine was called. The C++ application should save 
      some state as the routine is started so that any problem that 
      occurs might be diagnosed.</p>





  <p>
  <dt><strong>Parameters:</strong>
    <ul><table>
    <tr>
        <td valign="top"><em>hid_t</em> <code>plid</code></td>
        <td valign="top">IN: Property list identifier to create temporary 
            property within</td></tr>
    <tr>
        <td valign="top"><em>const char *</em><code>name</code></td>
        <td valign="top">IN: Name of property to create</td></tr>
    <tr>
        <td valign="top"><em>size_t</em> <code>size</code></td>
        <td valign="top">IN: Size of property in bytes</td></tr>
    <tr>
        <td valign="top"><em>void *</em><code>value</code></td>
        <td valign="top">IN: Initial value for the property</td></tr>
    <tr>
        <td valign="top"><em>H5P_prp_set_func_t</em> <code>set</code></td>
        <td valign="top">IN: Callback routine called before a new value is 
            copied into the property's value</td></tr>
    <tr>
        <td valign="top"><em>H5P_prp_get_func_t</em> <code>get</code></td>
        <td valign="top">IN: Callback routine called when a property value 
            is retrieved from the property</td></tr>
    <tr>
        <td valign="top"><em>H5P_prp_delete_func_t</em>&nbsp;<code>delete&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
        <td valign="top">IN: Callback routine called when a property is 
            deleted from a property list</td></tr>
    <tr>
        <td valign="top"><em>H5P_prp_copy_func_t</em> <code>copy</code></td>
        <td valign="top">IN: Callback routine called when a property is copied 
            from an existing property list</td></tr>
    <tr>
        <td valign="top"><em>H5P_prp_compare_func_t</em> 
            <code>compare</code></td>
        <td valign="top">IN: Callback routine called when a property is 
            compared with another property list</td></tr>
    <tr>
        <td valign="top"><em>H5P_prp_close_func_t</em> <code>close</code></td>
        <td valign="top">IN: Callback routine called when a property list is 
            being closed and the property value will be disposed of</td></tr>
    </table></ul>

  <p>
  <dt><strong>Returns:</strong>
    <dd>Success: a non-negative value
    <dd>Failure: a negative value

  <p>
  <dt><strong>Fortran90 Interface:</strong> <!--h5pinsert2_f-->
    <dd>None.
<!--
	<pre>
	</pre>		
-->

  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>








