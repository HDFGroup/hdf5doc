

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Pset_mdc_config" -->
<hr>
<dl>
  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 18 May 2009
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Property-SetMdcConfig">H5Pset_mdc_config</a>
  <dt><strong>Signature:</strong>
      <dd><em>herr_t</em> <code>H5Pset_mdc_config</code>(<em>hid_t</em> 
	    <code>plist_id</code>, <em>H5AC_cache_config_t *</em><code>config_ptr</code>)
  <dt><strong>Purpose:</strong>
      <dd>Set the initial metadata cache configuration in the indicated File 
	    Access Property List to the supplied value.
  <dt><strong>Description:</strong>
      <dd>H5Pset_mdc_config attempts to set the initial metadata cache configuration 
	    to the supplied value.  It will fail if an invalid configuration is detected.  
		This configuration is used when the file is opened.
        <p>See the overview of the metadata cache in the special topics section of the 
		user manual for details on what is being configured.  If you haven't read and 
		understood that documentation, you really shouldn't be using this API call.
  <dt><strong>Parameters:</strong>
    <ul><table>
        <tr>
		    <td valign="top"><em>hid_t</em> <code>plist_id</code>&nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Identifier of the file access property list.</td></tr>
        <tr>
		    <td valign="top"><em>H5AC_cache_config_t&nbsp;*</em><code>config_ptr</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Pointer to the instance of H5AC_cache_config_t 
			  containing the desired configuration.  The fields of this structure 
			  are discussed below:</td></tr>
        <tr>
		  <td colspan="2">&nbsp;</td>
		</tr>
		<tr><td colspan="2"><strong>General configuration section:</strong></td></tr>
		<tr>
		    <td valign="top"><em>int</em> <code>version</code></td>
            <td valign="top">IN: Integer field indicating the the version 
			  of the H5AC_cache_config_t in use.  This field should be set to 
			  H5AC__CURR_CACHE_CONFIG_VERSION (defined in H5ACpublic.h).</td></tr>
        <tr>
		    <td valign="top"><em>hbool_t</em> <code>rpt_fcn_enabled</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Boolean flag indicating whether the adaptive 
			  cache resize report function is enabled.  This field should 
			  almost always be set to FALSE. Since resize algorithm activity is 
			  reported via stdout, it MUST be set to FALSE on Windows machines.
              <p>The report function is not supported code, and can be expected 
			  to change between versions of the library.  Use it at your own risk.</td></tr>

        <tr>
           <td valign="top"><em>hbool_t</em> <code>open_trace_file</code>
                &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Boolean field indicating whether 
                the <code>trace_file_name</code> field should be 
                used to open a trace file for the 
                cache.
                <p>
                The trace file is a debuging feature 
                that allows the capture of top level 
                metadata cache requests for purposes 
                of debugging and/or optimization.  
                This field should normally be set to 
                <code>FALSE</code>, as trace file collection 
                imposes considerable overhead.
                <p>
                This field should only be set to 
                <code>TRUE</code> when the <code>trace_file_name</code> 
                contains the full path of the desired trace 
                file, and either there is no open 
                trace file on the cache, or the 
                <code>close_trace_file</code> field is also <code>TRUE</code>.
                <p>
                The trace file feature is unsupported
                unless used at the direction of THG.
                It is intended to allow THG to collect 
                a trace of cache activity in cases of 
                occult failures and/or poor performance 
                seen in the field, so as to aid in
                reproduction in the lab.  If you use 
                it absent the direction of THG, you 
                are on your own.
                <p>
                </td></tr>

        <tr>
           <td valign="top"><em>hbool_t</em> <code>close_trace_file</code>
                &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Boolean field indicating whether 
                the current trace file (if any) should 
                be closed.
                <p>
                See the above comments on the 
                <code>open_trace_file</code> field.  This field
                should be set to <code>FALSE</code> unless there 
                is an open trace file on the cache 
                that you wish to close.
                <p>
                The trace file feature is unsupported
                unless used at the direction of THG.
                It is intended to allow THG to collect 
                a trace of cache activity in cases of 
                occult failures and/or poor performance 
                seen in the field, so as to aid in
                reproduction in the lab.  If you use 
                it absent the direction of THG, you 
                are on your own.
                <p>
                </td></tr>

        <tr>
           <td valign="top"><em>char</em> <code>trace_file_name[]</code>
                &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Full path of the trace file to be 
                opened if the <code>open_trace_file</code> field 
                is <code>TRUE</code>.
                <p>
                In the parallel case, an ascii 
                representation of the MPI rank of
                the process will be appended to the 
                file name to yield a unique trace 
                file name for each process.
                <p>
                The length of the path must not 
                exceed <code>H5AC__MAX_TRACE_FILE_NAME_LEN</code> 
                characters.
                <p>
                The trace file feature is unsupported
                unless used at the direction of THG.
                It is intended to allow THG to collect 
                a trace of cache activity in cases of 
                occult failures and/or poor performance 
                seen in the field, so as to aid in
                reproduction in the lab.  If you use 
                it absent the direction of THG, you 
                are on your own.
                <p>
                </td></tr>

        <tr>
           <td valign="top"><em>hbool_t</em> <code>evictions_enabled</code>
                &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: A boolean flag indicating whether evictions
		from the metadata cache are enabled.  This flag is initially 
                set to <code>TRUE</code>.
                <p>
                In rare circumstances, the raw data throughput requirements
		may be so high that the user wishes to postpone metadata 
                writes so as to reserve I/O throughput for raw data.  The
                <code>evictions_enabled</code> field exists to allow this.
                However, this is an extreme step, and you have no business
                doing it unless you have read the User Guide section on 
		metadata caching, and have considered all other options 
		carefully.
                <p>
                The <code>evictions_enabled</code> field may not be set to 
                <code>FALSE</code> unless all adaptive cache resizing code 
                is disabled via the <code>incr_mode</code>, 
                <code>flash_incr_mode</code>, and <code>decr_mode</code>
                fields.
                <p>
                When this flag is set to <code>FALSE</code>, 
                the metadata cache will not attempt to evict entries 
                to make space for new entries, and thus will grow without
                bound.
                <p>
                Evictions will be re-enabled when this field is set back 
                to <code>TRUE</code>.  This should be done as soon as 
                possible.
                <p>
                </td></tr>

        <tr>
		    <td valign="top"><em>hbool_t</em> <code>set_initial_size</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Boolean flag indicating whether the cache 
			  should be created with a user specified initial size.</td></tr>
        <tr>
		    <td valign="top"><em>size_t</em> <code>initial_size</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: If set_initial_size is TRUE, initial_size must 
			  contains the desired initial size in bytes.  This value must lie 
			  in the closed interval [min_size, max_size]. (see below)</td></tr>
        <tr>
		    <td valign="top"><em>double</em> <code>min_clean_fraction</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: This field specifies the minimum fraction of 
			  the cache that must be kept either clean or empty.
              <p>The value must lie in the interval [0.0, 1.0].  0.01 is a
              good place to start in the serial case.  In the parallel case,
              a larger value is needed -- see the overview of the metadata
              cache in the 
              &ldquo;<a href="../Advanced/MetadataCache/index.html">
              Metadata Caching in HDF5</a>&rdquo; section of the 
              <cite>HDF5 User&rsquo;s Guide</cite> for details.</td></tr>
        <tr>
		    <td valign="top"><em>size_t</em> <code>max_size</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Upper bound (in bytes) on the range of values 
			  that the adaptive cache resize code can select as the maximum 
			  cache size.</td></tr>
        <tr>
		    <td valign="top"><em>size_t</em> <code>min_size</code>&nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Lower bound (in bytes) on the range of values 
			  that the adaptive cache resize code can select as the maximum 
			  cache size.</td></tr>
        <tr>
		    <td valign="top"><em>long int</em> <code>epoch_length</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Number of cache accesses between runs of the 
			  adaptive cache resize code. 50,000 is a good starting number.</td></tr>

<!-- NEW PAGE -->
        <tr><td colspan="2">&nbsp;</td></tr>

		<tr><td colspan="2"><strong>Increment configuration section:</strong></td></tr>
		<tr>
		    <td valign="top"><em>enum&nbsp;H5C_cache_incr_mode</em>&nbsp;<code>incr_mode</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">&nbsp;<br>
                          IN: Enumerated value indicating the operational 
			  mode of the automatic cache size increase code.  At present, only 
			  two values are legal:
              <p>H5C_incr__off:  Automatic cache size increase is disabled, and 
			  the remaining increment fields are ignored.
              <p>H5C_incr__threshold:  Automatic cache size increase is enabled 
			  using the hit rate threshold algorithm.</td></tr>

<!--
        <tr>
           <td valign="top" colspan=2><em>enum H5C_cache_flash_incr_mode</em> 
                <code>flash_incr_mode</code>
                &nbsp;&nbsp;&nbsp;&nbsp;
                <br>
                <em>double</em> <code>flash_multiple</code>
                <br>
                <em>double</em> <code>flash_threshold</code>
                </td></tr>

        <tr>
            <td valign="top">&nbsp;
            <td valign="top">IN: Three related but as-yet-undocumented fields.
                <p>
                From the source code file <code>H5ACpublic.h</code>:

                <p>
                </td></tr>
-->
        <tr>
		    <td valign="top"><em>double</em> <code>lower_hr_threshold</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Hit rate threshold used by the hit rate threshold 
			  cache size increment algorithm.
              <p>When the hit rate over an epoch is below this threshold and the cache 
			  is full, the maximum size of the cache is multiplied by increment (below), 
			  and then clipped as necessary to stay within max_size, and possibly 
			  max_increment.
              <p>This field must lie in the interval [0.0, 1.0].  0.8 or 0.9 is a good 
			  place to start.</td></tr>
        <tr>
		    <td valign="top"><em>double</em> <code>increment</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Factor by which the hit rate threshold cache size 
			  increment algorithm multiplies the current cache max size to obtain a 
			  tentative new cache size.
              <p>The actual cache size increase will be clipped to satisfy the 
			  max_size specified in the general configuration, and possibly max_increment 
			  below.
              <p>The parameter must be greater than or equal to 1.0 -- 2.0 is a reasonable 
			  value.
              <p>If you set it to 1.0, you will effectively disable cache size increases.</td></tr>

<!-- NEW PAGE -->

        <tr>
		    <td valign="top"><em>hbool_t</em> <code>apply_max_increment</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Boolean flag indicating whether an upper limit 
			  should be applied to the size of cache size increases.</td></tr>
        <tr>
		    <td valign="top"><em>size_t</em> <code>max_increment</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Maximum number of bytes by which cache size 
			  can be increased in a single step -- if applicable.</td></tr>

		<tr>
		    <td valign="top"><em>enum&nbsp;H5C_cache_flash_incr_mode</em>&nbsp;<code>flash_incr_mode</code>&nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Enumerated value indicating the operational mode of 
			  the flash cache size increase code.  At present, only the following 
			  values are legal:
              <p>H5C_flash_incr__off:  Flash cache size increase is disabled.
              <p>H5C_flash_incr__add_space:  Flash cache size increase is enabled using 
			  the add space algorithm.</td></tr>

        <tr>
		    <td valign="top"><em>double</em> <code>flash_threshold</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: The factor by which the current maximum cache 
			  size is multiplied to obtain the minimum size 
                          entry / entry size increase which may trigger a 
                          flash cache size increase.  
                          <p>
                          At present, this value must lie in the range 
                          [0.1, 1.0].</td></tr>

        <tr>
		    <td valign="top"><em>double</em> <code>flash_multiple</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: The factor by which the size of the triggering
			  entry / entry size increase is multiplied to obtain
                          the initial cache size increment.  This increment 
                          may be reduced to reflect existing free space in 
                          the cache and the <code>max_size</code> field
                          above.
                          <p>
                          At present, this field must lie in the range
                          [0.1, 10.0].</td></tr>
        <tr><td colspan="2">&nbsp;</td></tr>
<!-- NEW PAGE -->
		<tr><td colspan="2"><strong>Decrement configuration section:</strong></td></tr>
        <tr>
		    <td valign="top"><em>enum&nbsp;H5C_cache_decr_mode</em>&nbsp;<code>decr_mode</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Enumerated value indicating the operational mode 
			  of the automatic cache size decrease code.  At present, the following 
			  values are legal:
              <p>H5C_decr__off:  Automatic cache size decrease is disabled.
              <p>H5C_decr__threshold:  Automatic cache size decrease is enabled 
			  using the hit rate threshold algorithm.
              <p>H5C_decr__age_out:  Automatic cache size decrease is enabled using the 
			  ageout algorithm.
              <p>H5C_decr__age_out_with_threshold: Automatic cache size decrease is 
			  enabled using the ageout with hit rate threshold algorithm</td></tr>
        <tr>
		    <td valign="top"><em>double</em> <code>upper_hr_threshold</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Hit rate threshold for the hit rate threshold and 
			  ageout with hit rate threshold cache size decrement algorithms.
              <p>When decr_mode is H5C_decr__threshold, and the hit rate over a 
			  given epoch exceeds the supplied threshold, the current maximum 
			  cache size is multiplied by decrement to obtain a tentative new 
			  (and smaller) maximum cache size.
              <p>When decr_mode is H5C_decr__age_out_with_threshold, there is no 
			  attempt to find and evict aged out entries unless the hit rate in 
			  the previous epoch exceeded the supplied threshold.
              <p>This field must lie in the interval [0.0, 1.0].
              <p>For H5C_incr__threshold, .9995 or .99995 is a good place to start.
              <p>For H5C_decr__age_out_with_threshold, .999 might be more useful.</td></tr>
        <tr>
		    <td valign="top"><em>double</em> <code>decrement</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: In the hit rate threshold cache size decrease 
			  algorithm, this parameter contains the factor by which the current 
			  max cache size is multiplied to produce a tentative new cache size.
              <p>The actual cache size decrease will be clipped to satisfy the 
			  min_size specified in the general configuration, and possibly 
			  max_decrement below.
              <p>The parameter must be be in the interval [0.0, 1.0].
              <p>If you set it to 1.0, you will effectively disable cache size 
			  decreases.  0.9 is a reasonable starting point.</td></tr>
		<tr>
		    <td valign="top"><em>hbool_t</em> <code>apply_max_decrement</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Boolean flag indicating whether an upper limit 
			  should be applied to the size of cache size decreases.</td></tr>
        <tr>
		    <td valign="top"><em>size_t</em> <code>max_decrement</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Maximum number of bytes by which the maximum cache 
			  size can be decreased in any single step -- if applicable.</td></tr>
        <tr>
		    <td valign="top"><em>int</em> <code>epochs_before_eviction</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: In the ageout based cache size reduction algorithms, 
			  this field contains the minimum number of epochs an entry must remain 
			  unaccessed in cache before the cache size reduction algorithm tries to 
			  evict it. 3 is a reasonable value.</td></tr>
        <tr>
		    <td valign="top"><em>hbool_t</em> <code>apply_empty_reserve</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Boolean flag indicating whether the ageout based 
			  decrement algorithms will maintain a empty reserve when decreasing 
			  cache size.</td></tr>
        <tr>
		    <td valign="top"><em>double</em> <code>empty_reserve</code>
			  &nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td valign="top">IN: Empty reserve as a fraction of maximum cache 
			  size if applicable.
              <p>When so directed, the ageout based algorithms will not decrease 
			  the maximum cache size unless the empty reserve can be met.
              <p>The parameter must lie in the interval [0.0, 1.0].  0.1 or 0.05 
			  is a good place to start.</td></tr>

<!-- NEW PAGE -->

		<tr>
		    <td colspan="2"><strong>Parallel configuration section:</strong></td>
		</tr>
		<tr>
		    <td valign="top"><em>int</em> <code>dirty_bytes_threshold</code></td>
			<td valign="top">IN: Threshold number of bytes of dirty metadata 
			  generation for triggering synchronizations of the metadata caches 
			  serving the target file in the parallel case.
			  <p>Synchronization occurs whenever the number of bytes of dirty 
			  metadata created since the last synchronization exceeds this limit.
              <p>This field only applies to the parallel case.  
              While it is ignored elsewhere, it can still
              draw a value out of bounds error.
			  <p>It must be consistant across all caches on any given file.
			  <p>By default, this field is set to 256 KB.  It shouldn't be more
			  than half the current max cache size times the min clean 
			  fraction.</td>
		</tr>
    </table></ul>
  <dt><strong>Returns:</strong>
      <dd>Returns a non-negative value if successful; otherwise returns a
        negative value.
</dl>

