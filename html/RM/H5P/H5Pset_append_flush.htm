

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://www.hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have      *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!--__ ***********************************************************  -->
<!--__ Do not alter the next line; it is used by the PDF generator. -->
<!--__ ***********************************************************  -->
<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Pset_append_flush" -->

<hr />
<dl>

<dt><div align="right"><font color="999999" size="-1"><i>
    Last modified: 7 January 2016
    </i></font></div></dt>
    <br />

<dt><strong>Name:</strong> 
    <a name="Property-SetAppendFlush">H5Pset_append_flush</a></dt>
    <br />

<dt><strong>Signature:</strong></dt>
    <dd><code><em>herr_t</em> H5Pset_append_flush (
              <em>hid_t</em> dapl_id, 
              <em>int</em> ndims, 
              <em>const hsize_t</em> boundary[], 
              <em>H5D_append_cb_t</em>  func, 
              <em>void</em> *user_data
        )</code></dd>
    <br />

<dt><strong>Purpose:</strong></dt>  
    <dd>Sets two actions to perform when the size of a dataset&rsquo;s 
        dimension being appended reaches a specified boundary. </dd>
    <br />

<dt><strong>Description:</strong></dt> 
    <dd><code>H5Pset_append_flush</code> sets the following two actions to 
        perform for a dataset associated with the dataset access property 
        list <code>dapl_id</code>: 
        <p>
        <ul>
            <li>Call the callback function <code>func</code> set in the 
                property list</li>
            <li>Flush the dataset associated with the dataset access 
                property list</li>
        </ul>
        </p>
        <p>
        When a user is appending data to a dataset via <code>H5DOappend</code> 
        and the dataset&rsquo;s newly extended dimension size hits a specified 
        boundary, the library will first perform action #1 listed above.  
        Upon return from the callback function, the library will then perform 
        the above action #2 and return to the user.  If no boundary is hit 
        or set, the two actions above are not invoked.</p>
        <p>
        The specified boundary is indicated by the parameter 
        <code>boundary</code>. 
        It is a 1-dimensional array with <code>ndims</code> elements, 
        which should be the same as the rank of the dataset&rsquo;s dataspace.  
        While appending to a dataset along a particular dimension index via 
        <code>H5DOappend</code>, the library determines a boundary is reached 
        when the resulting dimension size is divisible by 
        <code>boundary[index]</code>. 
        A zero value for <code>boundary[index]</code> indicates no 
        boundary is set for that dimension index.</p>
        <p>
        The setting of this property will apply only for a chunked dataset 
        with an extendible dataspace. A dataspace is extendible when it is 
        defined with either one of the following: </p>
        <ul>
          <li>A dataspace with fixed current and maximum dimension sizes</li>
          <li>A dataspace with at least one unlimited dimension for its 
              maximum dimension size</li>
        </ul>

        <p>
        When creating or opening a chunked dataset, the library will check 
        whether the boundary as specified in the access property list is set 
        up properly. The library will fail the dataset create or open if the
        following conditions are true: </p>
        <ul>
          <li><code>ndims</code>, the number of elements for 
              <code>boundary</code>, is not the same as the rank of the 
              dataset&rsquo;s dataspace.</li> 
          <li>A non-zero boundary value is specified for a non-extendible 
              dimension.</li>
        </ul>

        <p>
        The callback function <code>func</code> must conform to the
        following prototype:</p> 
        <ul>
            <li><code>typedef <em>herr_t</em> (H5D_append_cb_t)(<em>hid_t</em> 
                dataset_id, <em>hsize_t</em> *cur_dims, <em>void</em> 
                *user_data) </code>
        </ul>
        <p>
        The parameters of the callback function, per the above prototype, 
        are defined as follows:</p>
        <ul>
            <li><code>dataset_id</code> is the dataset identifier.</li>
            <li><code>cur_dims</code> is the dataset&rsquo;s current 
                dimension sizes when a boundary is hit.</li>
            <li><code>user_data</code> is the user-defined input data.</li>
        </ul>
    </dd>
    <br />


<dt><strong>Parameters:</strong></dt> 
    <dd><table width="100%">
        <tr valign="top">
          <td width="20%"><code><em>hid_t</em> dapl_id</code></td>
          <td>IN: Dataset access property list identifier.</td></tr>
        <tr valign="top">
          <td><code><em>int</em> ndims</code></td>
          <td>IN: The number of elements for boundary.</td></tr>
        <tr valign="top">
          <td><code><em>hsize_t</em> *boundary</code></td>
          <td>IN: The dimension sizes used to determine the boundary.
              </td></tr>
        <tr valign="top">
          <td><code><em>H5D_append_cb_t</em>&nbsp;func&nbsp;&nbsp;&nbsp;</code></td>
          <td>IN: The user-defined callback function.</td></tr>
        <tr valign="top">
          <td><code><em>void</em> *user_data</code></td>
          <td>IN: The user-defined input data.</td></tr>
        </table>
    </dd>
    <br />

<dt><strong>Returns:</strong></dt> 
    <dd>Returns a non-negative value if successful; otherwise returns a 
    negative value.</dd>
    <br />

<dt><strong>Example Usage:</strong></dt> 
    <dd>The example below illustrates the usage of this public routine to 
        manage flush behavior while appending to a dataset. Note also the 
        use of <a href="../HL/RM_HDF5Optimized.html#H5DOappend">
        <code>H5DOappend</code></a>.
        <dir><pre>
hsize_t dims[2] = {0, 100};
hsize_t max_dims[2] = {H5S_UNLIMITED, 100};
hsize_t boundary_dims[2] = {5, 0};
unsigned counter;
void *buf;
hid_t file_id;
hid_t dataset_id, dapl_id, type;

/* Open the file */
file_id = H5Fopen(FILE, H5F_ACC_RDWR|H5F_ACC_SWMR_WRITE, H5P_DEFAULT);

/* Create a copy of the dataset access property list */
dapl_id = H5Pcreate(H5P_DATASET_ACCESS);

/* Set up the append property values */
/* boundary_dims[0]=5: to invoke callback and flush every 5 lines */
/* boundary_dims[1]=0: no boundary is set for the non-extendible dimension */
/* append_cb: callback function to invoke when hitting boundary (see below) */
/* counter: user data to pass along to the callback function */
H5Pset_append_flush(dapl_id, 2, boundary_dims, append_cb, &counter);

/* DATASET is a 2-dimensional chunked dataset with dataspace: 
   dims[] and max_dims[] */
dataset_id = H5Dopen2(file_id, “dataset”, dapl_id);

/* Get the dataset’s datatype */
type = H5Dget_type(dataset_id);

/* Append 50 lines along the unlimited dimension (index = 0) to the dataset */
for(n = 0; n < 50; n++) {

    /* Append 1 line to the dataset */  
    /* Whenever hitting the specified boundary i.e., every 5 lines, 
       the library will invoke append_cb() and then flush the dataset. */ 
    H5DOappend(dataset_id, H5P_DEFAULT, 0, 1, type, buf);
}
:
:
:
/* counter will be equal to 10 */
:
:
:

/* The callback function */
static herr_t
append_cb(hid_t dset_id, hsize_t *cur_dims, void *_udata)
{
    unsigned *count = (unsigned *)_udata;
    ++(*count++);
    return 0;
} /* append_cb() */
</pre>
    </dir>
    </dd>
    <br />

<dt><strong>Fortran Interface:</strong></dt>
    <dd>None</dd>
    <br />


<dt><strong>See Also:</strong></dt>
    <ul>
      <li><a href="../RM/RM_H5F.html#File-StartSwmrWrite">H5Fstart_swmr_write</a></li>
      <li><a href="../HL/RM_HDF5Optimized.html#H5DOappend">H5DOappend</a></li>
      <li><a href="../RM/RM_H5P.html#Property-SetAppendFlush">H5Pset_append_flush</a></li>
      <li><a href="../RM/RM_H5P.html#Property-GetAppendFlush">H5Pget_append_flush</a></li>
      <li><a href="../RM/RM_H5P.html#Property-SetObjectFlushCb">H5Pset_object_flush_cb</a></li>
      <li><a href="../RM/RM_H5P.html#Property-GetObjectFlushCb">H5Pget_object_flush_cb</a></li>
    </ul>
    <br />

    <ul>
      <li><a href="../RM/RM_H5O.html#Object-DisableMdcFlushes">H5Odisable_mdc_flushes</a></li>
      <li><a href="../RM/RM_H5O.html#Object-EnableMdcFlushes">H5Oenable_mdc_flushes</a></li>
      <li><a href="../RM/RM_H5O.html#Object-AreMdcFlushesDisabled">H5Oare_mdc_flushes_disabled</a></li>
      <li><a href="../RM/RM_H5F.html#File-DisableMdcFlushes">H5Fdisable_mdc_flushes</a></li>
      <li><a href="../RM/RM_H5F.html#File-EnableMdcFlushes">H5Fenable_mdc_flushes</a></li>
      <li><a href="../RM/RM_H5F.html#File-AreMdcFlushesDisabled">H5Fare_mdc_flushes_disabled</a></li>
      <li><a href="../RM/RM_H5F.html#File-GetMdcFlushDisabledObjIds">H5Fget_mdc_flush_disabled_obj_ids</a></li>
    </ul>
    <br />

    <ul>
      <li><a href="../RM/RM_H5D.html#Dataset-Flush">H5Dflush</a></li>
      <li><a href="../RM/RM_H5D.html#Dataset-Refresh">H5Drefresh</a></li>
      <li><a href="../RM/RM_H5G.html#Group-Flush">H5Gflush</a></li>
      <li><a href="../RM/RM_H5G.html#Group-Refresh">H5Grefresh</a></li>
      <li><a href="../RM/RM_H5O.html#Object-Flush">H5Oflush</a></li>
      <li><a href="../RM/RM_H5O.html#Object-Refresh">H5Orefresh</a></li>
      <li><a href="../RM/RM_H5T.html#Datatype-Flush">H5Tflush</a></li>
      <li><a href="../RM/RM_H5T.html#Datatype-Refresh">H5Trefresh</a></li>
    </ul>
    <br />



<dt><strong>History:</strong></dt>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>Change</strong></td></tr>
        <tr>
          <td valign="top">1.10.0</td>
          <td valign="top">
            C function introduced with this release. </td></tr>
        </table></dd>

</dl>
<br />
<br />
<br />

