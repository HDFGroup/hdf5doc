

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Pinsert" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 23 August 2012
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Property-Insert">H5Pinsert</a>
  <dt><strong>Signatures:</strong>
    <dd>
    <table width=95%>
        <tr><td width=80% align=left valign=top>
            <a href="#Property-Insert1">
            <em>herr_t</em> <code>H5Pinsert</code>(
                  <em>hid_t</em>&nbsp;<code>plid</code>,
                  <em>const&nbsp;char&nbsp;*</em><code>name</code>,
                  <em>size_t</em>&nbsp;<code>size</code>,
                  <em>void&nbsp;*</em><code>value</code>,
                  <em>H5P_prp_set_func_t</em>&nbsp;<code>set</code>,
                  <em>H5P_prp_get_func_t</em>&nbsp;<code>get</code>,
                  <em>H5P_prp_delete_func_t</em>&nbsp;<code>delete</code>,
                  <em>H5P_prp_copy_func_t</em>&nbsp;<code>copy</code>,
                  <em>H5P_prp_close_func_t</em>&nbsp;<code>close</code>&nbsp;)</a>
            <br>&nbsp;
            </td><td width=10% align=right valign=top>
                [1]
        </td></tr>
        <tr><td align=left valign=top>
            <a href="#Property-Insert2">
            <em>herr_t</em> <code>H5Pinsert</code>(
                  <em>hid_t</em>&nbsp;<code>plid</code>,
                  <em>const&nbsp;char&nbsp;*</em><code>name</code>,
                  <em>size_t</em>&nbsp;<code>size</code>,
                  <em>void&nbsp;*</em><code>value</code>,
                  <em>H5P_prp_set_func_t</em>&nbsp;<code>set</code>,
                  <em>H5P_prp_get_func_t</em>&nbsp;<code>get</code>,
                  <em>H5P_prp_delete_func_t</em>&nbsp;<code>delete</code>,
                  <em>H5P_prp_copy_func_t</em>&nbsp;<code>copy</code>,
                  <em>H5P_prp_compare_func_t</em>&nbsp;<code>compare</code>,
                  <em>H5P_prp_close_func_t</em>&nbsp;<code>close</code>&nbsp;)</a>
            </td><td align=right valign=top>
                [2]
        </td></tr>
    </table

  <p>
  <dt><strong>Purpose:</strong>
    <dd>Registers a temporary property with a property list.
  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Pinsert</code> is a macro that is mapped to either
      <a href="#Property-Insert1"><code>H5Pinsert1</code></a> or
      <a href="#Property-Insert2"><code>H5Pinsert2</code></a>,
      depending on the needs of the application.
      <p>
      Such macros are provided to facilitate application compatibility.
      For example:
      <ul>
          <li>The <code>H5Pinsert</code> macro 
              will be mapped to <code>H5Pinsert1</code> and 
              will use the <code>H5Pinsert1</code> syntax 
              (first signature above)
              if an application is coded for HDF5 Release 1.6.<i>x</i>.
          <li>The <code>H5Pinsert</code> macro 
              mapped to <code>H5Pinsert2</code> and 
              will use the <code>H5Pinsert2</code> syntax 
              (second signature above)
              if an application is coded for HDF5 Release 1.8.<i>x</i>.
      </ul>
      <p>
      When both the HDF5 Library and the application are built and 
      installed with no specific compatibility flags, 
      <code>H5Pinsert</code> is mapped to the most recent version of
      the function, currently 
      <a href="#Property-Insert2"><code>H5Pinsert2</code></a>.
      If the library and/or application is compiled for Release 1.6
      emulation, <code>H5Pinsert</code> will be mapped to 
      <a href="#Property-Insert1"><code>H5Pinsert1</code></a>.
      Function-specific flags are available to override these settings 
      on a function-by-function basis when the application is compiled. 
      <p>
      Specific compile-time compatibility flags and the resulting 
      mappings are as follows:

      <dir>
      <table border=0 cellpadding=4>
        <tr valign=top align=left> 
          <th>Compatibility setting</th>
          <th><code>H5Pinsert</code> mapping</th>
        </tr><tr valign=top align=left>
          <td colspan=2><hr><u><a href="APICompatMacros.html#GlobalSettings">Global settings</a></u></td>
        </tr><tr valign=top align=left>
          <td>No compatibility flag</td>
          <td><code>H5Pinsert2</code>&nbsp;</td>
        </tr><tr valign=top align=left>
          <td>Enable deprecated symbols</td>
          <td><code>H5Pinsert2</code>&nbsp;</td>
        </tr><tr valign=top align=left>
          <td>Disable deprecated symbols</td>
          <td><code>H5Pinsert2</code>&nbsp;</td>
        </tr><tr valign=top align=left>
          <td>Emulate Release 1.6 interface</td>
          <td><code>H5Pinsert1</code>&nbsp;</td>
        </tr>
<!-- NEW PAGE -->
        <tr valign=top align=left>
          <td colspan=2><hr><u><a href="APICompatMacros.html#FunctionLevelSettings">Function-level macros</a></u></td>
        </tr><tr valign=top align=left>
          <td><code>H5Pinsert_vers = 2&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
          <td><code>H5Pinsert2</code></td>
        </tr><tr valign=top align=left>
          <td><code>H5Pinsert_vers = 1</code></td>
          <td><code>H5Pinsert1</code></td>
        </tr>
      </table>
      </dir>
      
      <p>For more information on macro use and mappings, see the 
      &ldquo;<a href="APICompatMacros.html">API Compatibility Macros 
      in HDF5</a>&rdquo; document.
      
  <p>
  <dd><strong>Interface history:</strong> &nbsp;
        Signature [1] above is the original <code>H5Pinsert</code> interface
        and the only interface available prior to HDF5 Release 1.8.0.
        This signature and the corresponding function are now deprecated 
        but will remain directly callable as 
        <a href="#Property-Insert1"><code>H5Pinsert1</code></a>.
        <p>
        Signature [2] above was introduced with HDF5 Release 1.8.0
        and is the recommended and default interface.
        It is directly callable as
        <a href="#Property-Insert2"><code>H5Pinsert2</code></a>.
        <p>
        See &ldquo;<a href="APICompatMacros.html">API Compatibility 
        Macros in HDF5</a>&rdquo; 
        for circumstances under which either of these functions might not
        be available in an installed instance of the HDF5 Library.


  <p>
  <dt><strong>Programming Note for C++ Developers Using C Functions:</strong>
    <dd>
      <p>If a C routine that takes a function pointer as an argument is 
      called from within C++ code, the C routine should be returned from 
      normally. </p>

      <p>Examples of this kind of routine include callbacks such as 
      <code>H5Pset_elink_cb</code> and <code>H5Pset_type_conv_cb</code> 
      and functions such as <code>H5Tconvert</code> and 
      <code>H5Ewalk2</code>.</p>

      <p>Exiting the routine in its normal fashion allows the HDF5 C 
      Library to clean up its work properly. In other words, if the C++ 
      application jumps out of the routine back to the C++ 
      &ldquo;catch&rdquo; statement, the library is not given the 
      opportunity to close any temporary data structures that were set 
      up when the routine was called. The C++ application should save 
      some state as the routine is started so that any problem that 
      occurs might be diagnosed.</p>






  <p>
  <dt><strong>Fortran90 Interface:</strong> h5pinsert_f
    <dd>

        <?php include("H5P/h5pinsert_f_F90.htm"); ?>

<!-- NEW PAGE -->
  <p>
  <dt><strong>Fortran2003 Interface:</strong> h5pinsert_f
    <dd>

        <?php include("H5P/h5pinsert_f_F03.htm"); ?>

  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>Change</strong></td></tr>
        <tr>
          <td valign="top">1.8.8</td>
          <td valign="top">
            Fortran updated to Fortran2003.</td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">The function 
            C function <code>H5Pinsert</code> renamed to 
            <code>H5Pinsert1</code> 
            and deprecated in this release.
            <br>
            C macro <code>H5Pinsert</code> 
            and the C function <code>H5Pinsert2</code>
            introduced in this release.</td></tr>
    </table>
</dl>



