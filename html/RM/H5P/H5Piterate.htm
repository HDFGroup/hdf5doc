

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Piterate" -->
<hr>
<dl>


<dt><div align=right><font color=999999 size=-1><i>
    Last modified: 23 August 2012
    </i></font></div>



  <dt><strong>Name:</strong> <a name="Property-Iterate">H5Piterate</a>

  <dt><strong>Purpose:</strong>
    <dd>Iterates over properties in a property class or list.

  <dt><strong>Signature:</strong>
    <dd><em>int</em> <code>H5Piterate</code>(
               <em>hid_t</em> <code>id</code>,
               <em>int *</em> <code>idx</code>,
               <em>H5P_iterate_t</em> <code>iter_func</code>,
               <em>void *</em> <code>iter_data</code>
	)

  <dt><strong>Description:</strong>
    <dd>
    <p><code>H5Piterate</code> iterates over the properties in the 
    property object specified in <code>id</code>, which may be either a
    property list or a property class, performing a specified 
    operation on each property in turn.  
	
    <p>
    For each property in the object, <code>iter_func</code> and
    the additional information specified below are passed to the
    <code>H5P_iterate_t</code> operator function.  

    <p>
    The iteration begins with the <code>idx</code>-th property in 
    the object; the next element to be processed by the operator 
    is returned in <code>idx</code>.
    If <code>idx</code> is NULL, the iterator starts at the first 
    property; since no stopping point is returned in this case, 
    the iterator cannot be restarted if one of the calls to its 
    operator returns non-zero.
    </p>

    The prototype for the <code>H5P_iterate_t</code> operator is
    as follows:
        <ul> <dl>
            <dt><em>typedef herr_t</em> (*<code>H5P_iterate_t</code>)(
                                  <em>hid_t</em> <code>id</code>, 
                                  <em>const char *</em><code>name</code>, 
                                  <em>void *</em><code>iter_data</code>
	        )
        </dl> </ul>
    The operation receives the property list or class identifier for 
    the object being iterated over, <code>id</code>,
    the name of the current property within the object, <code>name</code>, 
    and the pointer to the operator data passed in to
    <code>H5Piterate</code>, <code>iter_data</code>.
    <p></p>

    The valid return values from an operator are as follows:
        <ul><table>
        <tr>
            <td valign=top>Zero</td>
            <td>Causes the iterator to continue, returning zero when all
                properties have been processed</td></tr>
        <tr>
            <td valign=top>Positive</td>
            <td>Causes the iterator to immediately return that positive 
                value, indicating short-circuit success.  The iterator can 
                be restarted at the index of the next property</td></tr>
        <tr>
            <td valign=top>Negative</td>
            <td>Causes the iterator to immediately return that value,
                indicating failure.  The iterator can be restarted at the 
                index of the next property</td></tr>
        </table></ul>

    <P>
    <code>H5Piterate</code> assumes that the properties in the object 
    identified by <code>id</code> remain unchanged through the iteration.  
    If the membership changes during the iteration, the function's behavior 
    is undefined.

  <p>
  <dt><strong>Programming Note for C++ Developers Using C Functions:</strong>
    <dd>
      <p>If a C routine that takes a function pointer as an argument is 
      called from within C++ code, the C routine should be returned from 
      normally. </p>

      <p>Examples of this kind of routine include callbacks such as 
      <code>H5Pset_elink_cb</code> and <code>H5Pset_type_conv_cb</code> 
      and functions such as <code>H5Tconvert</code> and 
      <code>H5Ewalk2</code>.</p>

      <p>Exiting the routine in its normal fashion allows the HDF5 C 
      Library to clean up its work properly. In other words, if the C++ 
      application jumps out of the routine back to the C++ 
      &ldquo;catch&rdquo; statement, the library is not given the 
      opportunity to close any temporary data structures that were set 
      up when the routine was called. The C++ application should save 
      some state as the routine is started so that any problem that 
      occurs might be diagnosed.</p>




  <dt><strong>Parameters:</strong>
    <ul><table>
    <tr>
        <td><em>hid_t</em> <code>id</code></td>
        <td>IN: Identifier of property object to iterate over</td></tr>
    <tr>
        <td><em>int *</em> <code>idx</code></td>
        <td>IN/OUT: Index of the property to begin with</td></tr>
    <tr>
        <td><em>H5P_iterate_t</em>&nbsp;<code>iter_func&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
        <td>IN: Function pointer to function to be called with each 
                property iterated over</td></tr>
    <tr>
        <td><em>void *</em> <code>iter_data</code></td>
        <td>IN/OUT: Pointer to iteration data from user</td></tr>
    </table></ul>

<dt><strong>Returns:</strong>
    <dd>Success: the return value of the last call to
            <code>iter_func</code> if it was non-zero;
            zero if all properties have been processed
    <dd>Failure: a negative value
    

  <dt><strong>Fortran90 Interface:</strong>
    <dd>None.
<!--
	<pre>
SUBROUTINE
	</pre>		
-->
		
		<!--<dt><strong>Non-C API(s):</strong>
    	<dd>
        
        <img src="Graphics/Java.gif"> 
        <img src="Graphics/C++.gif">
        -->
</dl>

