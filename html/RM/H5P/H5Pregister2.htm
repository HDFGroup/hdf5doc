

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Pregister2" -->
<hr>
<dl>



  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 23 August 2012
      </i></font></div>




  <dt><strong>Name:</strong> <a name="Property-Register2">H5Pregister2</a>

  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Pregister2</code>(
                  <em>hid_t</em> <code>class</code>,
                  <em>const char *</em> <code>name</code>,
                  <em>size_t</em> <code>size</code>,
                  <em>void *</em> <code>default</code>,
                  <em>H5P_prp_create_func_t</em> <code>create</code>,
                  <em>H5P_prp_set_func_t</em> <code>set</code>,
                  <em>H5P_prp_get_func_t</em> <code>get</code>,
                  <em>H5P_prp_delete_func_t</em> <code>delete</code>,
                  <em>H5P_prp_copy_func_t</em> <code>copy</code>,
                  <em>H5P_prp_compare_func_t</em> <code>compare</code>,
                  <em>H5P_prp_close_func_t</em> <code>close</code>
				 )
  <p>
  <dt><strong>Purpose:</strong>
    <dd>Registers a permanent property with a property list class.
  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Pregister2</code> registers a new property with a 
    property list class.  
    The property will exist in all property list objects of 
    <code>class</code> created after this routine finishes.  The name 
    of the property must not already exist, or this routine will fail.  
    The default property value must be provided and all new property 
    lists created with this property will have the property value set 
    to the default value.  Any of the callback routines may be set to
    NULL if they are not needed.

    <P>
    Zero-sized properties are allowed and do not store any data in the
    property list.  These may be used as flags to indicate the presence 
    or absence of a particular piece of information.  The default pointer 
    for a zero-sized property may be set to NULL.  
    The property <code>create</code> and <code>close</code> callbacks 
    are called for zero-sized properties, but the <code>set</code> and 
    <code>get</code> callbacks are never called.
    </P>
	
    <P>
    The <code>create</code> routine is called when a new property list 
    with this property is being created.  
    The <code>H5P_prp_create_func_t</code> callback function is defined 
    as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_create_func_t</code>)(
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>initial_value</code>);
        </ul>
    The parameters to this callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>const char *</em><code>name</code></td>
        <td>IN: The name of the property being modified</td></tr>
    <tr>
        <td><em>size_t</em> <code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void *</em><code>initial_value</code></td>
        <td>IN/OUT: The default value for the property being created,
                which will be passed to <code>H5Pregister2</code></td></tr>
    </table></ul>
    The <code>create</code> routine may modify the value to be set and 
    those changes will be stored as the initial value of the property.  
    If the <code>create</code> routine returns a negative value, 
    the new property value is not copied into the property and the 
    create routine returns an error value.
    <p></P>
	
    <P>
    The <code>set</code> routine is called before a new value is copied 
    into the property.  
    The <code>H5P_prp_set_func_t</code> callback function is defined 
    as follows:
        <ul><em>typedef herr_t</em> (*H5P_prp_set_func_t)(
            <em>hid_t </em><code>prop_id</code>, 
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>new_value</code>);
        </ul>
    The parameters to this callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>hid_t</em> <code>prop_id</code></td>
        <td>IN: The identifier of the property list being modified</td></tr>
    <tr>
        <td><em>const char *</em><code>name</code></td>
        <td>IN: The name of the property being modified</td></tr>
    <tr>
        <td><em>size_t </em><code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void **</em><code>new_value</code></td>
        <td>IN/OUT: Pointer to new value pointer for the property being 
		    modified</td></tr>
    </table></ul>
    
<!-- NEW PAGE -->
	The <code>set</code> routine may modify the value pointer to be set 
    and those changes will be used when setting the property's value.  
    If the <code>set</code> routine returns a negative value, the new 
    property value is not copied into the property and the 
    <code>set</code> routine returns an error value.  
    The <code>set</code> routine will not be called for the initial 
    value, only the <code>create</code> routine will be called.
    <p>
    <strong>Note:</strong> 
    The <code>set</code> callback function may be useful 
    to range check the value being set for the property 
    or may perform some transformation or translation of the
    value set.  The <code>get</code> callback would then 
    reverse the transformation or translation.  
    A single <code>get</code> or <code>set</code> callback 
    could handle multiple properties by 
    performing different actions based on the
    property name or other properties in the property list.

    <p>
    The <code>get</code> routine is called when a value is retrieved 
    from a property value.  
    The <code>H5P_prp_get_func_t</code> callback function is defined 
	as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_get_func_t</code>)(
            <em>hid_t </em><code>prop_id</code>, 
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>value</code>);
        </ul>
    The parameters to the callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>hid_t</em> <code>prop_id</code></td>
        <td>IN: The identifier of the property list being queried</td></tr>
    <tr>
        <td><em>const char *</em> <code>name</code></td>
        <td>IN: The name of the property being queried</td></tr>
    <tr>
        <td><em>size_t </em> <code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void *</em> <code>value</code></td>
        <td>IN/OUT: The value of the property being returned</td></tr>
    </table></ul>
    The <code>get</code> routine may modify the value to be returned from 
    the query and those changes will be returned to the calling routine.  
    If the <code>set</code> routine returns a negative value, the query 
    routine returns an error value.
    <p></P>

    <P>
    The <code>delete</code> routine is called when a property is being 
    deleted from a property list.  
    The <code>H5P_prp_delete_func_t</code> callback function is defined 
    as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_delete_func_t</code>)(
            <em>hid_t </em><code>prop_id</code>, 
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>value</code>);
        </ul>
    The parameters to the callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>hid_t</em> <code>prop_id</code></td>
        <td>IN: The identifier of the property list the property is being 
		    deleted from</td></tr>
    <tr>
        <td><em>const char *</em> <code>name</code></td>
        <td>IN: The name of the property in the list</td></tr>
    <tr>
        <td><em>size_t </em> <code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void *</em> <code>value</code></td>
        <td>IN: The value for the property being deleted</td></tr>
    </table></ul>
    The <code>delete</code> routine may modify the value passed in, 
    but the value is not used by the library when the <code>delete</code> 
    routine returns.  If the <code>delete</code> routine returns 
    a negative value, the property list delete routine returns 
    an error value but the property is still deleted.
    <p></P>

    <P>
<!-- NEW PAGE -->
    The <code>copy</code> routine is called when a new property list with 
    this property is being created through a copy operation.  
    The <code>H5P_prp_copy_func_t</code> callback function is defined
    as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_copy_func_t</code>)(
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>value</code>);
        </ul>
    The parameters to the callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>const char *</em><code>name</code></td>
        <td>IN: The name of the property being copied</td></tr>
    <tr>
        <td><em>size_t </em><code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void *</em><code>value</code></td>
        <td>IN/OUT: The value for the property being copied</td></tr>
    </table></ul>
    The <code>copy</code> routine may modify the value to be set and 
    those changes will be stored as the new value of the property.  
    If the <code>copy</code> routine returns a negative value, 
    the new property value is not copied into the property and 
    the copy routine returns an error value.
    <p></P>

    <P>
    The <code>compare</code> routine is called when a property list with 
    this property is compared to another property list with the same property.
    The <code>H5P_prp_compare_func_t</code> callback function is defined
    as follows:
        <ul><em>typedef int</em> (*<code>H5P_prp_compare_func_t</code>)(
            <em>const void *</em><code>value1</code>,
            <em>const void *</em><code>value2</code>,
            <em>size_t </em><code>size</code>);
        </ul>
    The parameters to the callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>const void *</em><code>value1</code></td>
        <td>IN: The value of the first property to compare</td></tr>
    <tr>
        <td><em>const void *</em><code>value2</code></td>
        <td>IN: The value of the second property to compare</td></tr>
    <tr>
        <td><em>size_t </em><code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    </table></ul>
    The <code>compare</code> routine may <EM>not</EM> modify the values.
    The <code>compare</code> routine should return a positive value if
    <code>value1</code> is greater than <code>value2</code>, a negative value
    if <code>value2</code> is greater than <code>value1</code> and zero if
    <code>value1</code> and <code>value2</code> are equal.
    <p></P>

    <P>
    The <code>close</code> routine is called when a property list with 
    this property is being closed.  
    The <code>H5P_prp_close_func_t</code> callback function is defined 
    as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_close_func_t</code>)(
            <em>hid_t </em><code>prop_id</code>, 
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>value</code>);
        </ul>
    The parameters to the callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>hid_t</em> <code>prop_id</code></td>
        <td>IN: The identifier of the property list being 
		    closed</td></tr>
    <tr>
        <td><em>const char *</em><code>name</code></td>
        <td>IN: The name of the property in the list</td></tr>
    <tr>
        <td><em>size_t</em> <code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void *</em><code>value</code></td>
        <td>IN: The value for the property being closed</td></tr>
    </table></ul>
    The <code>close</code> routine may modify the value passed in, 
    but the value is not used by the library when the 
    <code>close</code> routine returns.  
    If the <code>close</code> routine returns a negative value, 
    the property list close routine returns an error value but
    the property list is still closed.


  <p>
  <dt><strong>Programming Note for C++ Developers Using C Functions:</strong>
    <dd>
      <p>If a C routine that takes a function pointer as an argument is 
      called from within C++ code, the C routine should be returned from 
      normally. </p>

      <p>Examples of this kind of routine include callbacks such as 
      <code>H5Pset_elink_cb</code> and <code>H5Pset_type_conv_cb</code> 
      and functions such as <code>H5Tconvert</code> and 
      <code>H5Ewalk2</code>.</p>

      <p>Exiting the routine in its normal fashion allows the HDF5 C 
      Library to clean up its work properly. In other words, if the C++ 
      application jumps out of the routine back to the C++ 
      &ldquo;catch&rdquo; statement, the library is not given the 
      opportunity to close any temporary data structures that were set 
      up when the routine was called. The C++ application should save 
      some state as the routine is started so that any problem that 
      occurs might be diagnosed.</p>



  <p>
<!-- NEW PAGE -->
  <dt><strong>Parameters:</strong>
    <ul><table>
      <tr>
        <td valign="top"><em>hid_t</em> <code>class</code></td>
        <td valign="top">IN: Property list class to register permanent property 
            within</td></tr>
      <tr>
        <td valign="top"><em>const char *</em> <code>name</code></td>
        <td valign="top">IN: Name of property to register</td></tr>
      <tr>
        <td valign="top"><em>size_t</em> <code>size</code></td>
        <td valign="top">IN: Size of property in bytes</td></tr>
      <tr>
        <td valign="top"><em>void *</em> <code>default</code></td>
        <td valign="top">IN: Default value for property in newly created 
            property lists</td></tr>
      <tr>
        <td valign="top"><em>H5P_prp_create_func_t</em> <code>create</code></td>
        <td valign="top">IN: Callback routine called when a property list is 
            being created and the property value will be initialized</td></tr>
      <tr>
        <td valign="top"><em>H5P_prp_set_func_t</em> <code>set</code></td>
        <td valign="top">IN: Callback routine called before a new value is 
            copied into the property's value</td></tr>
      <tr>
        <td valign="top"><em>H5P_prp_get_func_t</em> <code>get</code></td>
        <td valign="top">IN: Callback routine called when a property value is 
            retrieved from the property</td></tr>
      <tr>
        <td valign="top"><em>H5P_prp_delete_func_t</em> <code>delete</code></td>
        <td valign="top">IN: Callback routine called when a property is deleted 
            from a property list</td></tr>
      <tr>
        <td valign="top"><em>H5P_prp_copy_func_t</em> <code>copy</code></td>
        <td valign="top">IN: Callback routine called when a property is copied 
            from a property list</td></tr>
      <tr>
        <td valign="top"><em>H5P_prp_compare_func_t</em>&nbsp;<code>compare</code>&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td valign="top">IN: Callback routine called when a property is 
            compared with another property list</td></tr>
      <tr>
        <td valign="top"><em>H5P_prp_close_func_t</em> <code>close</code></td>
        <td valign="top">IN: Callback routine called when a property list is 
            being closed and the property value will be disposed of</td></tr>
    </table></ul>
  <p>
  <dt><strong>Returns:</strong>
    <dd>Success: a non-negative value
    <dd>Failure: a negative value
  <p>
  <dt><strong>Fortran90 Interface:</strong> <!--h5pfunc_f--> 
    <dd>None.
  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>


