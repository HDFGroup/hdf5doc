

<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Pget_chunk_cache" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 8 May 2009
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Property-GetChunkCache">H5Pget_chunk_cache</a>

  <dt><strong>Signature:</strong>
    <dd><em>herr_t </em><code>H5Pget_chunk_cache</code>(
            <em>hid_t </em><code>dapl_id</code>,
            <em>size_t *</em><code>rdcc_nslots</code>,
            <em>size_t *</em><code>rdcc_nbytes</code>,
            <em>double *</em><code>rdcc_w0</code>
        )

  <p>
  <dt><strong>Purpose:</strong>
    <dd>Retrieves the raw data chunk cache parameters.

  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Pget_chunk_cache</code> 
      retrieves the number of chunk slots in the raw data chunk cache hash table
      , the maximum possible number of bytes in the raw data chunk cache, and
      the preemption policy value.
      <p>
      These values are retrieved from a dataset access property list.  If the
      values have not been set on the property list, then values returned will
      be the corresponding values from a default file access property list.
      <p>
      Any (or all) pointer arguments may be null pointers, in which case the
      corresponding datua is not returned.

  <p>
  <dt><strong>Parameters:</strong>
    <dd>
    <table>
      <tr valign="top">
        <td><em>hid_t </em><code>plist_id</code>
            </td><td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td>IN: Dataset access property list identifier.
            </td></tr>
      <tr valign="top">
        <td><em>size_t&nbsp;*</em><code>rdcc_nslots</code>
            </td><td>&nbsp;</td>
        <td>OUT: Number of chunk slots in the raw data chunk cache hash table.
            </td></tr>
      <tr valign="top">
        <td><em>size_t *</em><code>rdcc_nbytes</code>
            </td><td>&nbsp;</td>
        <td>OUT: Total size of the raw data chunk cache, in bytes.
            </td></tr>
      <tr valign="top">
        <td><em>double *</em><code>rdcc_w0</code>
            </td><td>&nbsp;</td>
        <td>OUT: Preemption policy.
            </td></tr>
    </table>

  <p>
  <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.

  <p>
  <dt><strong>Example Usage:</strong>

    <dd>The following code retrieves the chunk cache settings on the dataset
        access property list <code>dapl_id</code> into local variables:
<dir><pre>
size_t nslots, nbytes;
double w0;
status = H5Pget_chunk_cache(dapl_id, &amp;nslots, &amp;nbytes, &amp;w0);
</pre></dir>
    <dt><strong>Fortran90 Interface:</strong> h5pget_chunk_cache_f
    <dd>
	<pre>
  SUBROUTINE h5pget_chunk_cache_f(dapl_id, rdcc_nslots, rdcc_nbytes, rdcc_w0, hdferr)
    IMPLICIT NONE
    INTEGER(HID_T), INTENT(IN) :: dapl_id       ! Dataset access property list identifier.
    INTEGER(SIZE_T), INTENT(OUT) :: rdcc_nslots ! Number of chunk slots in the raw data chunk 
                                                ! cache hash table.
    INTEGER(SIZE_T), INTENT(OUT) :: rdcc_nbytes ! Total size of the raw data chunk cache, in bytes. 
    REAL, INTENT(OUT) :: rdcc_w0                ! Preemption policy.
    INTEGER, INTENT(OUT) :: hdferr              ! error code
                                                ! 0 on success and -1 on failure
  END SUBROUTINE h5pget_chunk_cache_f
  </pre>

  <p>
  <dt><strong>See Also:</strong>
    <dd><a href="RM_H5P.html#Property-SetChunkCache">
        <code>H5Pset_chunk_cache</code></a>
        <p>

  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>Change</strong></td>
        </tr>

        <tr>
          <td valign="top">1.8.3</td>
          <td valign="top">
            C function introduced in this release.</td>
        </tr>

        </tr>
        </table>
</dl>


