<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./EDC_spec_files/filelist.xml">
<title>Library Design, API Function Specification </title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>slu</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>slu</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>5714</o:TotalTime>
  <o:Created>2003-03-13T15:37:00Z</o:Created>
  <o:LastSaved>2003-03-13T15:37:00Z</o:LastSaved>
  <o:Pages>17</o:Pages>
  <o:Words>4287</o:Words>
  <o:Characters>24440</o:Characters>
  <o:Company>NCSA</o:Company>
  <o:Lines>203</o:Lines>
  <o:Paragraphs>48</o:Paragraphs>
  <o:CharactersWithSpaces>30014</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-font-kerning:0pt;
	font-weight:bold;}
h2
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:14.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
h3
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:normal;
	font-style:italic;}
h4
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:1.0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:16.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
p.MsoBodyTextIndent, li.MsoBodyTextIndent, div.MsoBodyTextIndent
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
p
	{margin-right:0in;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
code
	{mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:"Courier New";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Courier New";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<h4>Library Design, API Function Specification </h4>

<p class=MsoNormal style='margin-left:1.0in;text-indent:.5in'><b><span
style='font-size:16.0pt;mso-bidi-font-size:12.0pt'>and Test for Fletcher32
Checksum<o:p></o:p></span></b></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h2>Introduction</h2>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>This document mainly addresses the internal library design,
API functions and the test program for Error-detecting code, Fletcher32
checksum specifically.<span style="mso-spacerun: yes">  </span>Please read the
Error-detecting code proposal first for the background information.<span
style="mso-spacerun: yes">  </span>For more details about Fletcher32 checksum,
you can go to the website <a href="http://rfc.sunsite.dk/rfc/rfc1071.html">http://rfc.sunsite.dk/rfc/rfc1071.html</a>
and http://www.netzmafia.de/rfc/internet-drafts/draft-cavanna-iscsi-crc-vs-cksum-00.txt.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h2>Library Design</h2>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Since the first stage of implementing error-detecting code
is on chunked dataset, the checksum algorithm can be added to filter pipeline
as a new filter.<span style="mso-spacerun: yes">  </span>There will be no file
format change, only a 4-byte checksum data is appended to the original raw data
during the writing process, making the actual chunk size 4-byte bigger than the
original data.<span style="mso-spacerun: yes">  </span>The metadata of data
dimensionality and size will remain the same.<span style="mso-spacerun: yes"> 
</span>More information about dataset filters can be found in the User’s
Guide.<span style="mso-spacerun: yes">   </span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h1><span style='font-size:14.0pt;mso-bidi-font-size:12.0pt'>API Function<o:p></o:p></span></h1>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>There will be four new API functions, <span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>H5Pset_fletcher32</span>,
<span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>H5Pset_edc_check,
H5Pget_edc_check</span> and <span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:"Courier New"'>H5Pset_filter_callback.</span><span
style="mso-spacerun: yes">  </span>There will be an addition of EDC (the EDC stands
for error-detecting code) to another function, <span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:"Courier New"'>H5Pset_filter</span>.<span
style="mso-spacerun: yes">  </span>More values will be added to the parameter <span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>filter</span>
of <span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>H5Pset_filter
</span>when more EDC algorithms are included into the library.</p>

<p style='margin:0in;margin-bottom:.0001pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p style='margin:0in;margin-bottom:.0001pt'>The <span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:"Courier New"'>H5Pset_fletcher32</span>
enables Fletcher32 checksum for a dataset creation property list.<span
style="mso-spacerun: yes">  </span><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:"Courier New"'>H5Pset_edc_check</span> gives user the option
to skip an error-detecting (checksum for this step) during read process but not
write process.<span style="mso-spacerun: yes">  </span>It can save time to read
the data.<span style="mso-spacerun: yes">  </span>The functions <span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>H5Pget_nfilters
</span>and<span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
"Courier New"'> H5Pget_filter</span> can be used to check whether the checksum
is enabled.<span style="mso-spacerun: yes">  </span>User can call <span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>H5Pget_edc_check</span>
to query whether an EDC algorithm is enabled for reading data.<span
style="mso-spacerun: yes">  </span>The <span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:"Courier New"'>H5Pset_filter_callback </span>sets
a user callback function to handle failure in filters.<span
style="mso-spacerun: yes">  </span>Without user’s callback function, the write
and read processes will fail if the Error-detecting code is enabled and finds
error in the data.</p>

<p style='margin:0in;margin-bottom:.0001pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><strong>Name:</strong> H5Pset_filter </p>

<p class=MsoNormal><strong>Signature:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'><em>herr_t</em> <code><span
style='font-size:10.0pt;font-family:"Courier New"'>H5Pset_filter</span></code>(<em>hid_t</em>
<code><span style='font-size:10.0pt;font-family:"Courier New"'>plist</span></code>,
<em>H5Z_filter_t</em> <code><span style='font-size:10.0pt;font-family:"Courier New"'>filter</span></code>,
<em>unsigned int</em> <code><span style='font-size:10.0pt;font-family:"Courier New"'>flags</span></code>,
<em>size_t</em> <code><span style='font-size:10.0pt;font-family:"Courier New"'>cd_nelmts</span></code>,
<em>const unsigned int</em> <code><span style='font-size:10.0pt;font-family:
"Courier New"'>cd_values[]</span></code> ) </p>

<p class=MsoNormal><strong>Purpose:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'>Adds a filter to the filter
pipeline. </p>

<p class=MsoNormal><strong>Description:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'><code><span style='font-size:10.0pt;
font-family:"Courier New"'>H5Pset_filter</span></code> adds the specified <code><span
style='font-size:10.0pt;font-family:"Courier New"'>filter</span></code> and
corresponding properties to the end of an output filter pipeline. If <code><span
style='font-size:10.0pt;font-family:"Courier New"'>plist</span></code> is a
dataset creation property list, the filter is added to the permanent filter
pipeline; if <code><span style='font-size:10.0pt;font-family:"Courier New"'>plist</span></code>
is a dataset transfer property list, the filter is added to the transient
filter pipeline. </p>

<p style='margin-left:.5in'>The array <code><span style='font-size:10.0pt;
font-family:"Courier New"'>cd_values</span></code> contains <code><span
style='font-size:10.0pt;font-family:"Courier New"'>cd_nelmts</span></code>
integers which are auxiliary data for the filter. The integer values will be
stored in the dataset object header as part of the filter information. </p>

<p style='margin-left:.5in'>The <code><span style='font-size:10.0pt;font-family:
"Courier New"'>flags</span></code> argument is a bit vector with the following
fields specifying certain general properties of the filter: </p>

<p style='margin-left:1.5in'><code><span style='font-size:10.0pt;font-family:
"Courier New"'>H5Z_FLAG_OPTIONAL:<span style="mso-spacerun: yes">  </span></span></code>If
this bit is set then the filter is optional. If the filter fails during an <code><span
style='font-size:10.0pt;font-family:"Courier New"'>H5Dwrite()</span></code>
operation then the filter is just excluded from the pipeline for the chunk for
which it failed; the filter will not participate in the pipeline during an <code><span
style='font-size:10.0pt;font-family:"Courier New"'>H5Dread()</span></code> of
the chunk. This is commonly used for compression filter: if the filter result
would be larger than the input then the compression filter returns failure and
the uncompressed data is stored in the file. If this bit is cleard and a filter
fails then <code><span style='font-size:10.0pt;font-family:"Courier New"'>H5Dwrite()</span></code>
or <code><span style='font-size:10.0pt;font-family:"Courier New"'>H5Dread()</span></code>
also fails.<span style="mso-spacerun: yes">  </span>For the Fletcher32 checksum,
this flag will always be mandatory.</p>

<p class=MsoBodyTextIndent><strong><span style='font-weight:normal'>At this
moment, this filter setting function supports data compression, data shuffling,
and error-detecting code – Fletcher32 Checksum.<span style="mso-spacerun:
yes">  </span>Please refer to the parameter </span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
font-weight:normal'>filter</span></strong><strong><span style='font-weight:
normal'> below for each correspondent value. <o:p></o:p></span></strong></p>

<p class=MsoNormal><strong>Note:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'>This function currently supports
only the permanent filter pipeline; <code><span style='font-size:10.0pt;
font-family:"Courier New"'>plist_id</span></code> must be a dataset creation
property list. </p>

<p class=MsoNormal><strong>Parameters:</strong> </p>

<p class=MsoNormal><em>hid_t</em> <code><span style='font-size:10.0pt;
font-family:"Courier New"'>plist</span></code> </p>

<p class=MsoNormal style='margin-left:.5in'>IN: Property list identifier. </p>

<p class=MsoNormal><em>H5Z_filter_t</em> <code><span style='font-size:10.0pt;
font-family:"Courier New"'>filter</span></code> </p>

<p class=MsoNormal style='margin-left:.5in'>IN: Filter to be added to the
pipeline.<span style="mso-spacerun: yes">  </span>Valid values are </p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in'>H5Z_FILTER_DEFLATE,
</p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in'>H5Z_FILTER_SHUFFLE,</p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in'>H5Z_FILTER_FLETCHER32
</p>

<p class=MsoNormal><em>unsigned int</em> <code><span style='font-size:10.0pt;
font-family:"Courier New"'>flags</span></code> </p>

<p class=MsoNormal style='margin-left:.5in'>IN: Bit vector specifying certain
general properties of the filter. </p>

<p class=MsoNormal><em>size_t</em> <code><span style='font-size:10.0pt;
font-family:"Courier New"'>cd_nelmts</span></code> </p>

<p class=MsoNormal style='margin-left:.5in'>IN: Number of elements in <code><span
style='font-size:10.0pt;font-family:"Courier New"'>cd_values</span></code>. </p>

<p class=MsoNormal><em>const unsigned int</em> <code><span style='font-size:
10.0pt;font-family:"Courier New"'>cd_values[]</span></code> </p>

<p class=MsoNormal style='margin-left:.5in'>IN: Auxiliary data for the filter. </p>

<p class=MsoNormal><strong>Returns:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'>Returns a non-negative value if
successful; otherwise returns a negative value. </p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><strong>Name:</strong> H5Pset_fletcher32 </p>

<p class=MsoNormal><strong>Signature:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'><em>herr_t</em> <code><span
style='font-size:10.0pt;font-family:"Courier New"'>H5Pset_fletcher32</span></code>(<em>hid_t</em>
<code><span style='font-size:10.0pt;font-family:"Courier New"'>plist</span></code>)
</p>

<p class=MsoNormal><strong>Purpose:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'>Sets Fletcher32 checksum for
dataset. </p>

<p class=MsoNormal><strong>Description:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'><code><span style='font-size:10.0pt;
font-family:"Courier New"'>H5Pset_fletcher32</span></code> sets the Fletcher32
checksum for dataset <u>creation</u> property list.<span style="mso-spacerun:
yes">  </span>At this moment, only chunked dataset is supported.</p>

<p class=MsoNormal><strong>Parameters:</strong> </p>

<p class=MsoNormal><em>hid_t</em> <code><span style='font-size:10.0pt;
font-family:"Courier New"'>plist</span></code> </p>

<p class=MsoNormal style='margin-left:.5in'>IN: Identifier for the dataset
creation property list.<span style="mso-spacerun: yes">  </span></p>

<p class=MsoNormal><strong>Returns:</strong> </p>

<p class=MsoBodyTextIndent>Returns a non-negative value if successful;
otherwise returns a negative value.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><strong>Name:</strong> H5Pset_edc_check </p>

<p class=MsoNormal><strong>Signature:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'><em>herr_t</em> <code><span
style='font-size:10.0pt;font-family:"Courier New"'>H5Pset_edc_check</span></code>(<em>hid_t</em>
<code><span style='font-size:10.0pt;font-family:"Courier New"'>plist, </span></code><em><span
style='mso-fareast-font-family:"Courier New"'>H5P_EDC_t</span></em><code><span
style='font-size:10.0pt;font-family:"Courier New"'> check</span></code>) </p>

<p class=MsoNormal><strong>Purpose:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'>Decides whether to enable an
error-detection for dataset reading. </p>

<p class=MsoNormal><strong>Description:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'><code><span style='font-size:10.0pt;
font-family:"Courier New"'>H5Pset_edc_check</span></code> decides whether to
enable an error-detection for a dataset <u>transfer</u> property list for data
reading process.<span style="mso-spacerun: yes">  </span>This error-detecting
algorithm is whichever user chooses earlier.<span style="mso-spacerun: yes"> 
</span>This function cannot disable or enable error-detection for data writing
process.<span style="mso-spacerun: yes">  </span>At this moment, only chunked
dataset is supported.</p>

<p class=MsoNormal><strong>Parameters:</strong> </p>

<p class=MsoNormal><em>hid_t</em> <code><span style='font-size:10.0pt;
font-family:"Courier New"'>plist</span></code> </p>

<p class=MsoNormal style='margin-left:.5in'>IN: Identifier for the dataset
transfer property list.</p>

<p class=MsoNormal><em><span style='mso-fareast-font-family:"Courier New"'>H5P_EDC_t</span></em><code><span
style='font-size:10.0pt;font-family:"Courier New"'> check<o:p></o:p></span></code></p>

<p class=MsoNormal><code><span style='font-size:10.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>      </span></span></code><code><span
style='mso-ansi-font-size:12.0pt;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman";mso-bidi-font-family:"Times New Roman"'>IN:
A value that decides whether an error-detection is enabled for dataset<o:p></o:p></span></code></p>

<p class=MsoNormal><code><span style='mso-ansi-font-size:12.0pt;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman";mso-bidi-font-family:
"Times New Roman"'><span style='mso-tab-count:1'>            </span><span
style="mso-spacerun: yes">      </span>reading.<span style="mso-spacerun:
yes">  </span>The valid values are<o:p></o:p></span></code></p>

<p class=MsoNormal><code><span style='mso-ansi-font-size:12.0pt;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman";mso-bidi-font-family:
"Times New Roman"'><span style='mso-tab-count:2'>                        </span><span
style='mso-tab-count:1'>            </span>H5P_ENABLE_EDC<o:p></o:p></span></code></p>

<p class=MsoNormal><code><span style='mso-ansi-font-size:12.0pt;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman";mso-bidi-font-family:
"Times New Roman"'><span style='mso-tab-count:2'>                        </span><span
style='mso-tab-count:1'>            </span>H5P_DISABLE_EDC<o:p></o:p></span></code></p>

<p class=MsoNormal><code><span style='mso-ansi-font-size:12.0pt;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman";mso-bidi-font-family:
"Times New Roman"'><span style='mso-tab-count:1'>            </span><span
style="mso-spacerun: yes">     </span>The default value is H5P_ENABLE_EDC.</span></code></p>

<p class=MsoNormal><strong>Returns:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'>Returns a non-negative value if
successful; otherwise returns a negative value.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><strong>Name:</strong> H5Pget_edc_check </p>

<p class=MsoNormal><strong>Signature:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'><em>H5P_EDC_t</em> <code><span
style='font-size:10.0pt;font-family:"Courier New"'>H5Pget_edc_check</span></code>(<em>hid_t</em>
<code><span style='font-size:10.0pt;font-family:"Courier New"'>plist</span></code>)
</p>

<p class=MsoNormal><strong>Purpose:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'>Queries whether an error-detecting
is enabled for dataset reading. </p>

<p class=MsoNormal><strong>Description:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'><code><span style='font-size:10.0pt;
font-family:"Courier New"'>H5Pget_edc_check</span></code> queries whether an
error-detecting is enabled for a dataset <u>transfer</u> property list for data
reading process.<span style="mso-spacerun: yes">  </span>The error-detecting
algorithm is whichever user chooses earlier.<span style="mso-spacerun: yes"> 
</span>This function cannot disable or enable error-detecting for data writing
process.<span style="mso-spacerun: yes">  </span>At this moment, only chunked
dataset is supported.</p>

<p class=MsoNormal><strong>Parameters:</strong> </p>

<p class=MsoNormal><em>hid_t</em> <code><span style='font-size:10.0pt;
font-family:"Courier New"'>plist</span></code> </p>

<p class=MsoNormal style='margin-left:.5in'>IN: Identifier for the dataset
transfer property list.</p>

<p class=MsoNormal><strong>Returns:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'>Returns <code><span
style='mso-ansi-font-size:12.0pt;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman";mso-bidi-font-family:"Times New Roman"'>H5P_ENABLE_EDC</span></code>(1)
or <code><span style='mso-ansi-font-size:12.0pt;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman";mso-bidi-font-family:"Times New Roman"'>H5P_DISABLE_EDC(0)</span></code>
if successful; otherwise returns a negative value.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><strong>Name:</strong> H5Pset_filter_callback </p>

<p class=MsoNormal><strong>Signature:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'><em>herr_t</em> <code><span
style='font-size:10.0pt;font-family:"Courier New"'>H5Pset_filter_callback</span></code>(<em>hid_t</em>
<code><span style='font-size:10.0pt;font-family:"Courier New"'>plist, </span></code><code><i><span
style='mso-ansi-font-size:12.0pt;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman";mso-bidi-font-family:"Times New Roman"'>H5Z_filter_func_t</span></i></code><code><span
style='font-size:10.0pt;font-family:"Courier New"'> func, void* op_data</span></code>)
</p>

<p class=MsoNormal><strong>Purpose:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'>Sets user’s callback function for
filters. </p>

<p class=MsoNormal><strong>Description:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'><code><span style='font-size:10.0pt;
font-family:"Courier New"'>H5Pset_filter_callback</span></code> sets user’s
callback function for dataset <u>transfer</u> property list.<span
style="mso-spacerun: yes">  </span>This callback function defines what user
wants to do if certain filter fails.</p>

<p class=MsoNormal><strong>Parameters:</strong> </p>

<p class=MsoNormal><em>hid_t</em> <code><span style='font-size:10.0pt;
font-family:"Courier New"'>plist</span></code> </p>

<p class=MsoNormal style='margin-left:.5in'>IN: Identifier for the dataset transfer
property list.</p>

<h3>H5Z_filter_t <span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Courier New";font-style:normal'>filter</span></h3>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>IN:
Identifier for filter.</p>

<p class=MsoNormal><code><i><span style='mso-ansi-font-size:12.0pt;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman";mso-bidi-font-family:
"Times New Roman"'>H5Z_filter_func_t</span></i></code><code><span
style='font-size:10.0pt;font-family:"Courier New"'> func<o:p></o:p></span></code></p>

<p class=MsoNormal><code><span style='font-size:10.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>      </span></span></code><code><span
style='mso-ansi-font-size:12.0pt;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman";mso-bidi-font-family:"Times New Roman"'>IN:
User’s callback function.</span></code><span style="mso-spacerun: yes"> 
</span>It’s defined as </p>

<p class=MsoNormal style='margin-left:1.0in'>typedef H5Z_cb_return_t
(H5Z_filter_func_t)(H5Z_filter_t filter, void* buf, size_t buf_size, void*
op_data)</p>

<p class=MsoNormal style='margin-left:.75in'>where filter indicates which
filter fails, buf and buf_size pass in the failed data, op_data is user’s input
data for this callback function.<span style="mso-spacerun: yes">  </span>The
valid return values are H5Z_CB_FAIL and H5Z_CB_CONT.<span style="mso-spacerun:
yes">   </span></p>

<p class=MsoNormal><i>void*</i> <span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:"Courier New"'>op_data</span></p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>IN: User’s
input data for callback function.<span style="mso-spacerun: yes">  </span></p>

<p class=MsoNormal><strong>Returns:</strong> </p>

<p class=MsoBodyTextIndent>Returns a non-negative value if successful;
otherwise returns a negative value.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h2>Testing Model</h2>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>The following pseudo codes illustrate how we are going to
test the Fletcher32 checksum.</p>

<p class=MsoNormal>The actual code for this test can be found in the Appendix.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><b>Step 1:</b> Enable Fletcher32 checksum as a filter for
writing and reading chunked dataset.</p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span></p>

<p class=MsoNormal style='text-indent:.5in'>H5Pset_filter (dataset create
property list, H5Z_FILTER_FLETCHER32);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;<span style='mso-tab-count:1'>            </span>H5Dcreate
(dataset create property list);</p>

<p class=MsoNormal style='text-indent:.5in'>H5Dwrite;</p>

<p class=MsoNormal style='text-indent:.5in'>H5Dread;</p>

<p class=MsoNormal style='text-indent:.5in'>Compare data correctness; </p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><b>Step 2:</b> Enable Fletcher32 checksum for writing but
disable it during reading to speedup</p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span><span
style="mso-spacerun: yes"> </span>read.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>H5Pset_filter
(dataset create property list, H5Z_FILTER_FLETCHER32);</p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>H5Pset_edc_check
(dataset transfer property list, H5Z_DISABLE_EDC);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;<span style='mso-tab-count:1'>            </span>H5Dcreate
(dataset create property list);</p>

<p class=MsoNormal style='text-indent:.5in'>H5Dwrite (dataset transfer property
list);</p>

<p class=MsoNormal style='text-indent:.5in'>H5Dread (dataset transfer property
list);</p>

<p class=MsoNormal style='text-indent:.5in'>Compare data correctness; </p>

<p class=MsoNormal style='text-indent:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><b>Step 3:</b> Simulate data corruption on disk by modifying
part of data using another filter.</p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span><span
style="mso-spacerun: yes"> </span>Also set user’s filter callback functions to
decide whether to continue reading</p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span><span
style="mso-spacerun: yes"> </span>data when there is data corruption. </p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>H5Pset_filter
(dataset create property list, H5Z_FILTER_FLETCHER32);</p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>Randomly
decide the offset and length of corrupted data;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; <span style='mso-tab-count:1'>            </span>H5Zregister
(H5Z_CORRUPT, corrupt data function);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; <span style='mso-tab-count:1'>            </span>H5Pset_filter
(dataset creation property list, H5Z_CORRUPT, corrupted data);</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;<span style='mso-tab-count:1'>            </span>H5Dcreate
(dataset create property list);</p>

<p class=MsoNormal style='text-indent:.5in'>H5Dwrite (dataset transfer property
list);</p>

<p class=MsoNormal style='text-indent:.5in'>H5Dread (dataset transfer property
list);</p>

<p class=MsoNormal style='text-indent:.5in'>Check if read fails as expected
default setting;</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>Set filter
callback function to continue despite data is corrupted by calling</p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>H5Pset_filter_callback(transfer
property list, callback function to continue);</p>

<p class=MsoNormal style='text-indent:.5in'>H5Dread (dataset transfer property
list);</p>

<p class=MsoNormal style='text-indent:.5in'>Check if read continues;</p>

<p class=MsoNormal><span style="mso-spacerun: yes"> </span></p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>Set filter
callback function to fail when data is corrupted by calling</p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>H5Pset_filter_callback(transfer
property list, callback function to fail);</p>

<p class=MsoNormal style='text-indent:.5in'>H5Dread (dataset transfer property
list);</p>

<p class=MsoNormal style='text-indent:.5in'>Check if read fails;</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><b>Step 4:</b> Test filter pipeline in the order of checksum
+ shuffle + deflate.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; <span style='mso-tab-count:1'>            </span>H5Pset_fletcher32
(dataset creation property list);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; <span style='mso-tab-count:1'>            </span>H5Pset_shuffle
(dataset creation property list);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; <span style='mso-tab-count:1'>            </span>H5Pset_deflate
(dataset creation property list, deflate degree);</p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>H5Dcreate
(dataset create property list);</p>

<p class=MsoNormal style='text-indent:.5in'>H5Dwrite;</p>

<p class=MsoNormal style='text-indent:.5in'>H5Dread;</p>

<p class=MsoNormal style='text-indent:.5in'>Compare data correctness; </p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><b>Step 5:</b> Test filter pipeline in another order of
shuffle + deflate + checksum.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; <span style='mso-tab-count:1'>            </span>H5Pset_shuffle
(dataset creation property list);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; <span style='mso-tab-count:1'>            </span>H5Pset_deflate
(dataset creation property list, deflate degree);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; <span style='mso-tab-count:1'>            </span>H5Pset_fletcher32
(dataset creation property list);</p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>H5Dcreate
(dataset create property list);</p>

<p class=MsoNormal style='text-indent:.5in'>H5Dwrite;</p>

<p class=MsoNormal style='text-indent:.5in'>H5Dread;</p>

<p class=MsoNormal style='text-indent:.5in'>Compare data correctness; </p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h2>Appendix</h2>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Testing for Fletcher32 Checksum can be added to the existing
test for H5Pset_filter, H5Pset_deflate, and H5Pset_shuffle in dsets.c.<span
style="mso-spacerun: yes">  </span>The code for this part in dsets.c is called
test_filters(), as follows:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>/*-------------------------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;* Function:&nbsp;&nbsp;&nbsp;&nbsp;test_filters</p>

<p class=MsoNormal>&nbsp;*</p>

<p class=MsoNormal>&nbsp;* Purpose:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests dataset
filter.</p>

<p class=MsoNormal>&nbsp;*-------------------------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;*/</p>

<p class=MsoNormal>static herr_t</p>

<p class=MsoNormal>test_filters(hid_t file)</p>

<p class=MsoNormal>{</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
hid_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dc;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
/* Dataset creation property list ID */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; const hsize_t chunk_size[2] = {2,
25};&nbsp; /* Chunk dimensions */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; hsize_t&nbsp;&nbsp;&nbsp;&nbsp;
null_size;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Size of
dataset with null filter */</p>

<p class=MsoNormal>#ifdef H5_HAVE_FILTER_FLETCHER32</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; hsize_t&nbsp;&nbsp;&nbsp;&nbsp;
fletcher32_size;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Size of dataset with
Fletcher32 checksum */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; unsigned int
data_corrupt[2];&nbsp;&nbsp;&nbsp;&nbsp; /* position and length of data to be
corrupted */</p>

<p class=MsoNormal>#endif /* H5_HAVE_FILTER_FLETCHER32 */</p>

<p class=MsoNormal>#ifdef H5_HAVE_FILTER_DEFLATE</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; hsize_t&nbsp;&nbsp;&nbsp;&nbsp;
deflate_size;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Size of dataset with
deflate filter */</p>

<p class=MsoNormal>#endif /* H5_HAVE_FILTER_DEFLATE */</p>

<p class=MsoNormal>#ifdef H5_HAVE_FILTER_SHUFFLE</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; hsize_t&nbsp;&nbsp;&nbsp;&nbsp;
shuffle_size;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Size of dataset with
shuffle filter */</p>

<p class=MsoNormal>#endif /* H5_HAVE_FILTER_SHUFFLE */</p>

<p class=MsoNormal>#if defined H5_HAVE_FILTER_DEFLATE &amp;&amp; defined
H5_HAVE_FILTER_SHUFFLE &amp;&amp; defined H5_HAVE_FILTER_FLETCHER32</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; hsize_t&nbsp;&nbsp;&nbsp;&nbsp;
combo_size;&nbsp;&nbsp;&nbsp;&nbsp; /* Size of dataset with shuffle+deflate
filter */</p>

<p class=MsoNormal>#endif /* H5_HAVE_FILTER_DEFLATE &amp;&amp;
H5_HAVE_FILTER_SHUFFLE &amp;&amp; H5_HAVE_FILTER_FLETCHER32 */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
/*----------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * STEP 1: Test Fletcher32 Checksum
by itself.</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; *----------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; */</p>

<p class=MsoNormal>#ifdef H5_HAVE_FILTER_FLETCHER32</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; puts(&quot;Testing Fletcher32
checksum(enabled for read)&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if((dc =
H5Pcreate(H5P_DATASET_CREATE))&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Pset_chunk (dc, 2,
chunk_size)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Pset_filter
(dc,H5Z_FILTER_FLETCHER32,0,0,NULL)&lt;0) goto error;</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-left:9.0pt;text-indent:-9.0pt'>&nbsp;&nbsp;&nbsp;
/* Enable checksum during read */<span style="mso-spacerun:
yes">                     
</span>if(test_filter_internal(file,DSET_FLETCHER32_NAME,dc,</p>

<p class=MsoNormal><span style="mso-spacerun: yes">  
</span>ENABLE_FLETCHER32,DATA_NOT_CORRUPTED,&amp;fletcher32_size)&lt;0) </p>

<p class=MsoNormal style='text-indent:.5in'>goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if(fletcher32_size&lt;=null_size) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H5_FAILED();</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
puts(&quot;&nbsp;&nbsp;&nbsp; Size after checksumming is incorrect.&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; } /* end if */</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; /* Disable checksum during read */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; puts(&quot;Testing Fletcher32
checksum(disabled for read)&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
if(test_filter_internal(file,DSET_FLETCHER32_NAME_2,dc,</p>

<p class=MsoNormal><span style="mso-spacerun: yes">   
</span>DISABLE_FLETCHER32,DATA_NOT_CORRUPTED,&amp;fletcher32_size)&lt;0) </p>

<p class=MsoNormal style='text-indent:.5in'>goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if(fletcher32_size&lt;=null_size) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H5_FAILED();</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
puts(&quot;&nbsp;&nbsp;&nbsp; Size after checksumming is incorrect.&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; } /* end if */</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; /* Try to corrupt data and see if
checksum fails */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; puts(&quot;Testing Fletcher32
checksum(when data is corrupted)&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; data_corrupt[0] = 52;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; data_corrupt[1] = 33;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Zregister (H5Z_CORRUPT,
&quot;corrupt&quot;, corrupt_data)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Pset_filter (dc, H5Z_CORRUPT, 0, 2,
data_corrupt)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
if(test_filter_internal(file,DSET_FLETCHER32_NAME_3,dc,</p>

<p class=MsoNormal><span style="mso-spacerun: yes">   
</span>ENABLE_FLETCHER32,DATA_CORRUPTED,&amp;fletcher32_size)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if(fletcher32_size&lt;=null_size) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H5_FAILED();</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
puts(&quot;&nbsp;&nbsp;&nbsp; Size after checksumming is incorrect.&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; } /* end if */</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; /* Clean up objects used for this test */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Pclose (dc)&lt;0) goto error;</p>

<p class=MsoNormal>#else /* H5_HAVE_FILTER_FLETCHER32 */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; TESTING(&quot;fletcher32 checksum&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; SKIPPED();</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; puts(&quot;fletcher32 checksum not
enabled&quot;);</p>

<p class=MsoNormal>#endif /* H5_HAVE_FILTER_FLETCHER32 */</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
/*----------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * STEP 2: Test shuffle + deflate + checksum
in any order.</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;
*----------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; */</p>

<p class=MsoNormal>#if defined H5_HAVE_FILTER_DEFLATE &amp;&amp; defined
H5_HAVE_FILTER_SHUFFLE &amp;&amp; defined H5_HAVE_FILTER_FLETCHER32 </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; puts(&quot;Testing
shuffle+deflate+checksum filters(checksum first)&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if((dc =
H5Pcreate(H5P_DATASET_CREATE))&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Pset_chunk (dc, 2,
chunk_size)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Pset_fletcher32 (dc)&lt;0) goto
error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Pset_shuffle (dc,
sizeof(int))&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Pset_deflate (dc, 6)&lt;0) goto
error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
if(test_filter_internal(file,DSET_SHUF_DEF_FLET_NAME,dc,</p>

<p class=MsoNormal><span style="mso-spacerun: yes">   
</span>ENABLE_FLETCHER32,DATA_NOT_CORRUPTED,&amp;combo_size)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; /*if(combo_size&gt;=deflate_size+2 ||
combo_size&lt;=deflate_size) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H5_FAILED();</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; puts(&quot;&nbsp;&nbsp;&nbsp;
Shuffle+deflate+checksum size is incorrect.&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; }*/ /* end if */</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; /* Clean up objects used for this test */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Pclose (dc)&lt;0) goto error;</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; puts(&quot;Testing
shuffle+deflate+checksum filters(checksum last)&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if((dc =
H5Pcreate(H5P_DATASET_CREATE))&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Pset_chunk (dc, 2,
chunk_size)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Pset_shuffle (dc,
sizeof(int))&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Pset_deflate (dc, 6)&lt;0) goto
error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Pset_fletcher32 (dc)&lt;0) goto
error;</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
if(test_filter_internal(file,DSET_SHUF_DEF_FLET_NAME_2,dc,</p>

<p class=MsoNormal><span style="mso-spacerun: yes">   
</span>ENABLE_FLETCHER32,DATA_NOT_CORRUPTED,&amp;combo_size)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; /*if(combo_size&gt;=deflate_size+2 ||
combo_size&lt;=deflate_size) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H5_FAILED();</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
puts(&quot;&nbsp;&nbsp;&nbsp; Shuffle+deflate+checksum size is
incorrect.&quot;); </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; }*/ /* end if */</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; /* Clean up objects used for this test */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Pclose (dc)&lt;0) goto error;</p>

<p class=MsoNormal>#else /* H5_HAVE_FILTER_DEFLATE &amp;&amp;
H5_HAVE_FILTER_SHUFFLE &amp;&amp; H5_HAVE_FILTER_FLETCHER32 */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; TESTING(&quot;shuffle+deflate+fletcher32
filters&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; SKIPPED();</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; puts(&quot;Deflate, shuffle, or
Fletcher32 checksum filter not enabled&quot;);</p>

<p class=MsoNormal>#endif /* H5_HAVE_FILTER_DEFLATE &amp;&amp;
H5_HAVE_FILTER_SHUFFLE &amp;&amp; H5_HAVE_FILTER_FLETCHER32 */</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; return 0;</p>

<p class=MsoNormal>error:</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; return -1;</p>

<p class=MsoNormal>}</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>/*-------------------------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;*
Function:&nbsp;&nbsp;&nbsp;&nbsp;test_filter_internal</p>

<p class=MsoNormal>&nbsp;*-------------------------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;*/</p>

<p class=MsoNormal>static herr_t</p>

<p class=MsoNormal>test_filter_internal(hid_t fid, const char *name, hid_t
dcpl, int if_fletcher32, int corrupted, hsize_t *dset_size)</p>

<p class=MsoNormal>{</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
hid_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataset;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
/* Dataset ID */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
hid_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dxpl;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
/* Dataset xfer property list ID */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
hid_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sid;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
/* Dataspace ID */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; const
hsize_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size[2] = {100,
200};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Dataspace
dimensions */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; const
hssize_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hs_offset[2] = {7, 30}; /*
Hyperslab offset */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; const
hsize_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hs_size[2] = {4,
50};&nbsp;&nbsp; /* Hyperslab size */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*tconv_buf
= NULL;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Temporary conversion buffer */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
hsize_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i,
j, n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Local index variables */</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; /* Create the data space */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if ((sid = H5Screate_simple(2, size,
NULL))&lt;0) goto error;</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; /*</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * Create a small conversion buffer
to test strip mining. We</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * might as well test all we can!</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if ((dxpl = H5Pcreate
(H5P_DATASET_XFER))&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; tconv_buf = malloc (1000);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Pset_buffer (dxpl, 1000, tconv_buf,
NULL)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (if_fletcher32==DISABLE_FLETCHER32) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(H5Pset_edc_check(dxpl, H5Z_DISABLE_EDC)&lt;0)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(H5Z_DISABLE_EDC != H5Pget_edc_check(dxpl))</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; }</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; TESTING(&quot;filter (setup)&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; /* Create the dataset */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if ((dataset = H5Dcreate(fid, name,
H5T_NATIVE_INT, sid,</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
dcpl))&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; PASSED();</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
/*----------------------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * STEP 1: Read uninitialized
data.&nbsp; It should be zero.</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;
*---------------------------------------------------------------------- </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; TESTING(&quot;filter (uninitialized
read)&quot;);</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Dread (dataset, H5T_NATIVE_INT,
H5S_ALL, H5S_ALL, dxpl, check)&lt;0)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; for (i=0; i&lt;size[0]; i++) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j=0;
j&lt;size[1]; j++) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if (0!=check[i][j]) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;H5_FAILED();</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;&nbsp;&nbsp;&nbsp;
Read a non-zero value.\n&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;&nbsp;&nbsp;&nbsp;
At index %lu,%lu\n&quot;,</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(unsigned long)i, (unsigned long)j);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;goto
error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; }</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; PASSED();</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
/*----------------------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * STEP 2: Test filter by setting up
a chunked dataset and writing</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * to it.</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;
*---------------------------------------------------------------------- </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; TESTING(&quot;filter (write)&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; for (i=n=0; i&lt;size[0]; i++) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j=0;
j&lt;size[1]; j++) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
points[i][j] = (int)(n++);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; }</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Dwrite(dataset, H5T_NATIVE_INT,
H5S_ALL, H5S_ALL, dxpl, points)&lt;0)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;goto error;</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; PASSED();</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
/*----------------------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * STEP 3: Try to read the data we
just wrote.</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; *----------------------------------------------------------------------
</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; TESTING(&quot;filter (read)&quot;);</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; /* Read the dataset back */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if(corrupted) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Default
behavior is failure when data is corrupted. */ </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H5E_BEGIN_TRY {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
H5Dread(dataset, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, dxpl, check);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } H5E_END_TRY;</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Callback
decides to continue inspite data is corrupted. */ </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(H5Pset_filter_callback(dxpl, filter_cb_cont, NULL)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(H5Dread(dataset, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, dxpl, check)&lt;0)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Callback
decides to fail when data is corrupted. */ </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(H5Pset_filter_callback(dxpl, filter_cb_fail, NULL)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H5E_BEGIN_TRY {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
H5Dread(dataset, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, dxpl, check);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } H5E_END_TRY;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; } else {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
(H5Dread(dataset, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, dxpl, check)&lt;0)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
goto error;</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Check that the
values read are the same as the values written */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i=0;
i&lt;size[0]; i++) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
for (j=0; j&lt;size[1]; j++) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if (points[i][j] != check[i][j]) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
H5_FAILED();</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
printf(&quot;&nbsp;&nbsp;&nbsp; Read different values than written.\n&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
printf(&quot;&nbsp;&nbsp;&nbsp; At index %lu,%lu\n&quot;,</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(unsigned long)i, (unsigned long)j);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; }</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; PASSED();</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; /*----------------------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * STEP 4: Write new data over the
top of the old data.&nbsp; The new data is</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * random thus not very
compressible, and will cause the chunks to move</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * around as they grow.&nbsp; We
only change values for the left half of the</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * dataset although we rewrite the
whole thing.</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;
*---------------------------------------------------------------------- </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; TESTING(&quot;filter (modify)&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; for (i=0; i&lt;size[0]; i++) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j=0;
j&lt;size[1]/2; j++) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
points[i][j] = rand ();</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; }</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Dwrite (dataset, H5T_NATIVE_INT,
H5S_ALL, H5S_ALL, dxpl, points)&lt;0)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if(corrupted) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Default
behavior is failure when data is corrupted. */ </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H5E_BEGIN_TRY {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
H5Dread(dataset, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, dxpl, check);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } H5E_END_TRY;</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Callback
decides to continue inspite data is corrupted. */ </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(H5Pset_filter_callback(dxpl, filter_cb_cont, NULL)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(H5Dread(dataset, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, dxpl, check)&lt;0)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Callback
decides to fail when data is corrupted. */ </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(H5Pset_filter_callback(dxpl, filter_cb_fail, NULL)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H5E_BEGIN_TRY {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
H5Dread(dataset, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, dxpl, check);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } H5E_END_TRY;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; } else {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Read the
dataset back and check it */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
(H5Dread(dataset, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, dxpl, check)&lt;0)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
goto error;</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Check that the
values read are the same as the values written */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i=0;
i&lt;size[0]; i++) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
for (j=0; j&lt;size[1]; j++) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if (points[i][j] != check[i][j]) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
H5_FAILED();</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
printf(&quot;&nbsp;&nbsp;&nbsp; Read different values than written.\n&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
printf(&quot;&nbsp;&nbsp;&nbsp; At index %lu,%lu\n&quot;,</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(unsigned long)i, (unsigned long)j);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; }</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; PASSED();</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
/*----------------------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * STEP 5: Close the dataset and
then open it and read it again.&nbsp; This</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * insures that the filter message
is picked up properly from the</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * object header.</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;
*---------------------------------------------------------------------- </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; TESTING(&quot;filter (re-open)&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Dclose (dataset)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if ((dataset = H5Dopen (fid, name))&lt;0)
goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if(corrupted) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Default
behavior is failure when data is corrupted. */ </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H5E_BEGIN_TRY {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
H5Dread(dataset, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, dxpl, check);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } H5E_END_TRY;</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Callback
decides to continue inspite data is corrupted. */ </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(H5Pset_filter_callback(dxpl, filter_cb_cont, NULL)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(H5Dread(dataset, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, dxpl, check)&lt;0)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Callback
decides to fail when data is corrupted. */ </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(H5Pset_filter_callback(dxpl, filter_cb_fail, NULL)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H5E_BEGIN_TRY {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
H5Dread(dataset, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, dxpl, check);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } H5E_END_TRY;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; } else {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (H5Dread(dataset,
H5T_NATIVE_INT, H5S_ALL, H5S_ALL, dxpl, check)&lt;0)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
goto error;</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Check that the
values read are the same as the values written */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i=0;
i&lt;size[0]; i++) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
for (j=0; j&lt;size[1]; j++) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if (points[i][j] != check[i][j]) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
H5_FAILED();</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
printf(&quot;&nbsp;&nbsp;&nbsp; Read different values than written.\n&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
printf(&quot;&nbsp;&nbsp;&nbsp; At index %lu,%lu\n&quot;,</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(unsigned long)i, (unsigned long)j);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; }</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; PASSED();</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
/*----------------------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * STEP 6: Test partial I/O by
writing to and then reading from a</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * hyperslab of the dataset.&nbsp;
The hyperslab does not line up on chunk</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; * boundaries (we know that case
already works from above tests).</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;
*---------------------------------------------------------------------- </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; TESTING(&quot;filter (partial
I/O)&quot;);</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; for (i=0; i&lt;hs_size[0]; i++) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j=0;
j&lt;hs_size[1]; j++) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
points[hs_offset[0]+i][hs_offset[1]+j] = rand ();</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; }</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Sselect_hyperslab(sid,
H5S_SELECT_SET, hs_offset, NULL, hs_size,</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
NULL)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Dwrite (dataset, H5T_NATIVE_INT,
sid, sid, dxpl, points)&lt;0)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if(corrupted) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Default
behavior is failure when data is corrupted. */ </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H5E_BEGIN_TRY {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
H5Dread(dataset, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, dxpl, check);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } H5E_END_TRY;</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Callback
decides to continue inspite data is corrupted. */ </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(H5Pset_filter_callback(dxpl, filter_cb_cont, NULL)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(H5Dread(dataset, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, dxpl, check)&lt;0)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Callback
decides to fail when data is corrupted. */ </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(H5Pset_filter_callback(dxpl, filter_cb_fail, NULL)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H5E_BEGIN_TRY {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
H5Dread(dataset, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, dxpl, check);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } H5E_END_TRY;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; } else {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (H5Dread
(dataset, H5T_NATIVE_INT, sid, sid, dxpl, check)&lt;0)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Check that the
values read are the same as the values written */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i=0;
i&lt;hs_size[0]; i++) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
for (j=0; j&lt;hs_size[1]; j++) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if (points[hs_offset[0]+i][hs_offset[1]+j] !=</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
check[hs_offset[0]+i][hs_offset[1]+j]) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
H5_FAILED();</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
printf(&quot;&nbsp;&nbsp;&nbsp; Read different values than written.\n&quot;);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
printf(&quot;&nbsp;&nbsp;&nbsp; At index %lu,%lu\n&quot;,</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(unsigned long)(hs_offset[0]+i),</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(unsigned long)(hs_offset[1]+j));</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
printf(&quot;&nbsp;&nbsp;&nbsp; At original: %d\n&quot;,</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(int)points[hs_offset[0]+i][hs_offset[1]+j]);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
printf(&quot;&nbsp;&nbsp;&nbsp; At returned: %d\n&quot;,</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(int)check[hs_offset[0]+i][hs_offset[1]+j]);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; }</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; PASSED();</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; /* Get the storage size of the dataset */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;
if((*dset_size=H5Dget_storage_size(dataset))==0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; /* Clean up objects used for this test */</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Dclose (dataset)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Sclose (sid)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (H5Pclose (dxpl)&lt;0) goto error;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; free (tconv_buf);</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; return(0);</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>error:</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; return -1;</p>

<p class=MsoNormal>}</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>/*-------------------------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;* Function:&nbsp;&nbsp;&nbsp;
corrupt_data&nbsp;&nbsp;&nbsp;&nbsp;</p>

<p class=MsoNormal>&nbsp;*</p>

<p class=MsoNormal>&nbsp;* Purpose:&nbsp;&nbsp;&nbsp;&nbsp; For testing
Fletcher32 checksum.&nbsp; modify data slightly during </p>

<p class=MsoNormal>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
writing so that when data is read back, the checksum should </p>

<p class=MsoNormal>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fail. </p>

<p class=MsoNormal>&nbsp;*-------------------------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;*/</p>

<p class=MsoNormal>static size_t</p>

<p class=MsoNormal>corrupt_data(unsigned int flags, H5Z_EDC_t edc,
H5Z_callback_t callback_struct, </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; size_t cd_nelmts, const
unsigned int *cd_values, size_t nbytes,</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; size_t *buf_size, void **buf)</p>

<p class=MsoNormal>{</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; size_t&nbsp;&nbsp; ret_value = 0;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; unsigned char *dst = (unsigned
char*)(*buf);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; unsigned int&nbsp;&nbsp; offset;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; unsigned int&nbsp;&nbsp; length;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (cd_nelmts!=2 || !cd_values)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; offset = cd_values[0];</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; length = cd_values[1];</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if(offset&gt;nbytes ||
(offset+length)&gt;nbytes)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if (flags &amp; H5Z_FLAG_REVERSE) {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *buf_size =
nbytes;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ret_value =
nbytes;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; } else {</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned char*
corrupt_data;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;corrupt_data
= (unsigned char*)malloc(length);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
memset((void*)corrupt_data, 57, length);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dst += offset;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
memcpy((void*)dst, (void*)corrupt_data, length);</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *buf_size =
nbytes;</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret_value =
*buf_size;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; }</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; return ret_value;</p>

<p class=MsoNormal>}</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>/*-------------------------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;* Function:&nbsp;&nbsp;&nbsp; filter_cb_cont</p>

<p class=MsoNormal>&nbsp;*</p>

<p class=MsoNormal>&nbsp;* Purpose:&nbsp;&nbsp;&nbsp;&nbsp; Callback function
to handle checksum failure.&nbsp; Let it continue. </p>

<p class=MsoNormal>&nbsp;*</p>

<p class=MsoNormal>&nbsp;* Return:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
continue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>

<p class=MsoNormal>&nbsp;*</p>

<p class=MsoNormal>&nbsp;*-------------------------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;*/</p>

<p class=MsoNormal>static H5Z_CALLBACK_t </p>

<p class=MsoNormal>filter_cb_cont(H5Z_filter_t filter, void* UNUSED buf, size_t
UNUSED buf_size, </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
void* UNUSED op_data)</p>

<p class=MsoNormal>{</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if(H5Z_FILTER_FLETCHER32==filter)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
H5Z_CALLBACK_CONT; </p>

<p class=MsoNormal>}</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>/*-------------------------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;* Function:&nbsp;&nbsp;&nbsp; filter_cb_fail</p>

<p class=MsoNormal>&nbsp;*</p>

<p class=MsoNormal>&nbsp;* Purpose:&nbsp;&nbsp;&nbsp;&nbsp; Callback function
to handle checksum failure.&nbsp; Let it fail. </p>

<p class=MsoNormal>&nbsp;*</p>

<p class=MsoNormal>&nbsp;* Return:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fail&nbsp;&nbsp;&nbsp;&nbsp;</p>

<p class=MsoNormal>&nbsp;*</p>

<p class=MsoNormal>&nbsp;*-------------------------------------------------------------------------</p>

<p class=MsoNormal>&nbsp;*/</p>

<p class=MsoNormal>static H5Z_CALLBACK_t </p>

<p class=MsoNormal>filter_cb_fail(H5Z_filter_t filter, void* UNUSED buf, size_t
UNUSED buf_size, </p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
void* UNUSED op_data)</p>

<p class=MsoNormal>{</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp; if(H5Z_FILTER_FLETCHER32==filter)</p>

<p class=MsoNormal>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
H5Z_CALLBACK_FAIL; </p>

<p class=MsoNormal>}</p>

</div>

</body>

</html>
