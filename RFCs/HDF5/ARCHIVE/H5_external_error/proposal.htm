<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./proposal_files/filelist.xml">
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Albert Cheng</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>Albert Cheng</o:LastAuthor>
  <o:Revision>5</o:Revision>
  <o:TotalTime>27</o:TotalTime>
  <o:Created>2002-03-29T14:54:00Z</o:Created>
  <o:LastSaved>2002-04-03T17:19:00Z</o:LastSaved>
  <o:Pages>2</o:Pages>
  <o:Words>584</o:Words>
  <o:Characters>3329</o:Characters>
  <o:Company>NCSA</o:Company>
  <o:Lines>27</o:Lines>
  <o:Paragraphs>6</o:Paragraphs>
  <o:CharactersWithSpaces>4088</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.HTMLBody, li.HTMLBody, div.HTMLBody
	{mso-style-name:"HTML Body";
	mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-layout-grid-align:none;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
</head>

<body lang=EN-US style='tab-interval:.5in'>

<div class=Section1>

<p class=HTMLBody align=center style='text-align:center'><b><span
style='mso-bidi-font-family:"Courier New"'>Reporting external error messages<o:p></o:p></span></b></p>

<p class=HTMLBody align=center style='text-align:center'><span
style='mso-bidi-font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=HTMLBody><b><span style='mso-bidi-font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=HTMLBody><b><span style='mso-bidi-font-family:"Courier New"'>Description
of the problem:<o:p></o:p></span></b></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>HDF5 error
stack keeps track of a list of errors the library &quot;pushes&quot;<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>on it.
(Technically, it is an limited length array of records.)<span
style="mso-spacerun: yes">  </span>The<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>stack requires
error records pushed to it must be of static storage.<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>(Again,
technically, the stack does not make a copy of the record.<span
style="mso-spacerun: yes">  </span>It<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>just stores
the 'reference' to the record.<span style="mso-spacerun: yes">  </span>So, if
something changes<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>some part of
the record contents or even free a string pointer in it,<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>it would
affect the stack record and in the latter case, will result in<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>pointer
dereference errors if the program requests printing the error<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>messages.)<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>Currently,
only static messages strings coded in the hdf5 are pushed to<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>the error
stack.<span style="mso-spacerun: yes">  </span>Message strings from system
(e.g. strerror()) or<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>other
external libraries (e.g. MPI_Error_string()) can not be pushed there.<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>There is no
other mechanism in hdf5 library to access these strings.<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=HTMLBody><b><span style='mso-bidi-font-family:"Courier New"'>Possible
solutions:<o:p></o:p></span></b></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>One proposal
to fix this is to change the H5E error stack routines to<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>do a strdup
of all error strings passed to it, thus isolating the error<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>stack record
content from the original error strings.<span style="mso-spacerun: yes"> 
</span>This raised couple<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>issues:<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>1)
Currently, H5Eclear just resets the stack counter.<span style="mso-spacerun:
yes">  </span>It does not need to<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>free
anything since the stack holds only references or integer values of<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>the error
pushed to it.<span style="mso-spacerun: yes">  </span>If it uses strdup for
incoming strings, it<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>would have
to walk through the stack record one by one and free all<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>the
strings.<span style="mso-spacerun: yes">  </span>This adds processing time.<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>2) Often,
“error” are pushed to the stack when it is not real error.<span
style="mso-spacerun: yes">  </span>E.g.,<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>when a new
dataset is created, the name is searched.<span style="mso-spacerun: yes"> 
</span>The searching routine<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>will report
no object of such name and pushes a message to the stack and return<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>negative to the
upper routine which knows it is okay to create the new dataset.<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>It will
clear the error stack and creates the new dataset.<span style="mso-spacerun:
yes">  </span>This means there<br>
will be many strdup and free that are not necessary and will likely fragment
the<br>
hash memory.<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>One can
avoid the second problem by changing the H5Epush() to have an extra parameter<br>
telling the stack routine to do a strdup or not.<span style="mso-spacerun:
yes">  </span>That will reduce a lot of the <br>
unnecessary strdup and free but the first problem is still there.<span
style="mso-spacerun: yes">  </span>It also means<br>
a change of API.<span style="mso-spacerun: yes">  </span>(Of course, a new one
like H5Epush_dup() can be added too.)<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=HTMLBody><b><span style='mso-bidi-font-family:"Courier New"'>Proposal:<o:p></o:p></span></b></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>Since the
current needs for non-static error message strings are really due to <br>
external libraries and are at the very bottom of the virtual file driver, I
would<br>
propose that we have the drivers to manage the strings themselves.<span
style="mso-spacerun: yes">  </span>E.g.,<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>the MPIO
driver can declare a static char string and use that to receive error <br>
messages from MPI_Error_string().<span style="mso-spacerun: yes">  </span>Then
it is alright to pass this static string<br>
to H5Epush().<span style="mso-spacerun: yes">  </span>One may raise the issue
that the next call to the MPIO file<br>
driver may replace the content of the same static string.<span
style="mso-spacerun: yes">  </span>That is okay because<o:p></o:p></span></p>

<p class=HTMLBody><span style='mso-bidi-font-family:"Courier New"'>by then the
error stack would have been cleared at least once since the stack is<o:p></o:p></span></p>

<p class=HTMLBody>cleared every time the hdf5 code goes “down”.</p>

<p class=HTMLBody><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=HTMLBody><b>Example:<o:p></o:p></b></p>

<p class=HTMLBody>Below is a example implementation of pushing MPI_Error_string
to the error stack.</p>

<p class=HTMLBody><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=HTMLBody>#ifdef H5_HAVE_PARALLEL<o:p></o:p></p>

<p class=HTMLBody>/*<o:p></o:p></p>

<p class=HTMLBody><span style="mso-spacerun: yes"> </span>* MPI error handling
macros.<o:p></o:p></p>

<p class=HTMLBody><span style="mso-spacerun: yes"> </span>*/<o:p></o:p></p>

<p class=HTMLBody><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=HTMLBody>extern<span style="mso-spacerun: yes">  </span>char<span
style="mso-spacerun: yes">    </span>H5E_mpi_error_str[MPI_MAX_ERROR_STRING];<o:p></o:p></p>

<p class=HTMLBody>extern<span style="mso-spacerun: yes">  </span>int<span
style="mso-spacerun: yes">     </span>H5E_mpi_error_str_len;<o:p></o:p></p>

<p class=HTMLBody><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=HTMLBody>#define HMPI_ERROR(mpierr){<span style="mso-spacerun:
yes">                                                   </span>\<o:p></o:p></p>

<p class=HTMLBody><span style="mso-spacerun: yes">   
</span>MPI_Error_string(mpierr, H5E_mpi_error_str,
&amp;H5E_mpi_error_str_len);<span style="mso-spacerun: yes">      </span>\<o:p></o:p></p>

<p class=HTMLBody><span style="mso-spacerun: yes">   
</span>HERROR(H5E_INTERNAL, H5E_MPIERRSTR, H5E_mpi_error_str);<span
style="mso-spacerun: yes">                   </span>\<o:p></o:p></p>

<p class=HTMLBody>}<o:p></o:p></p>

<p class=HTMLBody>#define HMPI_GOTO_ERROR(retcode, str, mpierr){<span
style="mso-spacerun: yes">                                </span>\<o:p></o:p></p>

<p class=HTMLBody><span style="mso-spacerun: yes">    </span>HMPI_ERROR(mpierr);<span
style="mso-spacerun:
yes">                                                       </span>\<o:p></o:p></p>

<p class=HTMLBody><span style="mso-spacerun: yes">   
</span>HGOTO_ERROR(H5E_INTERNAL, H5E_MPI, retcode, str);<span
style="mso-spacerun: yes">                         </span>\<o:p></o:p></p>

<p class=HTMLBody>}<o:p></o:p></p>

<p class=HTMLBody>#define HMPI_RETURN_ERROR(retcode, str, mpierr){<span
style="mso-spacerun: yes">                              </span>\<o:p></o:p></p>

<p class=HTMLBody><span style="mso-spacerun: yes">   
</span>HMPI_ERROR(mpierr);<span style="mso-spacerun: yes">     </span><span
style="mso-spacerun:
yes">                                                  </span>\<o:p></o:p></p>

<p class=HTMLBody><span style="mso-spacerun: yes">   
</span>HRETURN_ERROR(H5E_INTERNAL, H5E_MPI, retcode, str);<span
style="mso-spacerun: yes">                       </span>\<o:p></o:p></p>

<p class=HTMLBody>}<o:p></o:p></p>

<p class=HTMLBody>#endif</p>

<p class=HTMLBody><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=HTMLBody>---</p>

<p class=HTMLBody><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt;
mso-bidi-font-family:"Courier New"'>Revised: 2002/04/03<o:p></o:p></span></p>

<p class=HTMLBody><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt;
mso-bidi-font-family:"Courier New"'>Albert Cheng (aching@ncsa.uiuc.edu)</span><span
style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><o:p></o:p></span></p>

</div>

</body>

</html>
