<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 10">
<meta name=Originator content="Microsoft Word 10">
<link rel=File-List href="PH5DIFF_DesignSpec_files/filelist.xml">
<title>Purpose</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="date"/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Albert Cheng</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>Albert Cheng</o:LastAuthor>
  <o:Revision>10</o:Revision>
  <o:TotalTime>165</o:TotalTime>
  <o:LastPrinted>2004-09-15T14:24:00Z</o:LastPrinted>
  <o:Created>2004-09-15T12:16:00Z</o:Created>
  <o:LastSaved>2004-12-14T19:37:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>1158</o:Words>
  <o:Characters>6605</o:Characters>
  <o:Company>NCSA</o:Company>
  <o:Lines>55</o:Lines>
  <o:Paragraphs>15</o:Paragraphs>
  <o:CharactersWithSpaces>7748</o:CharactersWithSpaces>
  <o:Version>10.2625</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:ApplyBreakingRules/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:\5B8B\4F53;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
@font-face
	{font-family:"\@SimSun";
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:SimSun;}
h1
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:16.0pt;
	font-family:Arial;
	mso-font-kerning:16.0pt;}
h2
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:14.0pt;
	font-family:Arial;
	font-style:italic;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="4098"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=EN-US style='tab-interval:.5in'>

<div class=Section1>

<h1 align=center style='text-align:center'>Design specification of the Parallel
HDF5 Diff Tool</h1>

<p class=MsoNormal align=center style='text-align:center'>(Revision: <st1:date
Year="2004" Day="14" Month="12">December 14, 2004</st1:date> by Albert Cheng)</p>

<h1>Purpose</h1>

<p class=MsoNormal><span class=GramE>An analysis of two designs of a parallel
hdf5 diff tool (ph5diff).</span></p>

<h1>Requirements of Ph5diff</h1>

<p class=MsoNormal>The h5diff tool compares two HDF5 files and reports the differences.<span
style='mso-spacerun:yes'>  </span>It provides a great means for users to manage
their HDF5 files and is widely used.<span style='mso-spacerun:yes'>  </span>The
tool is implemented for serial execution and has its limits when it processes
large HDF5 files.<span style='mso-spacerun:yes'>  </span>This design is to
explore how to add a parallel version of the tool to take advantage of parallel
processing machines to shorten the wall clock time of comparing large HDF5
files.</p>

<h1>Two possible designs</h1>

<h2>Parallel Data</h2>

<p class=MsoNormal>All processes recursively traverse down the HDF5 file,
working on one dataset at a time together. Each dataset is divided evenly among
all processes. Each process reads the data of their portion of the dataset,
compares them with the corresponding dataset in the other file, reports any
differences found and then returns the result code. Repeat with the next
dataset.</p>

<h2>Parallel Processing</h2>

<p class=MsoNormal>Process 0 is designated as the Manager and all remaining
processes as Workers. The Manager <span class=GramE>recursively</span>
traverses down the HDF5 file, assigning each dataset to one of the Workers to
do the comparison. Each Worker receives an assignment of a dataset, opens it on
both files, <span class=GramE>compare</span> them, reports any differences
found and then returns the result code.<span style='mso-spacerun:yes'> 
</span>Repeat with another assignment from the Manager.</p>

<h1>Issues facing each design</h1>

<h2>A common issue</h2>

<p class=MsoNormal>The processes report differences found by printing them to
the output file.<span style='mso-spacerun:yes'>  </span>Since there is only one
output file (<span class=SpellE>stdout</span>), if each process prints the
differences as it finds them, the results of all processes will be intermixed
and impossible to comprehend.</p>

<p class=MsoNormal>A simple solution is for each process to have its own output
file.<span style='mso-spacerun:yes'>  </span>But this <span class=GramE>results</span>
in numerous files and for the case of Parallel Data, the differences of each
dataset is fragmented into multiple files.<span style='mso-spacerun:yes'> 
</span>For the case of Parallel Processing, the differences of all datasets
within a group will be spread across multiple files.<span
style='mso-spacerun:yes'>  </span>Again, it is harder to read than just one
output file.</p>

<p class=MsoNormal>A better solution is to pass around an output token.<span
style='mso-spacerun:yes'>  </span>A process needs to acquire the Output Token
(OT) before doing any printing and releases the OT when it is done with
printing.<span style='mso-spacerun:yes'>  </span>This allows output done in a
synchronous manner though it is no guarantee that the underlying parallel
operating system will display them in the same exact manner since the system
may hold the output of each process in some system buffer before “flushing”
them to the one output file.<span style='mso-spacerun:yes'>  </span>But that is
beyond the control of this tool.</p>

<p class=MsoNormal>Another solution to guarantee synchronous output is to
funnel all output back to the main process which prints them to the output file
in a coordinated manner.</p>

<h2>Parallel Data</h2>

<p class=MsoNormal>All processes run in a lock step fashion. The OT will be
passed in a round robin fashion from process 0 to process 1 to process 2 and so
on.<span style='mso-spacerun:yes'>  </span>Eventually, process n-1 passes it
back to process 0.<span style='mso-spacerun:yes'>  </span>When a process finds
a difference and needs to print something, it gets the OT from its previous
neighbor.<span style='mso-spacerun:yes'>  </span>When it has it, it prints the
differences.<span style='mso-spacerun:yes'>  </span>When it has completed its
own portion of the dataset, it gets the OT from its left neighbor IF it does
not have it already.<span style='mso-spacerun:yes'>  </span>Then it passes the
OT to its next neighbor. It then proceeds to the next dataset.</p>

<p class=MsoNormal>This works great if most datasets are big so that it is
worth each process to do the dataset open to process a portion of the
dataset.<span style='mso-spacerun:yes'>  </span>If there are very little
differences found or if all differences are concentrated in very few portions
of the dataset, then the processes will run in a parallel manner.<span
style='mso-spacerun:yes'>  </span>But if there are differences in many portions
of the dataset, the overall execution becomes a serial fashion since each
processes has to wait for the OT.</p>

<h2>Parallel Processing</h2>

<p class=MsoNormal>All processes run in a distributed computing fashion.<span
style='mso-spacerun:yes'>  </span>The OT will be controlled by the Manager and
passed between it and the Workers.<span style='mso-spacerun:yes'>  </span>When
a Worker finds a difference and needs to print something, it gets the OT from
the Manager. <span style='mso-spacerun:yes'> </span>When it has the OT, it
prints all the differences.<span style='mso-spacerun:yes'>  </span>When it has
completed its assigned dataset, it returns the OT to the Manager IF it has it.
Then it asks for the next assignment.</p>

<p class=MsoNormal>This has a short coming that the Manage process is not doing
“real” work. <span style='mso-spacerun:yes'> </span>Most of the time, it sits
idle waiting for the Workers to do their assignments.<span
style='mso-spacerun:yes'>  </span>But if there are many Workers, the Manager
will be an acceptable small percentage of idle processing power.<span
style='mso-spacerun:yes'>  </span>If one is really concern about this, the
design can be modified to have the Manager double as a Worker too.</p>

<p class=MsoNormal>This works great if there are many datasets of similar sizes
to keep each Worker busy most of the time.<span style='mso-spacerun:yes'> 
</span><span class=GramE>(Would be bad if there is one dataset of 100GB big and
a few more of 10KB big.</span><span style='mso-spacerun:yes'>  </span>Then one
process takes a long time to compare the <span class=SpellE><span class=GramE>hugh</span></span>
dataset while the others have finished and are idle.)<span
style='mso-spacerun:yes'>  </span>The execution will run in a pretty parallel
manner if most datasets have no differences.<span style='mso-spacerun:yes'> 
</span>But if most datasets have differences, the overall execution becomes a
serial fashion again since the Workers have to wait for the OT.</p>

<p class=MsoNormal>One solution to go around the OT serialization problem is
that each Worker prints the difference of one dataset to a holding place such
as a temporary file. Then it asks for the OT only at the end of the processing
of one dataset and prints the content of the holding place to the output
file.<span style='mso-spacerun:yes'>  </span>This allows each Worker to process
its own assignment rather than getting stuck at the first sight of any
difference.<span style='mso-spacerun:yes'>  </span>This will reduce the
severity of serialization.<span style='mso-spacerun:yes'>  </span>One more
optimization is for the Worker to tell the Manage the name of the temporary
file and let the Manager does the printing of the file content.<span
style='mso-spacerun:yes'>  </span>Since the Manager is often idle, it is a good
use of the Manage.</p>

<h2>More on Output Token</h2>

<p class=MsoNormal>There are two more solutions to deal with the serialization
issue of OT.<span style='mso-spacerun:yes'>  </span>The first one is for each
Worker to send all output to a temporary file and then print them (or send them
to Manager to print) by acquiring the OT first.<span style='mso-spacerun:yes'> 
</span>When done printing its output file, it releases the OT.<span
style='mso-spacerun:yes'>  </span><span class=GramE>An</span> potential
enhancement is for the Worker to tell the Manager where the output file is and
let the Manager prints the file directly.<span style='mso-spacerun:yes'> 
</span>This requires a shared and writable file system between the Manager and
the Workers.<span style='mso-spacerun:yes'>  </span>That is not always true.<span
style='mso-spacerun:yes'>  </span>One cannot assume it is okay to write to the
file system where the files being compared resided. <span
style='mso-spacerun:yes'> </span>The compared files could very well be read
only.</p>

<p class=MsoNormal>A second solution is for each Worker to have an output
buffer to hold differences output temporary.<span style='mso-spacerun:yes'> 
</span>When the Worker has completed the comparison of a dataset, it can then
acquire the OT, send the content of the output buffer to the Manager, then
release the OT.<span style='mso-spacerun:yes'>  </span>If the buffer is full
before a dataset comparison is completed, the Worker may either flash the
content to a temporary file just like the above first solution; or it acquires
the OT, <span class=GramE>flush</span> the buffer content to the Manager,
continue the comparison and sends the Manager any more differences found. When it
finishes the comparison of the current dataset, it releases the OT.<span
style='mso-spacerun:yes'>  </span>This allows all Workers to continue in
parallel as far as their local buffers can hold.</p>

<h2>More on Parallel Processing</h2>

<p class=MsoNormal>The Parallel Processing can be extended to process only a
subset of a dataset.<span style='mso-spacerun:yes'>  </span>Then the Manager
can schedule multiple Workers to process different parts of the same dataset in
parallel.<span style='mso-spacerun:yes'>  </span>This has the same effect as
the Parallel Data approach.<o:p></o:p></p>

<h1>Summary</h1>

<p class=MsoNormal>The biggest issue of this parallel tool is the coordination
of work assignment and output coordination with the latter the more dominate
issue.<span style='mso-spacerun:yes'>  </span>The Parallel Processing design is
the better one to implement.</p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>
