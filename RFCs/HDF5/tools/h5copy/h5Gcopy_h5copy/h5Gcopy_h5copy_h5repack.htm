<html>

<head>
</head>

<body lang=EN-US link=blue vlink=blue style='tab-interval:.5in'>

<div class=Section1>

<p class=MsoTitle align="center"><span lang=PT-BR style='mso-ansi-language:PT-BR'>
<font size="6">RFC: h5copy
and h5repack</font><o:p></o:p></span></p>

<p align=center style='text-align:center'><span lang=PT-BR style='mso-ansi-language:
PT-BR'>Peter Cao, Pedro Vicente, August, 18, 2006<o:p></o:p></span></p>

<h1><span class=SpellE>Introduction</span></h1>

<p>This <span class=SpellE>RFC</span> describes the tool <span class=SpellE>h5copy</span>,
a command line tool that uses the HDF5 API <span class=SpellE>H5Gcopy</span>
function to copy an object (group, dataset or named <span class=SpellE>datatype</span>)
from one location to another location within a file or across files. It also
describes the inclusion of this function in the <span class=SpellE>h5repack</span>
tool.</p>

<h1><span class=SpellE>H5Gcopy</span> Function</h1>

<p><span class=SpellE><span class=GramE>The H5Gcopy</span></span><span class=GramE>(</span>)
function is an HDF5 API function to be introduced in the coming release of HDF5 1.8.0.
This function copies one or more HDF5 objects&nbsp;from a source <span class=SpellE>location</span>
to a destination location within a file or cross files. It is described below.</p>

<p class=MsoNormal><strong>Name:</strong> <a name=Group-Copy></a><span
class=SpellE><span style='mso-bookmark:Group-Copy'>H5Gcopy</span></span><span
style='mso-bookmark:Group-Copy'></span> </p>

<p class=MsoNormal><strong>Signature:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'><span class=SpellE><em>herr_t</em></span><em>
</em><span class=SpellE><span class=GramE><code><span style='font-size:10.0pt'>H5Gcopy</span></code></span></span><span
class=GramE>(</span> <span class=SpellE><em>hid_t</em></span><em> </em><span
class=SpellE><code><span style='font-size:10.0pt'>src_loc_id</span></code></span>,
<em>const char *</em><span class=SpellE><code><span style='font-size:10.0pt'>src_name</span></code></span>,
<span class=SpellE><em>hid_t</em></span><em> </em><span class=SpellE><code><span
style='font-size:10.0pt'>dst_loc_id</span></code></span>, <em>const char *</em><span
class=SpellE><code><span style='font-size:10.0pt'>dst_name</span></code></span>,
<span class=SpellE><em>hid_t</em></span><em> </em><span class=SpellE><code><span
style='font-size:10.0pt'>cplist_id</span></code></span> ) </p>

<p class=MsoNormal><strong>Purpose:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'>Copies a group, dataset, or named <span
class=SpellE>datatype</span>. </p>

<p class=MsoNormal><strong>Description:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'><span class=SpellE><code><span
style='font-size:10.0pt'>H5Gcopy</span></code></span> copies the object
specified by <span class=SpellE><code><span style='font-size:10.0pt'>src_name</span></code></span>
from the file or group specified by <span class=SpellE><code><span
style='font-size:10.0pt'>src_loc_id</span></code></span> to the destination
location <span class=SpellE><code><span style='font-size:10.0pt'>dst_loc_id</span></code></span>.
The new copy will be created with the name <span class=SpellE><code><span
style='font-size:10.0pt'>dst_name</span></code></span>. </p>

<p style='margin-left:.5in'>The object being copied can be a group, dataset or
named <span class=SpellE>datatype</span>. </p>

<p style='margin-left:.5in'>The destination location, as specified in <span
class=SpellE><code><span style='font-size:10.0pt'>dst_loc_id</span></code></span>,
may be a group in the current file or a location in a different file. If <span
class=SpellE><code><span style='font-size:10.0pt'>dst_loc_id</span></code></span>
is a file identifier, the copy will be placed in that file’s root group. <span
class=SpellE><span class=GramE>H5Gcopy</span></span><span class=GramE>(</span>)
will fail if the name of the destination object exists in the destination
group.<span style='mso-spacerun:yes'>  </span>For example, <span class=SpellE><span
class=GramE>H5Gcopy</span></span><span class=GramE>(</span><span class=SpellE>fid_src</span>,
&quot;/<span class=SpellE>dset</span>&quot;, <span class=SpellE>fid_dst</span>,
&quot;/<span class=SpellE>dset</span>&quot;, ...) will fail if &quot;/<span
class=SpellE>dset</span>&quot; exists in the destination file.
<font color="#0000FF"><b>Note</b>: In this case, we may consider a flag that 
forces the destruction of the old dataset</font>.</p>

<p style='margin-left:.5in'>The new copy of the object is created with the
creation property list specified by <span class=SpellE><code><span
style='font-size:10.0pt'>cplist_id</span></code></span>. </p>

<p style='margin-left:.5in'>Several flags are available to govern the behavior
of <span class=SpellE><code><span style='font-size:10.0pt'>H5Gcopy</span></code></span>.
These flags are set in the creation property list <span class=SpellE><code><span
style='font-size:10.0pt'>cplist_id</span></code></span> with <a
href="http://hdf.ncsa.uiuc.edu/HDF5/doc_1.8pre/doc/RM/RM_H5P.html#Property-SetCopyObject"><span
class=SpellE><code><span style='font-size:10.0pt'>H5Pset_copy_object</span></code></span></a>
</p>

<p class=MsoNormal><strong>Parameters:</strong> <o:p></o:p></p>

<table class=MsoNormalTable border=0 cellpadding=0 style='mso-cellspacing:1.5pt;
 margin-left:.5in' id=table1>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><em><span lang=FR style='mso-ansi-language:FR'>hid_t </span></em><code><span
  lang=FR style='font-size:10.0pt;mso-ansi-language:FR'>src_loc_id</span></code><span
  lang=FR style='mso-ansi-language:FR'> <o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Object identifier indicating the location of the source
  object </p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><em>const char *</em><span class=SpellE><code><span
  style='font-size:10.0pt'>src_name</span></code></span> </p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Name of the object to be copied </p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><em><span lang=FR style='mso-ansi-language:FR'>hid_t </span></em><code><span
  lang=FR style='font-size:10.0pt;mso-ansi-language:FR'>dst_loc_id</span></code><span
  lang=FR style='mso-ansi-language:FR'> <o:p></o:p></span></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Location identifier specifying the destination </p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><em>const&nbsp;char&nbsp;*</em><span class=SpellE><code><span
  style='font-size:10.0pt'>dst_name</span></code></span><code><span
  style='font-size:10.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;</span></code> </p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Name to be assigned to the new copy </p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4;mso-yfti-lastrow:yes'>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE><em>hid_t</em></span><em> </em><span
  class=SpellE><code><span style='font-size:10.0pt'>cplist_id</span></code></span>
  </p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Creation property list of the copy </p>
  </td>
 </tr>
</table>

<p class=MsoNormal><strong>Returns:</strong> </p>

<p class=MsoNormal style='margin-left:.5in'>Returns a non-negative value if
successful; otherwise returns a negative value. </p>

<p class=MsoNormal><span class=SpellE><strong>Fortran90</strong></span><strong>
Interface:</strong> </p>

<!--h5gclose_f-->

<p class=MsoNormal style='margin-left:.5in'><span class=GramE>None.</span> </p>

<!--
	<pre>

	</pre>		
--><!--<dt><strong>Non-C API(s):</strong>
    	<dd>
        
        <img src="Graphics/Java.gif"> 
        <img src="Graphics/C++.gif">
        -->

<p class=MsoNormal><strong>History:</strong> <o:p></o:p></p>

<table class=MsoNormalTable border=0 cellpadding=0 width="90%"
 style='width:90.0%;mso-cellspacing:1.5pt;margin-left:.5in' id=table2>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width="10%" valign=top style='width:10.0%;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><strong>C</strong></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>1.8.0</p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Function introduced in this release.</p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-left:.5in'>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'>Several flags are available to
govern object copying behavior and are described in the following table. These
flags are set via <span class=SpellE><code><span style='font-size:10.0pt'>H5Pset_copy_object</span></code></span>.
</p>

<p style='margin-left:.5in'>&nbsp;<o:p></o:p></p>

<table class=MsoNormalTable border=0 cellpadding=0 style='mso-cellspacing:1.5pt;
 margin-left:1.0in' id=table3>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE><code><span style='font-size:10.0pt'>H5G_COPY_SHALLOW_HIERARCHY_FLAG</span></code></span>
  </p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>If this flag is specified, only immediate members of the group are copied.
  Otherwise <i style='mso-bidi-font-style:normal'><span style='color:blue'>(default)</span></i>,
  it will recursively copy all objects below the group</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE><code><span style='font-size:10.0pt'>H5G_COPY_EXPAND_SOFT_LINK_FLAG</span></code></span>
  </p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>If this flag is specified, it will copy the objects pointed
  by the soft links. Otherwise <i style='mso-bidi-font-style:normal'><span
  style='color:blue'>(default),</span></i> it <span
  style='mso-spacerun:yes'> </span>will copy the soft link as they are</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE><code><span style='font-size:10.0pt'>H5G_COPY_EXPAND_EXT_LINK_FLAG</span></code></span>
  </p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>If this flag is specified, it will expand the external
  links into new objects, Otherwise (default), it will keep external links as
  they are <i style='mso-bidi-font-style:normal'><span style='color:blue'>(default)</span></i></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE><code><span style='font-size:10.0pt'>H5G_COPY_EXPAND_REFERENCE_FLAG</span></code></span>
  </p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>There are two separate cases</p>
  <ol style='margin-top:0in' start=1 type=1>
   <li class=MsoNormal style='mso-list:l15 level1 lfo4;tab-stops:list .5in'>Copy
       object between two different files: When this flag is specified, it will
       copy objects that are pointed by the references and update the values of
       references in the destination file. Otherwise <i style='mso-bidi-font-style:
       normal'><span style='color:blue'>(default)</span></i> the values of
       references in the destination will set to zero. The current
       implementation does not handle references inside of other <span
       class=SpellE>datatype</span> structure. For example, if a member of
       compound <span class=SpellE>datatype</span> is reference, <span
       class=SpellE><span class=GramE>H5Gcopy</span></span><span class=GramE>(</span>)
       will copy that field as it is. It will not set the value to zero as
       default is used nor copy the object pointed by that field the flag is
       set<o:p></o:p></li>
   <li class=MsoNormal style='mso-list:l15 level1 lfo4;tab-stops:list .5in'>Copy
       object within the same file: This flag does not have any effect to the <span
       class=SpellE><span class=GramE>H5Gcopy</span></span><span class=GramE>(</span>).
       Datasets or attributes of references are copied as they are, i.e. values
       of references of the destination object are the same as the values of
       the source object </li>
  </ol>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4'>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE><code><span style='font-size:10.0pt'>H5G_COPY_WITHOUT_ATTR_FLAG</span></code></span>
  </p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>If this flag is specified, it will copy object without copying
  attributes, Otherwise <i style='mso-bidi-font-style:normal'><span
  style='color:blue'>(default)</span></i>, it will copy object along with all
  its attributes</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:5;mso-yfti-lastrow:yes'>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE><code><span style='font-size:10.0pt'>H5G_COPY_ALL</span></code></span>
  </p>
	<p class=MsoNormal><font color="#0000FF"><b>Note</b>: see below h5copy 
	correspondent flag note</font></p>
  </td>
  <td valign=top style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Switches all flags from the default to the non-default
  setting. </p>
  </td>
 </tr>
</table>

<h1><span class=SpellE><span class=GramE>h5copy</span></span> command line tool</h1>

<p><span class=SpellE><span class=GramE>h5copy</span></span> is a command line
tool that parses several input parameters that translate to the above <span
class=SpellE>H5Gcopy</span> function parameters. The usage of the tool is:</p>

<p><span class=SpellE>h5copy</span> [OPTIONS] [OBJECTS...]<br>
<br>
OBJECTS<br>
<br>
A pair of HDF5 file names (input and output) and a pair of HDF5 object names
(input and output). These names are each controlled by a switch (each one with
a short and a long name version, i.e., either one can be used). The syntax is<o:p></o:p></p>

<table class=MsoNormalTable border=1 cellpadding=0 width="100%"
 style='width:100.0%;mso-cellspacing:1.5pt' id=table7>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=152 style='width:114.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><i>Switch (short name)</i></b></p>
  </td>
  <td width=164 style='width:123.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><i>Switch (long name)</i></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><i>Meaning</i></b></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td width=152 style='width:114.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>-<span class=SpellE>i</span> <i>name</i></p>
  </td>
  <td width=164 style='width:123.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>-input <i>name</i></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Input HDF5 file name</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td width=152 style='width:114.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>-o <i>name</i></p>
  </td>
  <td width=164 style='width:123.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>-output <i>name</i></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Output HDF5 file name (existing or non-existing)</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3;height:.25in'>
  <td width=152 style='width:114.0pt;padding:.75pt .75pt .75pt .75pt;
  height:.25in'>
  <p class=MsoNormal>-s <i>name</i></p>
  </td>
  <td width=164 style='width:123.0pt;padding:.75pt .75pt .75pt .75pt;
  height:.25in'>
  <p class=MsoNormal>-source <i>name</i></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt;height:.25in'>
  <p class=MsoNormal>Source object name</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4;mso-yfti-lastrow:yes'>
  <td width=152 style='width:114.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>-d <i>name</i></p>
  </td>
  <td width=164 style='width:123.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>-destination <i>name</i></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Destination object name</p>
  </td>
 </tr>
</table>

<p><br>
OPTIONS<o:p></o:p></p>

<table class=MsoNormalTable border=1 cellpadding=0 width="100%"
 style='width:100.0%;mso-cellspacing:1.5pt' id=table6>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=152 style='width:114.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><i>Switch (short name)</i></b></p>
  </td>
  <td width=164 style='width:123.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><i>Switch (long name)</i></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><i>Meaning</i></b></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>-h&nbsp;&nbsp; </p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>-help</p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>&nbsp;Print a usage message and exit</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>-v&nbsp;&nbsp; </p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>-verbose</p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>&nbsp;Print information about OBJECTS and OPTIONS</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>-f&nbsp;&nbsp; </p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>-flag</p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>&nbsp;Flag type</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4;mso-yfti-lastrow:yes'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>-V</p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>-Version</p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>&nbsp;Version information</p>
  </td>
 </tr>
</table>

<p><br>
Flag type is one of the following strings:<o:p></o:p></p>

<table class=MsoNormalTable border=1 cellpadding=0 width="100%"
 style='width:100.0%;mso-cellspacing:1.5pt' id=table5>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><i>String</i></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><i>Meaning</i></b></p>
  </td>
  <td width=365 style='width:273.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><i>Corresponding API symbol in <span class=SpellE>H5Gcopy</span>()</i></b></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>shallow&nbsp;&nbsp; </p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Copy only immediate members for groups</p>
  </td>
  <td width=365 style='width:273.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE>H5G_COPY_SHALLOW_HIERARCHY_FLAG</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>soft&nbsp;&nbsp; </p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Expand soft links into new objects</p>
  </td>
  <td width=365 style='width:273.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE>H5G_COPY_EXPAND_SOFT_LINK_FLAG</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>ext&nbsp; </p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Expand external links into new objects</p>
  </td>
  <td width=365 style='width:273.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE>H5G_COPY_EXPAND_EXT_LINK_FLAG</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>ref&nbsp; </p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Copy objects that are pointed by object references</p>
  </td>
  <td width=365 style='width:273.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE>H5G_COPY_EXPAND</span>_ <span
  class=SpellE>REFERENCE_FLAG</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:5'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE>noattr</span>&nbsp;&nbsp; </p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Copy object without copying attributes</p>
  </td>
  <td width=365 style='width:273.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE>H5G_COPY_WITHOUT_ATTR_FLAG</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:6;mso-yfti-lastrow:yes'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE>allflags</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Switches all flags from the default to the non-default
  setting</p>
	<p class=MsoNormal><font color="#0000FF"><b>Note</b>: This flag has the 
	effect of having the same effect on future flags, which may not be 
	desirable. It may be not implemented because of this.</font></p>
  </td>
  <td width=365 style='width:273.75pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE>H5G_COPY_ALL</span></p>
  </td>
 </tr>
</table>

<h2>Parsing of the file and object names</h2>

<p>To parse the file and object names, several options are possible. We review here
other methods used by current HDF5 command line tools that have to parse a
pairs of file names and a pair of object names. These are <span class=SpellE>h5diff</span>
(compares two HDF5 files) and <span class=SpellE>h5repack</span> (regenerates
one HDF5 file to a new one using filter and layout options). We also consider
the parsing method used by <span class=SpellE>h5ls</span> and <span
class=SpellE><span class=GramE>h5dump</span></span><span class=GramE>, that</span>
only parse one pair of file name and object name, but can be adapted to two
pairs.</p>

<h3><span class=SpellE>h5ls</span></h3>

<p>In <span class=SpellE>h5ls</span> each file name is followed by a slash and
an object name within the file.&nbsp; For example</p>

<p><span class=GramE>./</span><span class=SpellE>h5ls</span> <span
class=SpellE>test1.h5</span>/array </p>

<p>The dichotomy is determined by calling <span class=SpellE>H5Fopen</span>
repeatedly until it succeeds. The first call uses the entire name and each
subsequent call chops off the last component. If we reach the beginning of the
name then there must have been something wrong with the file (perhaps it
doesn't exist). For example, if /a/b/c is a valid HDF5 file and /d/e is the
path of the object to be copied, the full string “/a/b/c/d/e” will be tried as
the file name. After it fails, “/a/b/e/d” will be test as the file name, and so
on, until it finds the file name /a/b/c.</p>

<h3><span class=SpellE>h5diff</span></h3>

<p><span class=SpellE><span class=GramE>h5diff</span></span> uses the method of
a sequence of file and object names</p>

<p><span class=GramE>./</span><span class=SpellE>h5diff</span> <span
class=SpellE>file1</span> <span class=SpellE>file2</span> <span class=SpellE>object1</span>
<span class=SpellE>object2</span></p>

<h3><span class=SpellE>h5repack</span></h3>

<p><span class=SpellE><span class=GramE>h5repack</span></span> uses yet another
parsing method. It uses the -<span class=SpellE>i</span> and -o for input and
output files, and the object names are parsed from a special grammar that
includes the filter names and parameters</p>

<p>&nbsp;<span class=GramE>./</span><span class=SpellE>h5repack</span> -<span
class=SpellE>i</span> <span class=SpellE>file1</span> -o <span class=SpellE>file2</span>
-f <span class=SpellE>dset1:SZIP</span>=<span class=SpellE>8,NN</span></p>

<p>Object names are comma separated, so this method can be used for multiple
objects.</p>

<h3><span class=SpellE>h5dump</span></h3>

<p>The <span class=SpellE>h5dump</span> tool uses a -d flag to specify the
object name (in this case only one <span class=GramE>object</span> and file
name)</p>

<p><span lang=PT-BR style='mso-ansi-language:PT-BR'>./h5dump -d dset1 file.h5<o:p></o:p></span></p>

<h3><span lang=PT-BR style='mso-ansi-language:PT-BR'>h5copy<o:p></o:p></span></h3>

<p>The proposed syntax for parsing in <span class=SpellE>h5copy</span> is</p>

<p><span class=GramE>./</span><span class=SpellE>h5copy</span> -<span
class=SpellE>i</span> <span class=SpellE>input_file</span> -o <span
class=SpellE>output_file</span> -s <span class=SpellE>source_object</span> -d <span
class=SpellE>destination_object</span></p>

<h2>Testing</h2>

<p>Testing is made through a UNIX shell <span class=GramE>script, that</span>
executes several runs. These will include a subset of the existing C program
that tests the <span class=SpellE>H5Gcopy</span> function (currently in /test/<span
class=SpellE>objcopy</span>). The correctness of the copied file object will be
made by calling <span class=SpellE>h5diff</span> on the test script, the same
way the <span class=SpellE>h5repack</span> test script does.</p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l11 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Simple dataset<o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l11 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Chunked dataset <o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l11 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Compact dataset <o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l11 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Compound dataset<o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l11 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Compressed dataset <o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l11 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>6.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Dataset with named <span class=SpellE>VLEN</span>
<span class=SpellE>datatype</span><o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l11 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>7.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Dataset with nested <span class=SpellE>VLEN</span>
<span class=SpellE>datatype</span> <o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l11 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>8.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Dataset with <span class=SpellE>VLEN</span> <span
class=SpellE>datatype</span> <o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l11 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>9.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Dataset that uses named <span class=SpellE>datatype</span><o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l11 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>10.<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span></span><![endif]>Named <span class=SpellE>datatype</span><o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l11 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>11.<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span></span><![endif]>Nested groups with loop <o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l11 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>12.<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span></span><![endif]>Expand object reference <font color="#0000FF"> <o:p>
<b>Note</b>: In the case where references are expanded, there is a need for a 
special case in the later file comparison by h5diff, that will detect that the 
files are different.</o:p></font></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l11 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>13.<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span></span><![endif]>Expand soft link<o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l11 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>14.<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span></span><![endif]>Shallow group copy<o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l11 level1 lfo5;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>15.<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span></span><![endif]>Without attributes</p>
<p style='margin-left:.5in;text-indent:-.25in;mso-list:l11 level1 lfo5;
tab-stops:list .5in'>16. <font color="#0000FF">Deep group compare </font></p>

<p>Also a benchmark test between <span class=SpellE>h5copy</span> and the <span
class=SpellE>H5Dread/H5Dwrite</span> functions will be made. Items that could
be tested are</p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l16 level1 lfo6;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Large number of empty or small groups<o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l16 level1 lfo6;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Large number of attributes <o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l16 level1 lfo6;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Large dataset with different compressions<o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l16 level1 lfo6;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Chunked datasets<o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l16 level1 lfo6;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Datasets with variable-length <span
class=SpellE>datatype</span><o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l16 level1 lfo6;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>6.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>dataset is too large to fit into memory</p>

<h1>Inclusion of <span class=SpellE>H5Gcopy</span> in <span class=SpellE>h5repack</span></h1>

<p><span class=SpellE><span class=GramE>h5repack</span></span> is a command
line tool that regenerates one HDF5 file to a new one using filter and layout
options. All the objects from the original file are read to memory using the
API function <span class=SpellE>H5Dread</span> and saved to a new file using <span
class=SpellE>H5Dwrite</span>.</p>

<p>Using <span class=SpellE>H5Gcopy</span> in <span class=SpellE>h5repack</span>
will take advantage of fast low level object copy, especially in<span
class=GramE>:</span><br>
<br>
• Copying metadata such as attributes, data type, data space, and property
lists. Since the information of object header is directly copied from the
source to the destination, it saves I/O operations. For example, it is required
that <span class=GramE>a data type and data space are</span> created when
copying a simple attribute by the traditional higher level way. This is all
done in one operation with <span class=SpellE>H5Gcopy</span>.<br>
<br>
• Copying compressed raw data. Bytes of compressed raw data are directly copied
from the source to the destination. Using the high level <span class=SpellE>H5Dread</span>
and <span class=SpellE>H5Dwrite</span> routines, it requires uncompressing the
data to read the data from the source file, and compressing the data to write
the data into the destination. These uncompress/compress operations can be very
time consuming. </p>

<h3><span class=SpellE><span class=GramE>h5repack</span></span> options</h3>

<p><br>
<span class=SpellE><span class=GramE>h5repack</span></span> allows the user to
change data layout and compression properties. <span class=SpellE>H5Gcopy</span>
does not support such options. When the different data layout or <span
class=GramE>compression are</span> used in <span class=SpellE>h5repack</span>, <span
class=SpellE>H5Gcopy</span> cannot be used in that dataset copy. In such a
case, the old way of <span class=SpellE>h5repack</span> will be used.<br>
&nbsp;</p>

<h3>Benchmarks</h3>

<p><br>
We will need a set of tests to determine how much the <span class=SpellE>H5Gcopy</span>
improves <span class=SpellE>h5repack</span>. Here is a list of interesting
cases for benchmark study.</p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l13 level1 lfo7;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Large number of empty or small groups<o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l13 level1 lfo7;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Large number of attributes <o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l13 level1 lfo7;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Large dataset with different compressions<o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l13 level1 lfo7;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Chunked datasets<o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l13 level1 lfo7;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Datasets with variable-length <span
class=SpellE>datatype</span><o:p></o:p></p>

<p style='margin-left:.5in;text-indent:-.25in;mso-list:l13 level1 lfo7;
tab-stops:list .5in'><![if !supportLists]><span style='mso-fareast-font-family:
"Times New Roman"'><span style='mso-list:Ignore'>6.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>dataset is too large to fit into memory</p>

<div align=center style='margin-left:.25in;text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<p>Last updated</p>

<p><!--webbot bot="Timestamp" S-Type="EDITED" S-Format="%m/%d/%Y" startspan -->09/08/2006<!--webbot bot="Timestamp" endspan i-checksum="12634" --></p>

<p>Send comments to <a href="mailto:hdfhelp@ncsa.uiuc.edu"><span class=SpellE>hdfhelp@ncsa.uiuc.edu</span></a></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p><br>
<br>
<br>
<br>
&nbsp;</p>

<p>&nbsp;</p>

</div>

</body>

</html>
